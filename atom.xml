<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pudding 日常</title>
  <icon>https://www.gravatar.com/avatar/00dc32454135c01a0b80be2cbf59b5ab</icon>
  <subtitle>a week is 2% of the year</subtitle>
  <link href="https://wu3227834.github.io/atom.xml" rel="self"/>
  
  <link href="https://wu3227834.github.io/"/>
  <updated>2025-05-29T10:13:18.875Z</updated>
  <id>https://wu3227834.github.io/</id>
  
  <author>
    <name>Pudding</name>
    <email>wu3227834@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux性能调优：内存</title>
    <link href="https://wu3227834.github.io/2025/05/28/2025-05-28-linux-tracing-mem/"/>
    <id>https://wu3227834.github.io/2025/05/28/2025-05-28-linux-tracing-mem/</id>
    <published>2025-05-28T00:00:00.000Z</published>
    <updated>2025-05-29T10:13:18.875Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux内存工作原理"><a href="#Linux内存工作原理" class="headerlink" title="Linux内存工作原理"></a>Linux内存工作原理</h2><h3 id="内存分配与回收"><a href="#内存分配与回收" class="headerlink" title="内存分配与回收"></a>内存分配与回收</h3><p>malloc() 是 C 标准库提供的内存分配函数，对应到系统调用上，有两种实现方式，即 brk() 和 mmap()。</p><p>对小块内存（小于 128K），C 标准库使用 brk() 来分配，也就是通过移动堆顶的位置来分配内存。这些内存释放后并不会立刻归还系统，而是被缓存起来，这样就可以重复使用。</p><p>对大块内存（大于 128K），则使用内存映射 mmap() 来分配，也就是在文件映射找一块空闲内存分配出去。</p><p>各自的<strong>优缺点</strong>：</p><ul><li>brk() 方式的缓存，可以减少缺页异常的发生，提高内存访问效率；不过，由于这些内存没有归还系统，在内存工作繁忙时，频繁的内存分配和释放会造成内存碎片</li><li>mmap() 方式分配的内存，会在释放时直接归还系统，所以每次 mmap 都会发生缺页异常。在内存工作繁忙时，频繁的内存分配会导致大量的缺页异常，使内核的管理负担增大</li></ul><p>整体来说，Linux 使用<strong>伙伴系统</strong>来管理内存分配。前面我们提到过，这些内存在 MMU 中以页为单位进行管理，伙伴系统也一样，以页为单位来管理内存，并且会通过相邻页的合并，减少内存碎片化（比如 brk 方法造成的内存碎片）。</p><p>在用户空间，malloc 通过 brk() 分配的内存，在释放时并不立即归还系统，而是缓存起来重复利用。在内核空间，Linux 通过 slab 分配器来管理小内存，可以把 slab 堪称构建在<strong>伙伴系统上的一个缓存</strong>，主要作用就是分配并释放内核中的小对象。</p><p>系统也不会任由某个进程用完所有内存。在发现内存紧张时，系统会通过一系列机制来回收内存：</p><ul><li>回收内存，比如使用 LRU（Least Recently Used）算法，回收最近使用最少的内存页面</li><li>回收不常访问的内存，把不常用的内存交换分区直接写到磁盘中（会用到交换分区）</li><li>杀死进程，内存紧张时系统还会通过 OOM（Out of Memory），直接杀掉占用大量内存的进程</li></ul><p>OOM 是内核的一种保护机制。它监控进程的内存使用情况，并且使用 oom_score 为每个进程的内存使用情况进行评分：</p><ul><li>进程消耗的内存越大，oom_score 就越大</li><li>进程运行占用的 CPU 越多，oom_score 就越小</li></ul><p>可以手动设置进程的 oom_adj 来调整 oom_score。oom_adj 的范围是 [-17, 15]，数值越大，进程越容易被杀死；反之，越不容易被杀死。</p><h3 id="如何查看内存使用情况"><a href="#如何查看内存使用情况" class="headerlink" title="如何查看内存使用情况"></a>如何查看内存使用情况</h3><p>1、free 命令</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ free</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:     <span class="number"> 262695500 </span> <span class="number"> 106731876 </span> <span class="number"> 141173212 </span>   <span class="number"> 4257008 </span>  <span class="number"> 14790412 </span>  149168720</span><br><span class="line">Swap:            <span class="number"> 0 </span>         <span class="number"> 0 </span>          0</span><br></pre></td></tr></table></figure><ul><li>total：总内存</li><li>used：已使用内存，包括共享内存</li><li>free：空闲内存</li><li>shared：共享内存</li><li>buff/cache：缓存内存，包括缓冲区和缓存</li><li>available：可用内存，包括空闲内存和缓存内存</li></ul><p><strong>注意</strong>：available 不仅包含未使用内存，还包括了可回收的缓存，所以一般会比未使用内存更大。不过，并不是所有缓存都可以回收，因为有些缓存可能正在使用中。</p><p>2、top 命令</p><p>可以查看每个进程的内存使用情况</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">top - 19:28:02 up<span class="number"> 201 </span>days,  2:48, <span class="number"> 2 </span>users,  load average: 134.36, 136.81, 111.38</span><br><span class="line">Tasks:<span class="number"> 1284 </span>total,  <span class="number"> 6 </span>running,<span class="number"> 1278 </span>sleeping,  <span class="number"> 0 </span>stopped,  <span class="number"> 0 </span>zombie</span><br><span class="line">%Cpu(s): 87.2 us,  8.9 sy,  0.0 ni,  0.9 id,  0.0 wa,  1.8 hi,  1.1 si,  0.0 st</span><br><span class="line">MiB Mem : 256538.6 total, 137892.3 free, 104201.3 used,  14445.0 buff/cache</span><br><span class="line">MiB Swap:      0.0 total,      0.0 free,      0.0 used. 145701.9 avail Mem</span><br><span class="line"></span><br><span class="line">    PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND</span><br><span class="line"><span class="number"> 607070 </span>root     <span class="number"> 20 </span> <span class="number"> 0 </span> 266.3g  82.5g <span class="number"> 79228 </span>S <span class="number"> 4861 </span> 33.0  40025:32 tabletserver_ma</span><br><span class="line"><span class="number"> 835494 </span>root     <span class="number"> 20 </span> <span class="number"> 0 </span>8557368<span class="number"> 207048 </span><span class="number"> 10872 </span>S 121.7   0.1 357:04.40 java</span><br><span class="line"><span class="number"> 842048 </span>1001     <span class="number"> 20 </span> <span class="number"> 0 </span>  32.8g <span class="number"> 31168 </span><span class="number"> 14888 </span>S 113.0   0.0   0:03.41 java</span><br><span class="line"><span class="number"> 840498 </span>root     <span class="number"> 20 </span> <span class="number"> 0 </span><span class="number"> 727932 </span><span class="number"> 31336 </span> <span class="number"> 7304 </span>R  91.3   0.0   2164:46 node_exporter</span><br><span class="line"><span class="number"> 653917 </span>root     <span class="number"> 20 </span> <span class="number"> 0 </span>  12.3g<span class="number"> 997944 </span><span class="number"> 46948 </span>S  78.3   0.4  15877:42 kubelet</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>VIRT：虚拟内存，只要是进程申请过的内存，即便还没有真正分配物理内存，也会计算在内</li><li>RES：实际内存，也就是进程<strong>实际使用的物理内存</strong>大小，但<strong>不包括 Swap 和共享内存</strong></li><li>SHR：共享内存，比如与其他进程共同使用的共享内存、加载的动态链接库以及程序的代码段等</li><li>%MEM：进程占用的物理内存占系统总内存的百分比</li></ul><p><strong>注意</strong>：</p><ul><li>虚拟内存通常并不会全部分配物理内存。从上面的输出，你可以发现每个进程的虚拟内存都大于实际内存，这是因为虚拟内存是进程申请的内存，即使进程没有真正分配物理内存，也会计算在内。</li><li>共享内存 SHR 并不一定是共享的，比方说，<strong>程序的代码段、非共享的动态内存链接库</strong>，也都在 SHR 里。SHR 也包括了<strong>进程间真正共享的内存</strong>。所以在计算多个进程的内存使用时，不要把所有进程的 SHR 直接相加得出结果</li></ul><h2 id="内存的-Buffer-和-Cache"><a href="#内存的-Buffer-和-Cache" class="headerlink" title="内存的 Buffer 和 Cache"></a>内存的 Buffer 和 Cache</h2><h3 id="free-的数据来源"><a href="#free-的数据来源" class="headerlink" title="free 的数据来源"></a>free 的数据来源</h3><p>man free 查看</p><p><img src="/img/2025-05-28-linux_tracing_mem/image.png" alt="man free"></p><p>从手册看到：</p><ul><li>Buffers：Memory used by kernel buffers (Buffers in /proc/meminfo)</li><li>Cache：Memory used by the page cache and slabs (Cached and Slab in /proc/meminfo)</li></ul><h3 id="proc-文件系统"><a href="#proc-文件系统" class="headerlink" title="proc 文件系统"></a>proc 文件系统</h3><p>man proc 查看</p>]]></content>
    
    
    <summary type="html">12313</summary>
    
    
    
    
    <category term="linux" scheme="https://wu3227834.github.io/tags/linux/"/>
    
    <category term="性能测试" scheme="https://wu3227834.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>系统的Swap机制</title>
    <link href="https://wu3227834.github.io/2025/05/16/2025-05-16-xi-tong-de-swap-ji-zhi/"/>
    <id>https://wu3227834.github.io/2025/05/16/2025-05-16-xi-tong-de-swap-ji-zhi/</id>
    <published>2025-05-16T00:00:00.000Z</published>
    <updated>2025-05-29T10:13:18.875Z</updated>
    
    <content type="html"><![CDATA[<p><strong>文件页</strong>：代表可回收内存，文件页的大部分可以直接回收，以后有需要时，再从磁盘重新读取；而那些被应用程序修改过，并且暂时还没写入磁盘的数据（也就是脏页），就得先写入磁盘，然后才能进行内存释放</p><p>脏页一般以两个方式写入磁盘：</p><ul><li>在应用程序中，通过系统调用 fync，把脏页同步到磁盘中</li><li>由内核线程 pdflush 负载这些脏页的刷新</li></ul><p><strong>匿名页</strong>：应用程序动态分配的<strong>堆空间</strong>，使用 swap 机制回收</p><h2 id="Swap-原理"><a href="#Swap-原理" class="headerlink" title="Swap 原理"></a>Swap 原理</h2><p>Swap 简单来说就是把一块磁盘空间或者一个本地文件夹，当成内存来使用。它包括换出和换入两个过程：</p><ul><li><strong>换出</strong>，就是把进程暂时不用的内存数据存储到磁盘中，并释放这些数据占用的内存</li><li><strong>换入</strong>，则是把进程再次访问这些内存的时候，把它们从磁盘读到内存中来</li></ul><p>常见的笔记本电脑的休眠和快速开机功能，也基于 Swap。休眠时，把系统的内存存入磁盘，这样等到再次开机时，只要从磁盘中加载内存就可以。这样省去了很多应用程序的初始化过程，加快了开机速度。</p><p>内存回收的时机：</p><p>1、<strong>直接内存回收</strong>：当有新的大块内存分配请求，但是剩余内存不足，这个时候系统就需要回收一部分内存</p><p>2、<strong>内核线程 kswapd0</strong>来定期回收内存，它定义了三个内存阈值（watermark，也称为水位），分别是页最小阈值（pages_min）、页最低阈值（pages_low）和页最高阈值（pages_high）。剩余内存，则使用 pages_free 表示</p><p><img src="/img/2025-05-16-%E7%B3%BB%E7%BB%9F%E7%9A%84Swap%E6%9C%BA%E5%88%B6/image.png" alt="pages_free"></p><p>kswapd0 定期扫描内存的使用情况，并根据剩余内存落在这三个阈值的空间位置，进行内存的会后操作：</p><ul><li>剩余内存小于页最小阈值，说明进程可用内存都耗尽了，只有内核才可以分配空间</li><li>剩余内存落在页最小阈值和页最低阈值中间，说明内存压力比较大，剩余内存不多了。这时 kswapd0 会执行内存回收，直到剩余内存大于高阈值为止</li><li>剩余内存落在页最低阈值和页最高阈值中间，说明内存有一定压力，但还可以满足新压力请求</li><li>剩余内存大于页内存阈值，说明剩余内存比较多，没有内存压力</li></ul><p><strong>页低阈值</strong>是由内核选项 /proc/sys/vm/min_free_kbytes 设置，其他两个阈值，都是根据页最小阈值计算生成的</p><h2 id="NUMA-和-Swap"><a href="#NUMA-和-Swap" class="headerlink" title="NUMA 和 Swap"></a>NUMA 和 Swap</h2><p>在 NUMA 架构下，多个处理器被划分到不同 Node 上，且每个 Node 都拥有自己的本地内存空间。而同一个 Node 内部的内存空间，实际上又可以在进一步分为不同的内存域（Zone），比如直接内存访问区（DMA）、普通内存区（NORMAL）、伪内存区（MOVABLE）等，如下图所示：</p><p><img src="/img/2025-05-16-%E7%B3%BB%E7%BB%9F%E7%9A%84Swap%E6%9C%BA%E5%88%B6/image2.png" alt="Node 内部的内存空间"></p><p>使用 numactl 命令查看 Node 的分布情况</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ numactl --hardware</span><br><span class="line">available:<span class="number"> 2 </span>nodes (0-1)</span><br><span class="line">node<span class="number"> 0 </span>cpus:<span class="number"> 0 </span>1<span class="number"> 2 </span>3<span class="number"> 4 </span>5<span class="number"> 6 </span>7<span class="number"> 8 </span>9<span class="number"> 20 </span>21<span class="number"> 22 </span>23<span class="number"> 24 </span>25<span class="number"> 26 </span>27<span class="number"> 28 </span>29</span><br><span class="line">node<span class="number"> 0 </span>size:<span class="number"> 130960 </span>MB</span><br><span class="line">node<span class="number"> 0 </span>free:<span class="number"> 7308 </span>MB</span><br><span class="line">node<span class="number"> 1 </span>cpus:<span class="number"> 10 </span>11<span class="number"> 12 </span>13<span class="number"> 14 </span>15<span class="number"> 16 </span>17<span class="number"> 18 </span>19<span class="number"> 30 </span>31<span class="number"> 32 </span>33<span class="number"> 34 </span>35<span class="number"> 36 </span>37<span class="number"> 38 </span>39</span><br><span class="line">node<span class="number"> 1 </span>size:<span class="number"> 131072 </span>MB</span><br><span class="line">node<span class="number"> 1 </span>free:<span class="number"> 17581 </span>MB</span><br><span class="line">node distances:</span><br><span class="line">node  <span class="number"> 0 </span>  1</span><br><span class="line">  0: <span class="number"> 10 </span> 21</span><br><span class="line">  1: <span class="number"> 21 </span> 10</span><br></pre></td></tr></table></figure><p>前面提到的三个内存阈值（页最小阈值、页低阈值和页高阈值），都可以通过内存域在 proc 文件系统中的接口 /proc/zoneinfo 来查看</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ cat /<span class="keyword">proc</span>/zoneinfo|<span class="title"> head</span> -n 20<span class="title"></span></span><br><span class="line"><span class="title">Node</span> 0,<span class="title"> zone</span> <span class="title">     DMA</span></span><br><span class="line"><span class="title">  pages</span> free     3957<span class="title"></span></span><br><span class="line"><span class="title">        min</span>      7<span class="title"></span></span><br><span class="line"><span class="title">        low</span>      8<span class="title"></span></span><br><span class="line"><span class="title">        high</span>     10<span class="title"></span></span><br><span class="line"><span class="title">        scanned</span>  0<span class="title"></span></span><br><span class="line"><span class="title">        spanned</span>  4095<span class="title"></span></span><br><span class="line"><span class="title">        present</span>  3992<span class="title"></span></span><br><span class="line"><span class="title">        managed</span>  3971<span class="title"></span></span><br><span class="line"><span class="title">    nr_free_pages</span> 3957<span class="title"></span></span><br><span class="line"><span class="title">    nr_alloc_batch</span> 2<span class="title"></span></span><br><span class="line"><span class="title">    nr_inactive_anon</span> 0<span class="title"></span></span><br><span class="line"><span class="title">    nr_active_anon</span> 0<span class="title"></span></span><br><span class="line"><span class="title">    nr_inactive_file</span> 0<span class="title"></span></span><br><span class="line"><span class="title">    nr_active_file</span> 0<span class="title"></span></span><br><span class="line"><span class="title">    nr_unevictable</span> 0<span class="title"></span></span><br><span class="line"><span class="title">    nr_mlock</span>     0<span class="title"></span></span><br><span class="line"><span class="title">    nr_anon_pages</span> 0<span class="title"></span></span><br><span class="line"><span class="title">    nr_mapped</span>    0<span class="title"></span></span><br><span class="line"><span class="title">    nr_file_pages</span> 0</span><br></pre></td></tr></table></figure><p>主要指标包括：</p><ul><li>pages 处的 min、low、high，就是上面提到的三个内存阈值，而 free 是<strong>剩余内存页数</strong>，它跟后边的 nr_free_pages 相同</li><li>nr_zone_active_anon 和 nr_zone_inactive_anon，分别代表<strong>活跃匿名页</strong>和<strong>不活跃匿名页</strong>的数量</li><li>nr_zone_active_file 和 nr_zone_inactive_file，分别代表<strong>活跃文件页</strong>和<strong>不活跃文件页</strong>的数量</li></ul><p>某个 Node 内存不足时，系统可以从其他 Node 寻找空闲内存，也可以从本地内存种回收内存。具体选哪种模式，你可以通过 /proc/sys/vm/zone_reclaim_mode 来调整。它支持以下几个选项：</p><ul><li>默认的是 0，也就是刚刚提到的模式，表示既可以从其他 Node 寻找空闲内存，也可以从本地内存中回收</li><li>1、2、4 都表示只回收本地内存，2 表示可以回写脏数据来回收内存，4 表示可以用 Swap 方式回收内存</li></ul><h2 id="swapness"><a href="#swapness" class="headerlink" title="swapness"></a>swapness</h2><p>内存回收包括文件页和匿名页：</p><ul><li>对文件页的回收，是直接回收缓存，或者把脏页写回磁盘后再回收</li><li>对匿名页的回收，是通过 Swap 机制，把它们写入磁盘后再释放内存</li></ul><p>Linux 提供了一个 /proc/sys/vm/swapiness 选项，用来调整使用 Swap 的积极程度；swappiness 的范围是 0-100，数值越大，越积极使用 Swap，也就是更倾向于回收匿名页；数值越小，越消极使用 Swap，也就是更倾向于回收文件页。</p><h2 id="系统-Swap-升高的原因"><a href="#系统-Swap-升高的原因" class="headerlink" title="系统 Swap 升高的原因"></a>系统 Swap 升高的原因</h2><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>Linux 本身支持两种类型的 Swap，即 Swap 分区和 Swap 文件，以 Swap 文件为例子，例如如下命令开启 Swap 文件</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 创建swap文件</span></span><br><span class="line"><span class="title">fallocate</span> -l 500M /<span class="class"><span class="keyword">data</span>/swapfile</span></span><br><span class="line"><span class="meta"># 修改权限，仅root用户可读写</span></span><br><span class="line"><span class="title">chmod</span> <span class="number">600</span> /<span class="class"><span class="keyword">data</span>/swapfile</span></span><br><span class="line"><span class="meta"># 配置swap文件</span></span><br><span class="line"><span class="title">mkswap</span> /<span class="class"><span class="keyword">data</span>/swapfile</span></span><br><span class="line"><span class="meta"># 开启swap</span></span><br><span class="line"><span class="title">swapon</span> /<span class="class"><span class="keyword">data</span>/swapfile</span></span><br></pre></td></tr></table></figure><p>执行 free 看到 swap 添加成功</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ free</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:      <span class="number"> 16092196 </span>    <span class="number"> 562160 </span>    <span class="number"> 613616 </span>    <span class="number"> 295992 </span>  <span class="number"> 14916420 </span>   15135272</span><br><span class="line">Swap:       <span class="number"> 511996 </span>         <span class="number"> 0 </span>     511996</span><br></pre></td></tr></table></figure><p>执行 dd 命令，模拟大文件的读取</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd <span class="attribute">if</span>=/dev/vdb1 <span class="attribute">of</span>=/dev/null <span class="attribute">bs</span>=1G <span class="attribute">count</span>=400</span><br></pre></td></tr></table></figure><p>执行 sar 查看内存和 swap 指标</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">$ sar -rS 3</span><br><span class="line">Linux 3.10.107-1-tlinux2_kvm_guest-0051 (VM_194_74_centos)      07/05/20        _x86_64_        (8 CPU)</span><br><span class="line"></span><br><span class="line">20:16:14    kbmemfree kbmemused  %memused kbbuffers  kbcached  kbcommit   %commit  kbactive   kbinact   kbdirty</span><br><span class="line">20:16:17    <span class="number"> 12016228 </span> <span class="number"> 4075968 </span>    25.33  <span class="number"> 1944876 </span>  <span class="number"> 394804 </span> <span class="number"> 3089884 </span>    18.61  <span class="number"> 2364636 </span> <span class="number"> 1364468 </span>       88</span><br><span class="line"></span><br><span class="line">20:16:14    kbswpfree kbswpused  %swpused  kbswpcad   %swpcad</span><br><span class="line">20:16:17      <span class="number"> 511996 </span>       <span class="number"> 0 </span>     0.00        <span class="number"> 0 </span>     0.00</span><br><span class="line"></span><br><span class="line">20:16:17    kbmemfree kbmemused  %memused kbbuffers  kbcached  kbcommit   %commit  kbactive   kbinact   kbdirty</span><br><span class="line">20:16:20    <span class="number"> 11542068 </span> <span class="number"> 4550128 </span>    28.28  <span class="number"> 2405684 </span>  <span class="number"> 394868 </span> <span class="number"> 3089856 </span>    18.61  <span class="number"> 2364984 </span> <span class="number"> 1825212 </span>      120</span><br><span class="line"></span><br><span class="line">20:16:17    kbswpfree kbswpused  %swpused  kbswpcad   %swpcad</span><br><span class="line">20:16:20      <span class="number"> 511996 </span>       <span class="number"> 0 </span>     0.00        <span class="number"> 0 </span>     0.00</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">20:16:50    kbmemfree kbmemused  %memused kbbuffers  kbcached  kbcommit   %commit  kbactive   kbinact   kbdirty</span><br><span class="line">20:16:53     <span class="number"> 6331744 </span> <span class="number"> 9760452 </span>    60.65  <span class="number"> 7474548 </span>  <span class="number"> 395052 </span> <span class="number"> 3089736 </span>    18.61  <span class="number"> 2364948 </span> <span class="number"> 6894124 </span>       84</span><br><span class="line"></span><br><span class="line">20:16:50    kbswpfree kbswpused  %swpused  kbswpcad   %swpcad</span><br><span class="line">20:16:53      <span class="number"> 511996 </span>       <span class="number"> 0 </span>     0.00        <span class="number"> 0 </span>     0.00</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">20:17:44    kbmemfree kbmemused  %memused kbbuffers  kbcached  kbcommit   %commit  kbactive   kbinact   kbdirty</span><br><span class="line">20:17:47       <span class="number"> 90140 </span><span class="number"> 16002056 </span>    99.44 <span class="number"> 13573540 </span>  <span class="number"> 392440 </span> <span class="number"> 3089728 </span>    18.61  <span class="number"> 2180308 </span><span class="number"> 13149900 </span>      164</span><br><span class="line"></span><br><span class="line">20:17:44    kbswpfree kbswpused  %swpused  kbswpcad   %swpcad</span><br><span class="line">20:17:47      <span class="number"> 486836 </span>   <span class="number"> 25160 </span>     4.91      <span class="number"> 120 </span>     0.48</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">20:18:44    kbmemfree kbmemused  %memused kbbuffers  kbcached  kbcommit   %commit  kbactive   kbinact   kbdirty</span><br><span class="line">20:18:47       <span class="number"> 87988 </span><span class="number"> 16004208 </span>    99.45 <span class="number"> 13658536 </span>  <span class="number"> 354504 </span> <span class="number"> 3089760 </span>    18.61  <span class="number"> 2112144 </span><span class="number"> 13218932 </span>      140</span><br><span class="line"></span><br><span class="line">20:18:44    kbswpfree kbswpused  %swpused  kbswpcad   %swpcad</span><br><span class="line">20:18:47      <span class="number"> 403652 </span>  <span class="number"> 108344 </span>    21.16      <span class="number"> 140 </span>     0.13</span><br></pre></td></tr></table></figure><p>可以看到，总的内存使用率（%memused）在不断增长，从开始的 25% 一直涨到了 99%，并且主要内存都被缓冲区（kbbuffers）占用，大致的变化过程为：</p><ul><li>刚开始，剩余内存（kbmemfree）不断减少，而缓冲区（kbbuffers）则不断增大，由此可知，剩余内存不断分配给了缓冲区</li><li>一段时间后，剩余内存已经很小了，而缓存区占用了大部分内存。此时，Swap 的使用开始逐渐增大，缓冲区和剩余内存则只在小范围内波动</li></ul><p>为什么 Swap 会升高呢？（按理来说，应该先回收缓冲区的内存，这属于可回收内存），观察 /proc/zoneinfo 指标如下</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ watch -d grep -A <span class="number">15</span> &#x27;Normal&#x27; /<span class="keyword">proc</span>/zoneinfo<span class="title"></span></span><br><span class="line"><span class="title"></span></span><br><span class="line"><span class="title">Every</span> 2.0s:<span class="title"> grep</span> -A 15<span class="title"> Normal</span> /<span class="keyword">proc</span>/zoneinfo<span class="title">                                                             Sun</span> Jul  5 20:19:39 2020<span class="title"></span></span><br><span class="line"><span class="title"></span></span><br><span class="line"><span class="title">Node</span> 0,<span class="title"> zone</span> <span class="title">  Normal</span></span><br><span class="line"><span class="title">  pages</span> free     5200<span class="title"></span></span><br><span class="line"><span class="title">        min</span>      3268<span class="title"></span></span><br><span class="line"><span class="title">        low</span>      4085<span class="title"></span></span><br><span class="line"><span class="title">        high</span>     4902<span class="title"></span></span><br><span class="line"><span class="title">        scanned</span>  24<span class="title"></span></span><br><span class="line"><span class="title">        spanned</span>  3407872<span class="title"></span></span><br><span class="line"><span class="title">        present</span>  3407872<span class="title"></span></span><br><span class="line"><span class="title">        managed</span>  3276302<span class="title"></span></span><br><span class="line"><span class="title">    nr_free_pages</span> 5200<span class="title"></span></span><br><span class="line"><span class="title">    nr_inactive_anon</span> 134532<span class="title"></span></span><br><span class="line"><span class="title">    nr_active_anon</span> 246943<span class="title"></span></span><br><span class="line"><span class="title">    nr_inactive_file</span> 2466171<span class="title"></span></span><br><span class="line"><span class="title">    nr_active_file</span> 280987<span class="title"></span></span><br><span class="line"><span class="title">    nr_unevictable</span> 0<span class="title"></span></span><br><span class="line"><span class="title">    nr_mlock</span>     0</span><br></pre></td></tr></table></figure><p>可以看到，剩余内存（pages free）在一个很小范围内不停地波动。当它小于页低阈值（pages low）时，又会突然增大到一个大于页高阈值（pages high）的数值</p><ul><li>当剩余内存小于页低阈值时，系统会回收一些缓存和匿名内存，使剩余内存增大。其中，缓存的回收导致 sar 中的缓冲区减少，而匿名内存的回收导致了 Swap 的使用增大。其中，缓存的回收导致 sar 中的缓冲区减少，而匿名内存的回收导致了 Swap 的使用增大。</li><li>同事由于 dd 还在继续，剩余内存又会重新分配给缓存，导致剩余内存减少，缓冲区增大</li></ul><p>利用 proc 文件系统，可以查看 Swap 换出的虚拟内存大小，它保存在 /proc/pid/status 中 VmSwap</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ for file in /proc/*/status ; do awk &#x27;/VmSwap|Name|^Pid/&#123;printf $2 &quot; &quot; $3&#125;END&#123; print &quot;&quot;&#125;&#x27; $file; done | sort -k<span class="number"> 3 </span>-n -r | head</span><br><span class="line">systemd-journal<span class="number"> 3048 </span>86160 kB</span><br><span class="line">writeback<span class="number"> 50 </span></span><br><span class="line">watchdog/7<span class="number"> 41 </span></span><br><span class="line">watchdog/6<span class="number"> 36 </span></span><br><span class="line">watchdog/5<span class="number"> 31 </span></span><br><span class="line">watchdog/4<span class="number"> 26 </span></span><br><span class="line">watchdog/3<span class="number"> 21 </span></span><br><span class="line">watchdog/2<span class="number"> 16 </span></span><br><span class="line">watchdog/1<span class="number"> 11 </span></span><br><span class="line">watchdog/0<span class="number"> 10 </span></span><br></pre></td></tr></table></figure><p>可以看到，使用 swap 较多的是 systemd-journal</p><p>结束之后，需要关闭 swap</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swapoff -<span class="selector-tag">a</span></span><br></pre></td></tr></table></figure><p>一般关闭 swap 并重新打开，可以这么执行（是一种常见的 swap 清理方法）</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">swapoff</span> -a &amp;&amp; swapon /<span class="class"><span class="keyword">data</span>/swapfile</span></span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>在内存资源紧张时，Linux 会通过 Swap，把不常访问的匿名页换出到磁盘中，下次访问的时候再从磁盘换入到内存中来。你可以设置 /proc/sys/vm/min_free_kbytes，来调整系统定期回收内存的阈值；也可以设置 /proc/sys/vm/swappiness，来调整文件页和匿名页的回收倾向。</p><p>当 Swap 变高时，你可以用 sar、/proc/zoneinfo、/proc/pid/status 等方法，查看系统和进程的内存使用情况，进而找出 Swap 升高的根源和受影响的进程。</p><p>通常，降低 Swap 的使用，可以提高系统的整体性能。有几种常见的降低方法：</p><ul><li>禁用 Swap，现在服务器的内存走足够大，所有除非有必要，一般会<strong>禁用 Swap</strong>，大部分云平台中的虚拟机都默认禁用 Swap</li><li>如果实在需要用到 Swap，可以尝试<strong>降低 swappiness</strong>值，减少内存回收时 Swap 的使用倾向</li><li>响应延迟敏感的应用，如果它们可能在开启 Swap 的服务器中运行，你还可以使用库函数 mlock() 或者 mlockall() <strong>锁定内存</strong>，阻止它们的内存换出</li></ul><p>常见的三种清理缓存的方法：</p><p>1、清理 pagecache</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="number">1</span> &gt; <span class="regexp">/proc/</span>sys<span class="regexp">/vm/</span>drop_caches  <span class="comment"># 或者 sysctl -w vm.drop_caches = 1</span></span><br></pre></td></tr></table></figure><p>2、清理 dentries 和 inodes</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="number">2</span> &gt; <span class="regexp">/proc/</span>sys<span class="regexp">/vm/</span>drop_caches  <span class="comment"># 或者 sysctl -w vm.drop_caches = 2</span></span><br></pre></td></tr></table></figure><p>3、清理 pagecache、dentries 和 inodes</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="number">3</span> &gt; <span class="regexp">/proc/</span>sys<span class="regexp">/vm/</span>drop_caches  <span class="comment"># 或者 sysctl -w vm.drop_caches = 3</span></span><br></pre></td></tr></table></figure><p>4、使用 sync 命令来清理文件系统内存，还会清理僵尸（zombie）对象和它们占用的内存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sync</span></span><br></pre></td></tr></table></figure><h2 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h2><ul><li><a href="https://github.com/Miller-Xie/Linux-kernel-notes/blob/master/Linux%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98.md#14-%E7%B3%BB%E7%BB%9F%E7%9A%84swap%E6%9C%BA%E5%88%B6"> 系统的Swap机制 </a></li></ul>]]></content>
    
    
    <summary type="html">Linux 的 Swap 机制通过将磁盘空间用作虚拟内存，缓解物理内存不足的问题。Swap 包括换出（将不常用内存数据存至磁盘，释放内存）和换入（再次访问时从磁盘读回内存）两个过程。内存回收分为文件页和匿名页：文件页可直接回收或写入磁盘后释放，匿名页则通过 Swap 回收。内核线程 kswapd0 根据页最小、最低和最高阈值定期回收内存，当剩余内存低于阈值时触发回收。NUMA 架构下，内存分为不同 Node 和 Zone，回收策略可通过 /proc/sys/vm/zone_reclaim_mode 调整。Swap 使用倾向由 /proc/sys/vm/swappiness 控制，值越大越倾向回收匿名页。Swap 升高可能因缓存占用或匿名页回收，需用 sar、/proc/zoneinfo 等工具分析。优化方法包括禁用 Swap、降低 swappiness、锁定内存，或清理缓存（如 pagecache、dentries）。合理配置 Swap 可提升性能，但需避免过度使用以降低延迟。</summary>
    
    
    
    
    <category term="linux" scheme="https://wu3227834.github.io/tags/linux/"/>
    
    <category term="性能测试" scheme="https://wu3227834.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Linux性能调优：cpu</title>
    <link href="https://wu3227834.github.io/2025/05/15/2025-05-15-linux-tracing-cpu/"/>
    <id>https://wu3227834.github.io/2025/05/15/2025-05-15-linux-tracing-cpu/</id>
    <published>2025-05-15T00:00:00.000Z</published>
    <updated>2025-05-29T10:13:18.875Z</updated>
    
    <content type="html"><![CDATA[<h2 id="怎么理解“平均负载”"><a href="#怎么理解“平均负载”" class="headerlink" title="怎么理解“平均负载”"></a>怎么理解“平均负载”</h2><p>简单来说，平均负载是指单位时间内，系统处于可运行状态和不可中断状态的平均进程数，也就是平均活跃进程数。它和 CPU 使用率没有直接关系，因为 CPU 使用率是指单位时间内 CPU 繁忙程度的百分比。</p><blockquote><p>可运行状态：进程正在运行或准备运行。也就是我们常用 ps 命令看到的处于 R 状态的进程<br>不可中断状态：进程正在等待某个事件的完成，例如 I/O 操作、等待锁、等待信号量等。也就是我们常用 ps 命令看到的处于 D 状态的进程</p></blockquote><p>那么，在实际生产环境中，平均负载多高时，需要我们重点关注呢？</p><p>在我看来，当平均负载高于 CPU 数量 70% 的时候，就应该分析排查负载高的问题了。平均负载提供了一个快速查看系统整体性能的手段，反映了整体的负载情况。但是平均负载本身，我们不能直接发现到底是哪里出现了瓶颈。所以，在理解平均负载时，也要注意：</p><ul><li>平均负载高可能是 CPU 密集型进程导致的</li><li>平均负载高不一定代表 CPU 利用率高，还有可能是 I/0 更繁忙了</li><li>当发现负载高的时候，你可看到使用 mpstat、pidstat 等工具，辅助分析负载的来源</li></ul><h2 id="CPU-上下文切换（上）"><a href="#CPU-上下文切换（上）" class="headerlink" title="CPU 上下文切换（上）"></a>CPU 上下文切换（上）</h2><ul><li>CPU 上下文：包括 CPU 寄存器和程序计数器</li><li>CPU 寄存器：是 CPU 内置的容量小、但速度极快的内存</li><li>程序计数器：是用来存储 CPU 正在执行的指令位置、或者即将执行的下一条指令位置的寄存器</li></ul><p><img src="/img/2025-05-15-linux_tracing_cpu/image.png" alt="cpu 架构"></p><ul><li>CPU 上下文切换：是先把前一个任务的 CPU 上下文（也就是 CPU 寄存器和程序计数器）保存起来，然后加载到新任务的上下文到这些寄存器和程序计数器，然后再跳转到程序计数器指向的新位置，运行新任务</li><li>这些保存下来的上下文，会存储在系统内核中，并在任务重新调度执行时再次加载出来</li></ul><p>根据任务的不同，CPU 的上下文切换可分为进程上下文切换、线程上下文切换和中断上下文切换。</p><h3 id="进程上下文切换"><a href="#进程上下文切换" class="headerlink" title="进程上下文切换"></a>进程上下文切换</h3><p>Linux 按照特权等级，把进程的运行空间分为内核空间和用户空间，对应着下图，CPU 特权等级的 Ring 0 和 Ring 3。</p><ul><li>内核空间（Ring 0）具有最高权限，可以直接访问所有资源</li><li>用户空间（Ring 3）只能访问受限资源，不能直接访问内存等硬件设备，必须通过系统调用陷入到内核中，才能访问这些特权资源</li></ul><p><img src="/img/2025-05-15-linux_tracing_cpu/image2.png" alt="运行空间"></p><p>从进程用户态到内核态的转变，需要通过<strong>系统调用</strong>来完成，系统调用的过程中会发生<strong>两次 CPU 上下文切换</strong>。CPU 里原本用户态指令的执行位置需要先保存起来，然后更新为内核态的指令位置，最后跳转到内核态运行内核任务；在系统调用结束后，CPU 寄存器需要恢复原本保存的用户态，然后再切换到用户空间，继续执行进程。</p><p><strong>注意：</strong></p><ol><li>系统调用的过程中，不会涉及到虚拟内存等进程态的资源，不会切换进程，系统调用过程和进程上下文切换不一样，整个过程都是同一个进程</li><li>系统调用称为特权模式切换，不是上下文切换</li></ol><p>进程上下文切换和系统调用的区别是，进程的上下文切换比系统调用多了一步：在保存当前进程的内核状态和 CPU 寄存器之前，需要先把该进程的虚拟内存、栈等保存下来；而加载了下一进程的内核态后，还需要刷新进程的虚拟内存和用户栈。</p><p><img src="/img/2025-05-15-linux_tracing_cpu/image3.png" alt="进程上下文切换"></p><p><strong>保存上下文和恢复上下文的过程需要内核在 CPU 上运行才能完成</strong>（上下文切换过程是 CPU 密集型），每次上下文切换都需要几十纳秒到数微妙的 CPU 时间。</p><p>在进程上下文切换次数过多的情况下，很容易导致 CPU 将大量时间耗费在<strong>寄存器、内核栈以及虚拟内存</strong>等资源的保存和恢复上，进而大大缩短了真正运行进程的时间，从而导致系统平均负载升高。</p><p>Linux 通过 TLB（Translation Lookaside Buffer）来管理虚拟内存到物理内存的映射关系。当虚拟内存更新后，TLB 也需要刷新，内存的访问也会随之变慢。特别是在<strong>多处理器系统</strong>上，缓存是被多个处理器<strong>共享</strong>的，刷新缓存不仅会影响当前处理器的进程，还会影响共享缓存的其他处理器的进程。</p><p>Linux 为每个 CPU 都维护了一个就绪队列，将活跃进程（即正在运行和正在等待 CPU 的进程）按照优先级和等待 CPU 的时间排序，然后选在最需要 CPU 的进程，也就是<strong>优先级最高和等待 CPU 时间最长</strong>的进程来运行。</p><p>进程被 CPU 重新调度的时机：</p><ol><li>进程执行完终止了，它之前使用的 CPU 会释放出来，这个时候再从就绪队列里，拿一个新的进程过来运行</li><li>为了保证所有进程可以得到公平调度，CPU 时间被划分为一段段的时间片，这些时间片再被轮流分配给各个进程。这样，当某个进程的时间片耗尽了，就会被系统挂起，切换到其它正在等待 CPU 的进程运行</li><li>进程在系统资源不足（比如内存不足）时，要等到资源满足后才可以运行，这个时候进程也会被挂起，并由系统调度其它进程运行</li><li>进程通过睡眠函数 sleep 这样的方法将自己主动挂起时，自然也会重新调度</li><li>有优先级更高的进程运行时，为了保证高优先级进程的运行，当前进程会被挂起，由高优先级进程来运行</li><li>发生硬件中断时，CPU 上的进程会被中断挂起，转而执行内核中的中断服务程序</li></ol><h3 id="线程上下文切换"><a href="#线程上下文切换" class="headerlink" title="线程上下文切换"></a>线程上下文切换</h3><p>线程和进程的区别：<strong>线程是调度的基本单位，而进程则是资源拥有的基本单位</strong>。</p><p>所谓内核中的任务调度，实际上的调度对象是<strong>线程</strong>；而进程只是给线程提供了虚拟内存、全局变量等资源。</p><ul><li>当进程只有一个线程时，可以认为进程就等于线程</li><li>当进程拥有多个线程时，这些线程会共享相同的虚拟内存和全局变量等资源。这些资源在上下文切换时是不需要修改的</li><li>另外，线程也有自己的私有数据，比如栈和寄存器等，这些在上下文切换时也是需要保存的</li></ul><p>因此，线程的上下文切换分为两种情况：</p><ul><li>前后两个进程属于不同进程。此时，因为资源部共享，所以切换过程就跟进程上下文切换是一样的</li><li>前后两个线程属于用一个进程。此时，因为虚拟内存是共享的，所以在切换时，虚拟内存这些资源就保持不动，只需要切换线程的<strong>私有数据、寄存器</strong>等不共享的资源</li></ul><p><strong>注意：</strong>同进程的线程切换要比进程间的切换消耗更少的资源，更加轻量级</p><h3 id="中断上下文切换"><a href="#中断上下文切换" class="headerlink" title="中断上下文切换"></a>中断上下文切换</h3><p>为了响应硬件事件，<strong>中断处理会打断进程的正常调度和执行</strong>，转而调用中断处理程序，响应设备事件。</p><p>中断上下文切换不会涉及进程的用户态，它其实只包括内核态中断服务程序执行所必需的状态，包括 <strong>CPU 寄存器、内核堆栈、硬件中断参数</strong>等</p><p>对同一个 CPU 来说，中断处理比进程拥有更高的优先级，所以<strong>中断上下文切换不会与进程上下文切换同步发生</strong></p><p>大部分中断处理程序都短小精悍，以便尽可能快的执行结束。</p><p>中断上下文切换也需要消耗 CPU，切换次数过多也会消耗大量的 CPU，甚至严重降低系统的整体性能</p><h2 id="CPU上下文切换（下）"><a href="#CPU上下文切换（下）" class="headerlink" title="CPU上下文切换（下）"></a>CPU上下文切换（下）</h2><h3 id="查看上下文切换"><a href="#查看上下文切换" class="headerlink" title="查看上下文切换"></a>查看上下文切换</h3><p>1、查看系统的总体情况</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ vmstat <span class="number">5</span> <span class="number">5</span></span><br><span class="line">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class="line"> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st</span><br><span class="line"> <span class="number">4</span>  <span class="number">0 1218196</span> <span class="number">17324820</span>     <span class="number">60 8417344</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">25</span>    <span class="number">97</span>    <span class="number">0</span>    <span class="number">0</span> <span class="number">12</span>  <span class="number">6</span> <span class="number">82</span>  <span class="number">0</span>  <span class="number">0</span></span><br><span class="line"> <span class="number">1</span>  <span class="number">0 1218196</span> <span class="number">17311424</span>     <span class="number">60 8426964</span>    <span class="number">0</span>    <span class="number">0</span>   <span class="number">900</span>    <span class="number">97 15273</span> <span class="number">28505 11</span>  <span class="number">6</span> <span class="number">83</span>  <span class="number">0</span>  <span class="number">0</span></span><br><span class="line"> <span class="number">1</span>  <span class="number">0 1218196</span> <span class="number">17399080</span>     <span class="number">60 8343224</span>    <span class="number">0</span>    <span class="number">0</span>   <span class="number">410</span>   <span class="number">310 15800</span> <span class="number">29604</span>  <span class="number">8</span>  <span class="number">6</span> <span class="number">86</span>  <span class="number">0</span>  <span class="number">0</span></span><br><span class="line"> <span class="number">9</span>  <span class="number">0 1218196</span> <span class="number">17385124</span>     <span class="number">60 8350312</span>    <span class="number">0</span>    <span class="number">0</span>   <span class="number">787</span>   <span class="number">300 13754</span> <span class="number">26351</span>  <span class="number">7</span>  <span class="number">4</span> <span class="number">89</span>  <span class="number">0</span>  <span class="number">0</span></span><br><span class="line"> <span class="number">2</span>  <span class="number">0 1218196</span> <span class="number">17415052</span>     <span class="number">60 8336488</span>    <span class="number">0</span>    <span class="number">0</span>   <span class="number">276</span>   <span class="number">132 15567</span> <span class="number">29585</span>  <span class="number">8</span>  <span class="number">5</span> <span class="number">87</span>  <span class="number">0</span>  <span class="number">0</span></span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>cs：context switch，每秒上下文切换的次数</li><li>in：interrupt，每秒中断的次数</li><li>r：运行队列的长度（正在运行和等待CPU的进程数）</li><li>b：处于阻塞状态的进程数</li></ul><p>2、查看进程的详细信息</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ pidstat -w 5</span><br><span class="line">Linux 3.10.0-957.el7.x86_64 (xxx)       05/27/2025      _x86_64_        (8 CPU)</span><br><span class="line"></span><br><span class="line">07:35:35 PM   UID       PID   cswch/s nvcswch/s  Command</span><br><span class="line">07:35:40 PM    <span class="number"> 0 </span>       <span class="number"> 1 </span>     3.77      0.40  systemd</span><br><span class="line">07:35:40 PM    <span class="number"> 0 </span>       <span class="number"> 3 </span>     2.58      0.00  ksoftirqd/0</span><br><span class="line">07:35:40 PM    <span class="number"> 0 </span>       <span class="number"> 7 </span>     7.34      0.00  migration/0</span><br><span class="line">07:35:40 PM    <span class="number"> 0 </span>       <span class="number"> 9 </span>   218.45      0.00  rcu_sched</span><br><span class="line">07:35:40 PM    <span class="number"> 0 </span>      <span class="number"> 11 </span>     0.40      0.00  watchdog/0</span><br><span class="line">07:35:40 PM    <span class="number"> 0 </span>      <span class="number"> 12 </span>     0.40      0.00  watchdog/1</span><br><span class="line">07:35:40 PM    <span class="number"> 0 </span>      <span class="number"> 13 </span>     3.57      0.00  migration/1</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>cswch/s：每秒自愿上下文切换的次数</li><li>nvcswch/s：每秒非自愿上下文切换的次数</li></ul><blockquote><p>自愿上下文切换：进程无法获取所需资源导致的上下文切换，比如 I/O，内存等系统资源不足时发生的上下文切换<br>非自愿上下文切换：进程因时间片已到等原因，被系统强制调度发生的上下文切换，比如多个进程竞争 CPU 是发生的上下文切换</p></blockquote><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><p>sysbench 模拟多线程调度切换</p><p>1、运行 sysbench</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以 10 个线程运行 5 分钟的基准测试，模拟多线程切换的问题</span></span><br><span class="line">$ sysbench <span class="attribute">--threads</span>=10 <span class="attribute">--max-time</span>=300 threads run</span><br></pre></td></tr></table></figure><p>2、运行 vmstat</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ vmstat <span class="number">1</span></span><br><span class="line">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class="line"> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st</span><br><span class="line"> <span class="number">9</span>  <span class="number">0</span>      <span class="number">0 107736672</span>     <span class="number">64 88038080</span>    <span class="number">0</span>    <span class="number">0</span>    <span class="number">24</span>   <span class="number">199</span>    <span class="number">0</span>    <span class="number">1</span>  <span class="number">2</span>  <span class="number">1</span> <span class="number">97</span>  <span class="number">0</span>  <span class="number">0</span></span><br><span class="line"> <span class="number">8</span>  <span class="number">0</span>      <span class="number">0 107731792</span>     <span class="number">64 88045280</span>    <span class="number">0</span>    <span class="number">0 16384</span>    <span class="number">40 105267</span> <span class="number">1167081 12</span> <span class="number">15</span> <span class="number">72</span>  <span class="number">0</span>  <span class="number">0</span></span><br><span class="line"> <span class="number">9</span>  <span class="number">0</span>      <span class="number">0 107733720</span>     <span class="number">64 88038080</span>    <span class="number">0</span>    <span class="number">0</span>  <span class="number">4192</span>    <span class="number">20 100233</span> <span class="number">1237404</span>  <span class="number">6</span> <span class="number">16</span> <span class="number">78</span>  <span class="number">0</span>  <span class="number">0</span></span><br><span class="line"> <span class="number">7</span>  <span class="number">0</span>      <span class="number">0 107726368</span>     <span class="number">64 88045280</span>    <span class="number">0</span>    <span class="number">0 14464</span>    <span class="number">68 128551</span> <span class="number">1548455</span>  <span class="number">6</span> <span class="number">17</span> <span class="number">78</span>  <span class="number">0</span>  <span class="number">0</span></span><br><span class="line"><span class="number">10</span>  <span class="number">0</span>      <span class="number">0 107735168</span>     <span class="number">64 88039216</span>    <span class="number">0</span>    <span class="number">0</span>  <span class="number">4096</span>    <span class="number">64 111126</span> <span class="number">1468157</span>  <span class="number">6</span> <span class="number">16</span> <span class="number">78</span>  <span class="number">0</span>  <span class="number">0</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>指标观察：</p><ul><li>cs 列：上升到 100w</li><li>r 列：就绪队列长度上升到 10</li><li>in 列：终端次数上升到 10w</li><li>us（user）和sy（system）列：使用率加起来接近 100%，sy 为 78%，主要被内核占用</li></ul><p>3、查看进程情况</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每隔1秒输出1组数据（需要 Ctrl+C 才结束）</span></span><br><span class="line"><span class="comment"># -w 参数表示输出进程切换指标，而 -u 参数则表示输出 CPU 使用指标</span></span><br><span class="line">$ pidstat -w -u 1</span><br><span class="line">19时34分55秒   UID       PID    %usr %system  %guest    %CPU   CPU  Command</span><br><span class="line">19时34分56秒    <span class="number"> 0 </span>  <span class="number"> 561077 </span>   0.00    1.00    0.00    1.00    <span class="number"> 2 </span> sshd</span><br><span class="line">19时34分56秒    <span class="number"> 0 </span>  <span class="number"> 562599 </span> 100.00  100.00    0.00  100.00   <span class="number"> 13 </span> sysbench</span><br><span class="line">19时34分56秒    <span class="number"> 0 </span>  <span class="number"> 566600 </span>   0.00    2.00    0.00    2.00   <span class="number"> 32 </span> pidstat</span><br><span class="line"></span><br><span class="line">19时34分55秒   UID       PID   cswch/s nvcswch/s  Command</span><br><span class="line">19时34分56秒    <span class="number"> 0 </span>  <span class="number"> 256312 </span>     1.00      0.00  kworker/37:31</span><br><span class="line">19时34分56秒    <span class="number"> 0 </span>  <span class="number"> 263655 </span>     1.00      0.00  kworker/33:2</span><br><span class="line">19时34分56秒    <span class="number"> 0 </span>  <span class="number"> 299865 </span>     1.00      0.00  kworker/21:2</span><br><span class="line">19时34分56秒    <span class="number"> 0 </span>  <span class="number"> 562931 </span>     1.00      2.00  vmstat</span><br><span class="line">19时34分56秒    <span class="number"> 0 </span>  <span class="number"> 560904 </span>     1.00      0.00  sshd</span><br><span class="line">19时34分56秒    <span class="number"> 0 </span>  <span class="number"> 561077 </span>    78.00      0.00  sshd</span><br><span class="line">19时34分56秒    <span class="number"> 0 </span>  <span class="number"> 566600 </span>     1.00    671.00  pidstat</span><br></pre></td></tr></table></figure><p>分析：CPU 使用率的升高果然是 sysbench 导致的，它的 CPU 使用率已经达到了 100%。但上下文切换则是来自其他进程，包括非自愿上下文切换频率最高的 pidstat ，以及自愿上下文切换频率最高的内核线程 kworker 和 sshd</p><p><strong>注意：</strong>pidstat 输出的上下文切换次数，加起来也就几百，比 vmstat 的 100 万明显小了太多？</p><table><thead><tr><th>工具</th><th>统计粒度</th><th>上下文切换数据来源</th><th>显示内容</th></tr></thead><tbody><tr><td>pidstat</td><td>按进程/线程级别</td><td>/proc/[pid]/sched 或 /proc/[pid]/status</td><td>显示某些（非全部）PID 的上下文切换次数</td></tr><tr><td>vmstat</td><td>系统全局级别</td><td>内核调度器</td><td>显示全系统每秒上下文切换总数</td></tr></tbody></table><p>4、查看线程情况</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每隔 1 秒输出一组数据（需要 Ctrl+C 才结束）</span></span><br><span class="line"><span class="comment"># -wt 参数表示输出线程的上下文切换指标</span></span><br><span class="line">$ pidstat -wt 1</span><br><span class="line">19时34分55秒  UID      TGID       TID   cswch/s nvcswch/s  Command</span><br><span class="line">19时34分56秒    <span class="number"> 0 </span>  <span class="number"> 616348 </span>        -      0.00      0.00  sysbench</span><br><span class="line">19时34分56秒    <span class="number"> 0 </span>        -   <span class="number"> 616348 </span>     0.00      0.00  |__sysbench</span><br><span class="line">19时34分56秒    <span class="number"> 0 </span>        -   <span class="number"> 616349 </span> 67080.00      6.00  |__sysbench</span><br><span class="line">19时34分56秒    <span class="number"> 0 </span>        -   <span class="number"> 616350 </span> 63009.00      3.00  |__sysbench</span><br><span class="line">19时34分56秒    <span class="number"> 0 </span>        -   <span class="number"> 616351 </span> 68060.00      1.00  |__sysbench</span><br><span class="line">19时34分56秒    <span class="number"> 0 </span>        -   <span class="number"> 616352 </span> 69808.00      4.00  |__sysbench</span><br><span class="line">19时34分56秒    <span class="number"> 0 </span>        -   <span class="number"> 616353 </span> 68806.00      5.00  |__sysbench</span><br><span class="line">19时34分56秒    <span class="number"> 0 </span>        -   <span class="number"> 616354 </span> 73688.00      6.00  |__sysbench</span><br><span class="line">19时34分56秒    <span class="number"> 0 </span>        -   <span class="number"> 616355 </span> 72296.00      4.00  |__sysbench</span><br><span class="line">19时34分56秒    <span class="number"> 0 </span>        -   <span class="number"> 616356 </span> 63978.00      1.00  |__sysbench</span><br><span class="line">19时34分56秒    <span class="number"> 0 </span>        -   <span class="number"> 616357 </span> 67409.00      1.00  |__sysbench</span><br><span class="line">19时34分56秒    <span class="number"> 0 </span>        -   <span class="number"> 616358 </span> 67859.00      2.00  |__sysbench</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到，sysbench 进程（也就是主线程）的上下文切换次数看起来并不多，但它的子线程的上下文切换次数却有很多。上下文切换罪魁祸首，还是过多的 sysbench 线程</p><p>5、查看中断升高的原因</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ watch -d cat /<span class="keyword">proc</span>/interrupts<span class="title"></span></span><br><span class="line"><span class="title">           CPU0</span> <span class="title">      CPU1</span> <span class="title">      CPU2</span></span><br><span class="line">...<span class="title"></span></span><br><span class="line"><span class="title"> RES:</span>  117962220   27310354   17986708<span class="title">   Rescheduling</span> interrupts</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>观察发现，变化速度最快的是重调度中断（RES），它代表唤醒空闲状态的 CPU 来调度新的任务运行，这是在多处理器系统（SMP）中，调度器用来分散任务到不同 CPU 的机制，通常也被称为处理器间中断（Inter-Processor Interrupts，IPI）</p><p><strong>分析：</strong>过多任务导致了重调度中断的升高，和前面分析结果一致</p><h2 id="每秒上下文切换多少次正常"><a href="#每秒上下文切换多少次正常" class="headerlink" title="每秒上下文切换多少次正常"></a>每秒上下文切换多少次正常</h2><p><strong>上下文切换次数取决于系统本身的CPU性能。</strong>如果系统的上下文切换次数比较稳定，那么从数百到一万以内，都应该算是正常的。但当上下文切换次数超过一万次，或者切换次数出现数量级增长时，就很有可能出现了性能问题，这时根据具体上下文切换的类型具体分析：</p><ul><li>资源上下文切换变多了，说明进程在等在资源，可能发生了 I/O 等其他问题</li><li>非自愿上下文切换变多了，说明进程都在被强制调度，也就是都在争抢 CPU，说明 CPU 的确成了瓶颈</li><li>中断次数变多了，说明 CPU 被中断处理程序占用，还序号通过查看 /proc/interrupts 文件来分析具体的中断类型</li></ul><h2 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h2><ul><li><a href="https://github.com/Miller-Xie/Linux-kernel-notes/blob/master/Linux%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98.md#cpu%E6%80%A7%E8%83%BD%E7%AF%87">CPU性能篇</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;怎么理解“平均负载”&quot;&gt;&lt;a href=&quot;#怎么理解“平均负载”&quot; class=&quot;headerlink&quot; title=&quot;怎么理解“平均负载”&quot;&gt;&lt;/a&gt;怎么理解“平均负载”&lt;/h2&gt;&lt;p&gt;简单来说，平均负载是指单位时间内，系统处于可运行状态和不可中断状态的平均进程</summary>
      
    
    
    
    
    <category term="linux" scheme="https://wu3227834.github.io/tags/linux/"/>
    
    <category term="性能测试" scheme="https://wu3227834.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>如何迅速分析出CPU的瓶颈</title>
    <link href="https://wu3227834.github.io/2025/05/15/2025-05-15-ru-he-xun-su-fen-xi-chu-cpu-de-ping-jing/"/>
    <id>https://wu3227834.github.io/2025/05/15/2025-05-15-ru-he-xun-su-fen-xi-chu-cpu-de-ping-jing/</id>
    <published>2025-05-15T00:00:00.000Z</published>
    <updated>2025-05-29T10:13:18.875Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CPU性能指标"><a href="#CPU性能指标" class="headerlink" title="CPU性能指标"></a>CPU性能指标</h2><p>性能指标总览</p><p><img src="/img/2025-05-15-%E5%A6%82%E4%BD%95%E8%BF%85%E9%80%9F%E5%88%86%E6%9E%90%E5%87%BACPU%E7%9A%84%E7%93%B6%E9%A2%88/image.png" alt="性能指标总览"></p><h3 id="CPU使用率"><a href="#CPU使用率" class="headerlink" title="CPU使用率"></a>CPU使用率</h3><p>CPU 使用率描述了非空闲时间占总 CPU 时间的百分比，根据 CPU 上运行任务的不同，又被分为用户 CPU、系统 CPU、等待 I/0 CPU、软中断和硬中断等。用户 CPU 使用率，包括用户态 CPU 使用率（user）和低优先级用户态：</p><ul><li>CPU 使用率（nice），表示 CPU 在<strong>用户态</strong>运行的时间百分比。用户 CPU 使用率高，通常说明有<strong>应用程序</strong>比较繁忙</li><li>系统 CPU 使用率，表示 CPU 在内核状态运行的时间百分比（不包括中断）。系统 CPU 使用率高，说明<strong>内核</strong>比较繁忙</li><li>等待 I/O 的 CPU 使用率，通常为 iowait，表示<strong>等待 I/O</strong> 的时间百分比。iowait 高，通常说明系统与硬件设备的 I/O 交互比较长</li><li>软中断和硬中断的 CPU 利用率，分别表示内核调用软中断处理程序、硬中断处理程序的时间百分比。它们的使用率高，通常说明系统发生了大量的中断</li><li>除了上述这些，还有在虚拟化环境中会用到的<strong>窃取 CPU 利用率（steal）和客户 CPU 使用率（guest）</strong>，分别表示被其他虚拟机占用的 CPU 时间百分比，和运行客户虚拟机的 CPU 时间百分比</li></ul><h3 id="平均负载"><a href="#平均负载" class="headerlink" title="平均负载"></a>平均负载</h3><p>系统的活跃进程数。反映了系统的整体负载情况，主要包括三个数值，分别表示过去 1 分钟、过去 5 分钟和过去 15 分钟的平均负载。理想情况下，平均负载等于逻辑 CPU 个数，这个代表每个 CPU 都恰好被充分利用。如果负载大于逻辑 CPU 个数，就表示负载比较重了。</p><h3 id="进程上下文切换"><a href="#进程上下文切换" class="headerlink" title="进程上下文切换"></a>进程上下文切换</h3><p>进程上下文切换分为：自愿上下文切换和非自愿上下文切换</p><p>注意：过多的上下文切换，会将原本运行进程的 CPU 时间，消耗在<strong>寄存器、内核栈以及虚拟内存等数据的保存和恢复上</strong>，缩短进程真正进行的时间，成为性能瓶颈。</p><h3 id="CPU-缓存命中率"><a href="#CPU-缓存命中率" class="headerlink" title="CPU 缓存命中率"></a>CPU 缓存命中率</h3><p>CPU 缓存的速度介于 CPU 和内存之间，缓存的是<strong>热点的内存数据</strong>。</p><p>如下图，根据不断增长的热点数据，这些缓存按照大小不同分为 L1、L2、L3 等三级缓存，其中 L1 和 L2 常在单核中，L3 则在多核中。从 L1 到 L3，三级缓存的大小依次增大，相应的，性能依次减少（当然内存还是好得多）。而它们的命中率，衡量的是 <strong>CPU 缓存的复用情况</strong>，命中率越高，则表示性能越好。</p><p><img src="/img/2025-05-15-%E5%A6%82%E4%BD%95%E8%BF%85%E9%80%9F%E5%88%86%E6%9E%90%E5%87%BACPU%E7%9A%84%E7%93%B6%E9%A2%88/image2.png" alt="CPU 缓存"></p><h2 id="CPU-性能工具"><a href="#CPU-性能工具" class="headerlink" title="CPU 性能工具"></a>CPU 性能工具</h2><p>平均负载案例：使用 uptime 查看平均负载，在平均负载升高时，使用 mpstat 和 pidstat 分别观察每个 CPU 和每个进程 CPU 的使用情况，找到导致平均负载升高的 stress 进程</p><p>上下文切换的案例：先使用 vmstat，查看系统上下文切换次数和中断次数；然后使用 pidstat（-w 参数）观察进程的自愿上下文切换和非自愿上下文切换；最后通过 vmstat（-wt参数）查看线程的上下文切换情况，从而找到了线程上下文切换增多的原因是 sysbench 工具</p><p>进程 CPU 使用率升高的案例：先使用 top 找出系统和进程 CPU 的使用情况，发现了 CPU 使用率很高的进程 php-fpm，再使用 perf top 找出热点函数 sqrt()；如果是 Python 应用，可以使用 profiler 工具 pyflame 对指定进程分析（pyflame -p pid –threads -s 检测时间 -r 取样间隔 -o &lt;file.txt&gt;），再通过 flamegraph.pl 将输出的 txt 文件转换为 *.svg 格式的火焰图（./flamegraph.pl prof.txt &gt; prof.svg）</p><p>不可中断进程和僵尸进程的案例：</p><ul><li>不可中断进程分析过程：先使用 top 查看，发现存在 D 状态（不可中断休眠进程）和 Z 状态（僵尸进程），并且 iowait 较高；使用 dstat 分析磁盘 I/O，发现 app 进程有大量的磁盘读请求；使用 pidstat（-d -p 参数）分析 app 进程的 I/O 操作，发现没有大量的 I/O 操作，再用 pidstat -d 分析系统的 I/O 情况，发现还是 app 进程在进行磁盘读；再使用 strace 跟踪 D 状态进程对应进程号的系统调用，发现没有权限；ps 查看发现对应进程号的进程已经变成僵尸进程；之后，通过 perf record -g 和 perf report 生成报告，查看 app 进程的调用栈，发现 CPU 使用主要是在 sys_read() 函数，定位到是在对磁盘进行直接读（direct_IO）；查看代码发现 open() 系统调用使用了 O_DIRECT 参数</li><li>僵尸进程分析：使用 pstree 命令找出僵尸进程的父进程是 app 进程，然后查看 app.c 文件，发现 wait() 使用位置不当导致不能回收子进程</li></ul><p>软中断的案例：先使用 top 查看系统指标，发现系统 CPU 使用率很低，但是主要是在软中断 si 上，然后查看 /proc/softirqs 查看系统软中断变化情况，发现 NET_RX 变化率很快，再使用 sar 工具查看系统的网络收发情况，发现 eth0 网卡接收到了大量的小包；在通过抓包工具 tcpdump，发现 eth0 接受到了大量的 SYN 包，最终确定了是 SYN FLOOD 攻击</p><h3 id="性能指标找工具"><a href="#性能指标找工具" class="headerlink" title="性能指标找工具"></a>性能指标找工具</h3><p><img src="/img/2025-05-15-%E5%A6%82%E4%BD%95%E8%BF%85%E9%80%9F%E5%88%86%E6%9E%90%E5%87%BACPU%E7%9A%84%E7%93%B6%E9%A2%88/image3.png" alt="性能指标找工具"></p><h3 id="工具找指标"><a href="#工具找指标" class="headerlink" title="工具找指标"></a>工具找指标</h3><p><img src="/img/2025-05-15-%E5%A6%82%E4%BD%95%E8%BF%85%E9%80%9F%E5%88%86%E6%9E%90%E5%87%BACPU%E7%9A%84%E7%93%B6%E9%A2%88/image4.png" alt="工具对应指标"></p><h2 id="如何分析-CPU-的性能瓶颈"><a href="#如何分析-CPU-的性能瓶颈" class="headerlink" title="如何分析 CPU 的性能瓶颈"></a>如何分析 CPU 的性能瓶颈</h2><p>重点：弄清楚性能指标之间的关联性</p><p><img src="/img/2025-05-15-%E5%A6%82%E4%BD%95%E8%BF%85%E9%80%9F%E5%88%86%E6%9E%90%E5%87%BACPU%E7%9A%84%E7%93%B6%E9%A2%88/image5.png" alt="指标关联性"></p><h2 id="CPU-性能优化的几个思路"><a href="#CPU-性能优化的几个思路" class="headerlink" title="CPU 性能优化的几个思路"></a>CPU 性能优化的几个思路</h2><h3 id="性能优化方法论"><a href="#性能优化方法论" class="headerlink" title="性能优化方法论"></a>性能优化方法论</h3><p>确定三个问题：</p><ul><li>判断所做的性能优化是否有效？优化后，能提升多少性能，有多少收益？</li><li>如果有多个性能问题同时存在，应该先优先哪一个？</li><li>当有多个优化方法，应该选择哪一种</li></ul><p><strong>怎么评估性能优化结果：</strong></p><p>三步走原则：</p><ol><li>确定优化的量化指标</li><li>测试优化前的性能指标</li><li>测试优化后的性能指标</li></ol><p>第一步，性能的量化指标包括 CPU 使用率、应用的吞吐量，响应时间等等，<strong>不要局限在单一维度的指标上</strong>。例如，以 web 应用为例：</p><ul><li>应用程序的维度，使用<strong>吞吐量和请求延时</strong>来评估</li><li>系统资源的维度，使用<strong>CPU 使用率</strong>来评估</li></ul><p>好的应用程序是性能优化的最终结果和目的，要使用应用程序的指标，来评估性能优化的整体效果；而系统资源的使用情况是影响应用程序的根源，需要用资源的指标，来分析应用性能的瓶颈来源。</p><p>第二三步，对比第一部确定的<strong>量化指标</strong>在优化前后的差距，拿数据说话。例如，使用 ab 工具测试 Web 应用的并发请求数和响应延时，同时使用 vmstat，pidstat 等工具，观察系统和进程的 CPU 使用率，同时获得了应用和系统两个维度的性能指标</p><p><strong>进行性能测试需要注意的是：</strong></p><ul><li>要避免性能测试工具干扰应用程序的性能</li><li>避免外部环境的变化影响性能指标的评估。在优化前、后的应用程序，都运行在相同配置的机器上，并且它们的外部依赖也要完全一致</li></ul><p><strong>多个性能问题同时存在，怎么选择？</strong></p><p>遵循<strong>二八原则</strong>，80% 的性能问题都是由于 20% 的代码导致的，<strong>并不是所有的性能问题都值得优化</strong></p><p>分析的步骤：</p><ul><li>挨个分析出所有的性能瓶颈，排除掉有因果关系的性能问题</li><li>在剩下的几个性能问题中，选择能明显提升应用性能的问题进行修复，有两种方法：<ul><li>如果系统资源出现瓶颈，首先优化系统资源使用的问题</li><li>针对不同类型的指标，首先优化导致<strong>性能指标变化幅度最大</strong>的那些瓶颈问题</li></ul></li></ul><p><strong>有多种优化方法时，如何选择？</strong></p><p>性能优化并非没有成本。</p><p>一个很典型的例子网络中的 DPDK（Data Plane Development Kit）。DPDK 是一种优化网络处理速度的方法，它通过绕开内核网络协议栈的方法，提升网络的处理能力。不过它有一个很典型的要求，就是要独占一个 CPU 以及一定数量的内存大页，并且总是以 100% 的 CPU 使用率运行。所以，如果你的 CPU 核数很少，就有点得不偿失了。</p><p>因此，在考虑性能优化方法时，要结合实际情况，考虑多方面的因素，进行权衡在做选择</p><h3 id="CPU优化"><a href="#CPU优化" class="headerlink" title="CPU优化"></a>CPU优化</h3><p><strong>常见的几种应用程序方法：</strong></p><ul><li><strong>编译器优化</strong>：很多编译器都会提供优化选项，适当开启它们，在编译阶段你就可以获得编译器的帮助，来提升性能。比如，gcc 就提供了优化选项 -O2，开启后会自动对应用程序的代码进行优化</li><li><strong>算法优化</strong>：使用复杂度更低的算法，显著加快处理速度</li><li><strong>异步处理</strong>：使用异步处理，可以避免程序因为等待某个资源而一直阻塞，从而提升程序的并发处理能力。比如，把轮询替换为事件通知，就可以避免轮询耗费 CPU 的问题</li><li><strong>多线程代替多进程</strong>：前面讲过，相对于进程的上下文切换，线程的上下文切换并不切换进程地址空间，因此可以降低上下文切换的成本</li><li><strong>善用缓存</strong>：经常访问的数据或者计算过程中的步骤，可以放到内存中缓存起来，这样在下次用时就能直接从内存中获取，加快程序的处理速度</li></ul><p><strong>常见的系统优化方法：</strong></p><ul><li><strong>CPU 绑定</strong>：把进程绑定到一个或者多个 CPU 上，可以提高 CPU 缓存的命中率，减少跨 CPU 调度带来的上下文切换问题</li><li><strong>CPU 独占</strong>：跟 CPU 绑定类似，进一步将 CPU 分组，并通过 CPU 亲和性机制为其分配进程。这样，这些 CPU 就由指定的进程独占，换句话说，不允许其他进程再来使用这些 CPU</li><li><strong>优先级调整</strong>：使用 nice 调整进程的优先级，正值调低优先级，负值调高优先级。可以适当降低非核心应用的优先级，增高核心应用的优先级，可以确保核心应用得到优先处理</li><li><strong>为进程设置资源限制</strong>：使用 Linux cgroups 来设置进程的 CPU 使用上限，可以防止由于某个应用自身的问题，而耗尽系统资源</li><li><strong>NUMA（Non-Uniform Memory Access）优化</strong>：支持 NUMA 的处理器会将内存划分为多个 node，每个 node 关联到系统的一个处理器。NUMA 优化，其实就是让 CPU 尽可能只访问本地内存</li><li><strong>中断负载均衡</strong>：无论是软中断还是硬中断，它们的中断处理程序都可能会耗费大量的 CPU。开启 irqbalance 服务或者配置 smp_affinity，就可以把<strong>中断处理过程自动负载均衡到多个 CPU 上</strong></li></ul><p><strong>避免过早优化：</strong></p><p>性能优化最好是<strong>逐步完善，动态进行</strong>，不追求一步到位，而要<strong>首先保证能满足当前的性能要求</strong>。当发现性能不满足要求或者出现性能瓶颈时，再根据性能评估的结果，选择最重要的性能问题进行优化</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>要忍住“把 CPU 性能优化到极致”的冲动</strong>，因为 CPU 并不是唯一的性能因素，还会有其他的性能问题，比如内存、网络、I/O 甚至是架构设计的问题。</p><p>如果不做全方位的分析和测试，只是单纯地把某个指标提升到极致，并不一定能带来整体的收益。</p><h2 id="转载"><a href="#转载" class="headerlink" title="转载"></a>转载</h2><ul><li><a href="https://github.com/Miller-Xie/Linux-kernel-notes/blob/master/Linux%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98.md#8-%E5%A5%97%E8%B7%AF%E7%AF%87%E5%A6%82%E4%BD%95%E8%BF%85%E9%80%9F%E5%88%86%E6%9E%90%E5%87%BAcpu%E7%9A%84%E7%93%B6%E9%A2%88%E5%9C%A8%E5%93%AA%E9%87%8C"> 8 套路篇：如何迅速分析出CPU的瓶颈在哪里？</a></li></ul>]]></content>
    
    
    <summary type="html">分析 CPU 性能瓶颈是优化 Linux 系统性能的关键。CPU 使用率反映非空闲时间占比，分为用户态、系统态、I/O 等待、软硬中断等，分别指示应用程序、内核、I/O 交互或中断的繁忙程度。平均负载表示活跃进程数，理想值等于逻辑 CPU 数量，超载提示系统压力。上下文切换包括自愿和非自愿切换，过多切换会消耗 CPU 时间，降低进程运行效率。CPU 缓存命中率衡量热点数据复用，高命中率提升性能。分析工具如 uptime、mpstat、pidstat 监测负载与 CPU 使用，vmstat 观察上下文切换，perf 定位热点函数，strace 跟踪系统调用。优化方法包括编译器优化、算法改进、异步处理、多线程替换多进程、善用缓存等系统层面优化，如 CPU 绑定、独占、优先级调整及中断负载均衡。性能优化需遵循二八原则，优先解决主要瓶颈，避免过早优化，确保量化指标（如吞吐量、响应时间）提升，结合多维度分析以实现整体性能收益。</summary>
    
    
    
    
    <category term="linux" scheme="https://wu3227834.github.io/tags/linux/"/>
    
    <category term="性能测试" scheme="https://wu3227834.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>浅谈 Python 传参机制与对象传递</title>
    <link href="https://wu3227834.github.io/2025/02/24/2025-02-24-qian-tan-python-chuan-can-ji-zhi-yu-dui-xiang-chuan-di/"/>
    <id>https://wu3227834.github.io/2025/02/24/2025-02-24-qian-tan-python-chuan-can-ji-zhi-yu-dui-xiang-chuan-di/</id>
    <published>2025-02-24T00:00:00.000Z</published>
    <updated>2025-05-29T10:13:18.875Z</updated>
    
    <content type="html"><![CDATA[<p>Python 的传参机制是其内存管理和函数设计的重要组成部分，尤其在处理可变和不可变对象时，可能会导致意想不到的行为。本报告将详细探讨 Python 的传参方式（按值还是按引用），并深入分析如何理解“传对象”，涵盖对象引用的概念、可变性对传参的影响，以及开发者如何在实践中管理这些行为。</p><h2 id="背景与问题概述"><a href="#背景与问题概述" class="headerlink" title="背景与问题概述"></a>背景与问题概述</h2><p>在编程语言中，传参通常分为按值传递（pass by value）和按引用传递（pass by reference）。按值传递意味着函数接收的是参数的副本，修改不会影响原始变量；按引用传递意味着函数接收的是原始变量的引用，修改会影响原始变量。Python 的传参机制与这些传统概念有所不同，官方文档和社区讨论中常提到“按对象引用传递”（call by object reference）或“按赋值传递”（pass by assignment）。</p><h2 id="Python-传参的本质：按对象引用传递"><a href="#Python-传参的本质：按对象引用传递" class="headerlink" title="Python 传参的本质：按对象引用传递"></a>Python 传参的本质：按对象引用传递</h2><p>根据官方文档和权威资源，Python 的传参方式是按对象引用传递。这意味着当你将参数传递给函数时，函数接收的是指向同一个对象的引用，而不是对象的副本。具体来说：</p><ul><li>函数的参数成为函数局部命名空间中的一个新变量，这个变量绑定到与调用者传递的对象相同的对象。</li><li>这种绑定是通过赋值完成的，因此也被称为按赋值传递。</li></ul><p>为了理解这一点，我们需要回顾 Python 的对象模型：</p><ul><li>Python 中一切都是对象，变量只是指向对象的引用（reference）。 </li><li>当你执行 <code>x = 5</code>，<code>x</code> 是一个名称，绑定到整数对象 5。</li><li>当你调用 <code>func(x)</code>，函数 <code>func</code> 的参数绑定到同一个对象 5。</li></ul><h2 id="可变与不可变对象的影响"><a href="#可变与不可变对象的影响" class="headerlink" title="可变与不可变对象的影响"></a>可变与不可变对象的影响</h2><p>Python 对象的可变性（mutability）对传参行为有显著影响：</p><ol><li><strong>不可变对象</strong>（immutable objects）：如整数（int）、字符串（str）、元组（tuple）。这些对象一旦创建就不能修改。<ul><li>如果函数尝试修改不可变对象的参数（例如重新赋值），实际上是创建了一个新对象，并绑定到参数名称上，但这不会影响调用者的原始变量。</li><li>例如：  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">modify_num</span>(<span class="params">num</span>):</span><br><span class="line">    num = <span class="number">10</span>  <span class="comment"># 创建新整数对象 10，绑定到 num</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">5</span></span><br><span class="line">modify_num(x)</span><br><span class="line"><span class="built_in">print</span>(x)  <span class="comment"># 输出 5，原始变量未变</span></span><br></pre></td></tr></table></figure></li><li>在这种情况下，行为类似于按值传递，因为无法修改原始对象。</li></ul></li><li><strong>可变对象</strong>（mutable objects）：如列表（list）、字典（dict）、集合（set）。这些对象可以被修改。<ul><li>如果函数修改可变对象的状态（例如追加列表元素），这些修改会反映到调用者的原始对象上，因为两者引用的是同一个对象。</li><li>例如：  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">modify_list</span>(<span class="params">lst</span>):</span><br><span class="line">    lst.append(<span class="number">4</span>)  <span class="comment"># 修改列表，影响原始对象</span></span><br><span class="line"></span><br><span class="line">y = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">modify_list(y)</span><br><span class="line"><span class="built_in">print</span>(y)  <span class="comment"># 输出 [1, 2, 3, 4]，原始列表已改变</span></span><br></pre></td></tr></table></figure></li><li>在这种情况下，行为类似于按引用传递，因为可以修改原始对象。</li></ul></li></ol><p>然而，需要注意的是，如果函数内重新赋值参数（而不是修改对象内容），这不会影响原始变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reassign_list</span>(<span class="params">lst</span>):</span><br><span class="line">    lst = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]  <span class="comment"># 重新绑定 lst 到新列表，原始对象不变</span></span><br><span class="line"></span><br><span class="line">y = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">reassign_list(y)</span><br><span class="line"><span class="built_in">print</span>(y)  <span class="comment"># 输出 [1, 2, 3]，原始列表未变</span></span><br></pre></td></tr></table></figure><p>这表明，参数的重新赋值只影响函数内的局部命名空间，不会改变调用者的绑定。</p><h2 id="如何理解“传对象”"><a href="#如何理解“传对象”" class="headerlink" title="如何理解“传对象”"></a>如何理解“传对象”</h2><p>“传对象”意味着函数接收的是对象的引用，而不是对象本身的副本。以下是关键点：</p><ul><li>Python 中的变量是对象的引用，传递参数时，函数的参数绑定到与调用者相同的对象。</li><li>函数可以通过这个引用访问对象的内容，并根据对象的可变性决定是否能修改它。</li><li>如果对象是可变的，函数可以修改其状态，影响原始对象；如果对象是不可变的，函数只能创建新对象，原始对象不受影响。</li></ul><p>为了更直观地理解，可以将变量想象为指向对象的标签（label）。传递参数时，函数得到的是同一个标签的副本，但标签指向的对象是共享的：</p><ul><li>对于可变对象，修改对象内容相当于在同一个对象上操作，所有标签都会看到变化。</li><li>对于不可变对象，试图修改会创建新对象，函数内的标签指向新对象，而原始标签仍指向旧对象。</li></ul><h2 id="按值、引用、对象传递对比与总结"><a href="#按值、引用、对象传递对比与总结" class="headerlink" title="按值、引用、对象传递对比与总结"></a>按值、引用、对象传递对比与总结</h2><p>以下表格对比了按值传递、按引用传递与 Python 传参的差异：</p><table><thead><tr><th>机制</th><th>描述</th><th>Python 示例</th><th>影响原始变量</th></tr></thead><tbody><tr><td>按值传递（Pass by Value）</td><td>函数接收参数的副本，修改不影响原变量</td><td>num = 10，函数内赋值新值</td><td>否</td></tr><tr><td>按引用传递（Pass by Reference）</td><td>函数接收变量的引用，修改影响原变量</td><td>C++ 中的指针或引用传递</td><td>是</td></tr><tr><td>Python 按对象引用传递</td><td>函数接收对象的引用，可变对象可修改</td><td>列表追加元素，字典修改键值</td><td>是（可变对象，修改内容）</td></tr></tbody></table><p>Python 的传参机制结合了按值和按引用的特性，具体行为取决于对象的可变性。这种灵活性适合大多数场景，但需要开发者理解对象模型以避免误用。</p><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bad_append</span>(<span class="params">new_item, a_list=[]</span>):</span><br><span class="line">    a_list.append(new_item)</span><br><span class="line">    <span class="keyword">return</span> a_list</span><br></pre></td></tr></table></figure><p>执行两次 <code>print bad_append(&#39;one&#39;)</code> 的结果是什么？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">bad_append</span>(<span class="params">new_item, a_list=<span class="literal">None</span></span>):</span><br><span class="line">    a_list.append(new_item)</span><br><span class="line">    <span class="keyword">return</span> a_list</span><br></pre></td></tr></table></figure><p>执行两次 <code>print bad_append(&#39;one&#39;)</code> 的结果是什么？</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://foofish.net/python-function-args.html">Python 函数中，参数是传值，还是传引用？</a></li><li><a href="https://realpython.com/python-pass-by-reference/">Pass by Reference in Python: Background and Best Practices</a></li><li><a href="https://docs.python.org/3/reference/compound_stmts.html#function-definitions">8.7. Function definitions</a></li><li><a href="https://stackoverflow.com/questions/986006/how-do-i-pass-a-variable-by-reference">How do I pass a variable by reference?</a></li></ul>]]></content>
    
    
    <summary type="html">Python 的传参机制是按对象引用传递（call by object reference），结合了按值和按引用的特性，行为取决于对象的可变性。在 Python 中，所有变量都是对象的引用，传递参数时，函数接收的是指向同一对象的引用，而非副本。不可变对象（如整数、字符串）无法修改，函数内重新赋值会创建新对象，不影响原始变量，行为类似按值传递。可变对象（如列表、字典）允许修改内容，函数内的更改会反映到原始对象，类似按引用传递。然而，重新赋值参数仅影响函数局部命名空间，不改变调用者的绑定。这种机制源于 Python 的对象模型，变量是对象的标签，传递时共享对象引用。开发者需注意可变对象的默认参数陷阱，如使用列表作为默认参数可能导致意外共享。理解 Python 传参机制有助于避免误用，提高代码可预测性。通过合理管理对象引用和可变性，开发者可以在函数设计中实现高效、清晰的逻辑。</summary>
    
    
    
    
    <category term="Python" scheme="https://wu3227834.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>容器 overlay 文件系统简述</title>
    <link href="https://wu3227834.github.io/2024/08/28/2024-08-28-rong-qi-overlay-wen-jian-xi-tong-jian-shu/"/>
    <id>https://wu3227834.github.io/2024/08/28/2024-08-28-rong-qi-overlay-wen-jian-xi-tong-jian-shu/</id>
    <published>2024-08-28T00:00:00.000Z</published>
    <updated>2025-05-29T10:13:18.875Z</updated>
    
    <content type="html"><![CDATA[<p>💡 转载自</p><ul><li><a href="https://www.zsythink.net/archives/4345">https://www.zsythink.net/archives/4345</a></li><li><a href="https://blog.csdn.net/qq_24433609/article/details/130430322">https://blog.csdn.net/qq_24433609/article/details/130430322</a></li><li><a href="https://blog.csdn.net/m0_49023005/article/details/121583100">https://blog.csdn.net/m0_49023005/article/details/121583100</a></li></ul><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>有个问题困惑着我：容器删除 docker rm 后，docker cp 到容器内的文件，在 /var/lib/docker/overlay2 目录中是否还会存在</p><p>答案：容器删除后 docker rm 后，会自动删除 /var/lib/docker/overlay2 中的对应文件</p><p>实验步骤</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker run --name test-container -it busybox:latest sh</span><br><span class="line"><span class="comment">## 主机拷贝文件到容器</span></span><br><span class="line">docker <span class="built_in">cp</span> test-file.txt  test-container:/tmp</span><br><span class="line"><span class="comment">## 去  /var/lib/docker/overlay2  查看是否有此文件</span></span><br><span class="line"><span class="built_in">cd</span>  /var/lib/docker/overlay2 </span><br><span class="line">find ./ -name test-file.txt</span><br><span class="line"><span class="comment">## 发现在容器运行时，该文件存在与 diff 和 merged 目录</span></span><br><span class="line"><span class="comment">## 容器内执行 exit 退出容器，容器会处于 exited 状态，或者 docker stop </span></span><br><span class="line"><span class="comment">## 发现在容器停止或 exited 状态，此时该文件会存在于 diff 文件中</span></span><br><span class="line"><span class="comment">## 删除容器后，此文件就不存在了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 因此就好奇这几个目录的意义</span></span><br><span class="line"><span class="comment">## 同时发现 /var/lib/docker/overlay2  中的 hash id 与容器 id 并不对应，因此考虑就和 overlay 文件系统有关了</span></span><br></pre></td></tr></table></figure><p>简单解释，例如下边容器的信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## docker inspect 0fcfdcf1b5ff |jq &#x27;.[].GraphDriver&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;Data&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;LowerDir&quot;</span>: <span class="string">&quot;/var/lib/docker/overlay2/3cc96d59abc8c7653b124c39277c4da2830640a1a7b0939175ab3b41b1983303-init/diff:/var/lib/docker/overlay2/27ac3a1da2eea77dd8ecfcbb10dda293196408630099796c77bbf71840163759/diff:/var/lib/docker/overlay2/0ca615083cdc29e27697c00bd1ab6ce548760a3101f83bb6f697cb6c63ffcc55/diff:/var/lib/docker/overlay2/d11260c6a8a656e6c689417a2eabf2a097e65935da20b979b3f143ff5b0e7d92/diff:/var/lib/docker/overlay2/ff38b128d890e22b98851afcd608d4e70980d5e2a67a074e65fc68d40fb11f9b/diff:/var/lib/docker/overlay2/c1764658c479cfb45edac77699a4da0d2e481e6999db23854a40d54369fb132c/diff:/var/lib/docker/overlay2/b853ec37273e73902d6e9d3aa9fcc5aa4215b2ef8d56e7076d5673c699c34820/diff:/var/lib/docker/overlay2/e8d350b0980d01b145a7ce8dcf68f66d66c89d1f8b043a73e1d073896c20cdac/diff:/var/lib/docker/overlay2/2f69b30f1e7f26b4dfcaf483306b66bff6d2a9f301f49f02c0847bddc413caaa/diff:/var/lib/docker/overlay2/fbc7a7f9c03dbcd7fd507b802186a563c10d70718c019138d0f04389b9acf2bb/diff:/var/lib/docker/overlay2/1902c5596c2e232ecd2f74c1485e9742b8aa36cffb17abca756efb5020fba82c/diff:/var/lib/docker/overlay2/fdacc494a2fc86b92a1b6fdcec7074f985e0ff07b94be74baeb86399dd7187e1/diff:/var/lib/docker/overlay2/ad913d5690c729d32aef928345f8f84dc5fe9df3fb8d6b1eaf38ecb541408a82/diff:/var/lib/docker/overlay2/3f9061393985ee37edb071aac649af44bc7d19fa71861517d83000f69ba0a889/diff:/var/lib/docker/overlay2/0160cfc728093c0d737eeee1ce87ee7dbb36c27f41fa8301e6a966dee3205fe7/diff:/var/lib/docker/overlay2/d56448445573eb1d2236fd855c13a322b817ceb8482e9a64a8afa1423fbe859d/diff:/var/lib/docker/overlay2/2c8c22223361f41b06da49379023c8be1812dad70acbd0fff4b98508d813a343/diff:/var/lib/docker/overlay2/eb90ded5e398c49c6127187b68d7cf6a878f686cb4475bfd427ada9521905191/diff:/var/lib/docker/overlay2/aa4b8e69ae8ba46ddf2cbaa1db9bb63dc630471f829360f540a774533249c060/diff:/var/lib/docker/overlay2/acfea1fe0ce15416c5efac6bab4b52a27aec7205f7fa899e568e1d9dda9fc03c/diff:/var/lib/docker/overlay2/f843b96cc41cb5948dd88233fa961ad2433889bb2765c8737cd0408e999bacf9/diff:/var/lib/docker/overlay2/45f0eafde0438ec844886856ed68e07b2eb65fe8133353aa4240489d074e6e74/diff:/var/lib/docker/overlay2/3bbb18f0ad656534f45b20e6c8a3a869f3a4f177c2859e39121244737b5bd4cb/diff:/var/lib/docker/overlay2/7de504f0fd3c6aa359ec06ded02d3153405f1c4f7fac29d1b88e351d166364bc/diff:/var/lib/docker/overlay2/bb25f883772fc8502362a124574b3a741090502eaed6268e869843087f98cbe4/diff:/var/lib/docker/overlay2/b93a3576a6fa85ad54890c6163ad26b5c6fda0f403a8e8768a6c052cfad39c93/diff:/var/lib/docker/overlay2/023afc8e2f044ac2d55a804d577b4b5a9f93ff67c5e041f02dc45636ae66d949/diff:/var/lib/docker/overlay2/15573352d289785a83a1ecaa3b65168e68185125e395478e66ca4d71dc5c8e34/diff:/var/lib/docker/overlay2/5d149bcd3163486f89923e9dbc7d067909fd4c2328b3693ee9b4cd2bacb7b5d3/diff:/var/lib/docker/overlay2/9a6e123d5b2659c82fa6955cfd3e689ec0b43cedf8cce3586d11f5b9de31377d/diff:/var/lib/docker/overlay2/ab95d820e29c009efc444c6a3caff6b0cdb7c56bdd18c3fefeac35fdc2048074/diff:/var/lib/docker/overlay2/1ae1804931b744310f3410ce5dedcc3910839fb9e5b55f0483a6bd4abef51521/diff&quot;</span>,</span><br><span class="line">    <span class="string">&quot;MergedDir&quot;</span>: <span class="string">&quot;/var/lib/docker/overlay2/3cc96d59abc8c7653b124c39277c4da2830640a1a7b0939175ab3b41b1983303/merged&quot;</span>,</span><br><span class="line">    <span class="string">&quot;UpperDir&quot;</span>: <span class="string">&quot;/var/lib/docker/overlay2/3cc96d59abc8c7653b124c39277c4da2830640a1a7b0939175ab3b41b1983303/diff&quot;</span>,</span><br><span class="line">    <span class="string">&quot;WorkDir&quot;</span>: <span class="string">&quot;/var/lib/docker/overlay2/3cc96d59abc8c7653b124c39277c4da2830640a1a7b0939175ab3b41b1983303/work&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;overlay2&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Docker  中，一个很重要的概念就是 GraphDriver，它主要用于管理和维护镜像，包括把镜像从仓库下载下来，到运行时把镜像挂载起来可以被容器访问等，都是 GraphDriver 去完成的。</p><ul><li>“Name”: “overlay2”：docker存储驱动是overlay2</li><li>LowerDir：包含容器内所有层的文件系统，最后一层除外<ul><li>基础镜像，可以看到有很多 init，这是对应 From 的基础镜像（所有只读层）</li></ul></li><li>UpperDir：容器最上层的文件系统。这也是反映任何运行时修改的地方<ul><li>容器读写层</li></ul></li><li>MergedDir：文件系统所有层的组合视图<ul><li>联合挂载层 ：将 基础层和容器读写层  挂载在一起 ，展示一个统一的视图</li></ul></li><li>WorkDir：用于管理文件系统的内部工作目录</li></ul><p><img src="/img/2024-08-28-%E4%BA%86%E8%A7%A3%E5%AE%B9%E5%99%A8overlay%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/Untitled.png" alt="GraphDriver 示意图"></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>通过上述实验，我们已经对 overlay2 有了一定认识了，现在，我们来看看 overlay2 是怎样和 docker 中的镜像层以及容器层结合在一起的。</p><p>当我们通过 docker pull 命令拉去第一个镜像时，可以看到镜像每一层被拉取的过程，例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@pudding-160 ~]## docker pull 172.16.1.99/hippo/runtime/x86/faiss_benchmark:20240712_68ba1e1</span><br><span class="line">20240712_68ba1e1: Pulling from hippo/runtime/x86/faiss_benchmark</span><br><span class="line">648c0ccfae96: Pull complete</span><br><span class="line">d77e7370c4fa: Pull complete</span><br><span class="line">00701f0aa522: Pull complete</span><br><span class="line">d4516580db57: Pull complete</span><br><span class="line">fca65a19a3bf: Pull complete</span><br><span class="line">Digest: sha256:e9b215174cd7a01eafd1913d2bd1c59aafd797649de906dea53eda3582dfdc6b</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> 172.16.1.99/hippo/runtime/x86/faiss_benchmark:20240712_68ba1e1</span><br></pre></td></tr></table></figure><p>如上所见，此处拉取的 <code>faiss_benchmark:20240712_68ba1e1</code> 镜像一共有 5 层，每一层拉取完毕后，都会显示 Pull complete（Already exists 则表示本地目录已经有该层的文件）；每一层都有一个 ID 号，比如上列中的 648c0ccfae96 就是层的哈希值前 12 位。</p><p>下载镜像后，我们可以通过 docker inspect 命令查看镜像的详细信息，在镜像的详细信息中找到 RootFS 段，可以查看当前镜像包含的层，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@pudding-160 ~]## docker inspect 172.16.1.99/hippo/runtime/x86/faiss_benchmark:20240712_68ba1e1 | jq <span class="string">&#x27;.[].RootFS&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;Type&quot;</span>: <span class="string">&quot;layers&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Layers&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;sha256:4f118a86fef9debde65113068bd2b85f9c5fd65250ac6af2e8281a502cc0a724&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sha256:004114a8d0e34895acdd9c1c370b1184b239d538e3951887d04d1bda771bd441&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sha256:0d5cae34765c1f89a17e5e8e7e6f6f9ddc541151e3efab2487b013faeecac3a6&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sha256:fbc981c1f97f7139dd25bc0924272ae4f8f9e07d8c57a1ca4b0c9344266a93ff&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sha256:457b93dcc46ca598ce9378e015aae678218bb9a699c4e373250e4021b60c0566&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上所示，faiss_benchmark 镜像的 RootFS 段中一共有 5 层，这 5 个层就是刚才 docker pull 拉取下来的层，RootFS 中的每个层也是用一个哈希值表示，RootFS 中的层的哈希值的前 12 位和刚才 docker pull 命令中的 ID 根本对应不上，这是因为 dcoker pull 中显示的 ID 是层在压缩状态下计算出的哈希值，当层被下载到本地，会自动解压，而 RootFS 中的层哈希值不是在压缩状态下计算的，显然它们两个的值不会一样。如果想要确定它们之间的对应关系，可以通过 <code>diffid-by-digest或者v2metadata-by-diffid/sha256/</code>目录中的文件来查看它们之间的对应关系</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@pudding-160 distribution]## <span class="built_in">pwd</span></span><br><span class="line">/var/lib/docker/image/overlay2/distribution</span><br><span class="line">[root@pudding-160 distribution]## tree -L 2</span><br><span class="line">.</span><br><span class="line">├── diffid-by-digest</span><br><span class="line">│   └── sha256</span><br><span class="line">└── v2metadata-by-diffid</span><br><span class="line">    └── sha256</span><br><span class="line"></span><br><span class="line">4 directories, 0 files</span><br></pre></td></tr></table></figure><ul><li><code>diffid-by-digest/sha256</code>：<ul><li>这个目录存储了按镜像层的 Digest (SHA256) 计算的映射到 DiffID 的信息。</li><li>Digest 是一个唯一标识符，用于识别镜像层的内容。</li><li>DiffID 是镜像层的一个变化 ID，表示这一层和它下面一层之间的差异。</li><li>这个映射文件可以帮助 Docker 快速查找特定层的变化信息。</li></ul></li><li><code>v2metadata-by-diffid/sha256</code>：<ul><li>这个目录存储了按 DiffID (SHA256) 计算的映射到 v2 元数据的文件。</li><li>这些元数据包括关于镜像层的各种信息，如创建时间、大小、标签等。</li><li>这个目录有助于 Docker 管理和检索与特定层相关的元数据。</li></ul></li></ul><p>例如 289ce7e41289 的对应关系：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@pudding-160 sha256]## find . -name <span class="string">&quot;648c0ccfae96*&quot;</span></span><br><span class="line">./648c0ccfae963a8b0d71c267d8cb5bb4fc6f26f5e9bd05ab7a6f82db8e95332e</span><br><span class="line">[root@pudding-160 sha256]## <span class="built_in">cat</span> ./648c0ccfae963a8b0d71c267d8cb5bb4fc6f26f5e9bd05ab7a6f82db8e95332e</span><br><span class="line">sha256:4f118a86fef9debde65113068bd2b85f9c5fd65250ac6af2e8281a502cc0a724</span><br><span class="line"></span><br><span class="line">这是我们可以看到 docker pull 中的 648c0ccfae96 和 docker insepct 中的 648c0ccfae96 联系了起来</span><br></pre></td></tr></table></figure><p>在 RootFS 所显示的层中，第一层是最底层，最后一行是最上层，RootFS 显示的层顺序和在镜像中的实际顺序是相反的，在上例中 4f118a86fef9d 是镜像最底层，457b93dcc46 是镜像的最上层。</p><p>既然这些层已经下载到本地，那么这些层对应的文件到底存放到那里呢？我们可以通过如下命令，可以查看这些层的实际存放位置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@pudding-160 sha256]## docker inspect 172.16.1.99/hippo/runtime/x86/faiss_benchmark:20240712_68ba1e1 -f <span class="string">&#x27;&#123;&#123;.GraphDriver.Data&#125;&#125;&#x27;</span> | awk -v RS=<span class="string">&#x27; &#x27;</span> <span class="string">&#x27;&#123;print&#125;&#x27;</span> | <span class="built_in">nl</span> | <span class="built_in">sort</span> -nr | <span class="built_in">cut</span> -f2 | awk -v RS=<span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print&#125;&#x27;</span> | grep diff</span><br><span class="line">/var/lib/docker/overlay2/43722a4a12628179c70d588fcc7f64b86aa92cbd30c8599035d0433059423dcf/diff</span><br><span class="line">/var/lib/docker/overlay2/0fed41f6f307ef92b1b1d475108575f0130d224eb008dfa3ff4383c8fa506de6/diff</span><br><span class="line">/var/lib/docker/overlay2/cd5c2d405030b7ed966d1b78c3b038c1c6b313b8be7d0033835bf9ae20c34c37/diff</span><br><span class="line">/var/lib/docker/overlay2/784dc7dce7d8625dc10a4fa065f2a1f27ff65e19def543c9f491f32575ec09dd/diff</span><br><span class="line">/var/lib/docker/overlay2/0fee07bf5795a78e666b18059a4f64eb84d184d07eb6a5d1118ed487338e9edf/diff</span><br></pre></td></tr></table></figure><p>如上所示，这些层实际存放在 <code>/var/lib/docker/overlay2/层哈希值/diff</code>目录中，很明显，上述命令查询出的路径中的层哈希值和之前<code>docker pull</code>或者<code>RootFS</code>中显示的哈希值都不一样，上述路径中的哈希值是根据一定的规律，层层递进计算出来的，如果对这些哈希值之间的关系和计算方法感兴趣，可以去搜索“docker layerID diffID chainID cacheID”这些关键字，这并不是此处要关注的重点，所以不用纠结这些细节，我们只要知道，这些查出来路径就是镜像层实际的存放路径即可。</p><p>由于上述命令已经完成了排序，所以我们看到的层的顺序就是对应层在镜像中的位置，也就是说，上例中查询出来的 43722a4a12628 是最上层，对应 RootFS 中的 457b93dcc46 ，上例中的 0fee07bf5795a7 是最下层，对应 RootFS 中的 4f118a86fef9d ，总之，镜像的层对应的文件实际存放在 diff 目录中。</p><p>其实聊了半天，无非都是在说镜像的层而已，现在咱们基于镜像，创建一个容器，看看容器层是怎么和镜像层结合的。</p><p>此处基于 faiss_benchmark 镜像创建一个 faiss-demo1 容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name faiss-demo1 -dit 172.16.1.99/hippo/runtime/x86/faiss_benchmark:20240712_68ba1e1 bash</span><br></pre></td></tr></table></figure><p>使用 docker inspect 命令查看容器的详细信息，在详细信息的 GraphDriver 段可以看到容器的层信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@pudding-160 ~]## docker inspect faiss-demo1 | jq <span class="string">&#x27;.[].GraphDriver&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;Data&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;LowerDir&quot;</span>: <span class="string">&quot;/var/lib/docker/overlay2/c156d03c1532a2efce8670b7d665e0d4840e1b798c47998b8f746c3aaf8d82b4-init/diff:/var/lib/docker/overlay2/0fee07bf5795a78e666b18059a4f64eb84d184d07eb6a5d1118ed487338e9edf/diff:/var/lib/docker/overlay2/43722a4a12628179c70d588fcc7f64b86aa92cbd30c8599035d0433059423dcf/diff:/var/lib/docker/overlay2/0fed41f6f307ef92b1b1d475108575f0130d224eb008dfa3ff4383c8fa506de6/diff:/var/lib/docker/overlay2/cd5c2d405030b7ed966d1b78c3b038c1c6b313b8be7d0033835bf9ae20c34c37/diff:/var/lib/docker/overlay2/784dc7dce7d8625dc10a4fa065f2a1f27ff65e19def543c9f491f32575ec09dd/diff&quot;</span>,</span><br><span class="line">    <span class="string">&quot;MergedDir&quot;</span>: <span class="string">&quot;/var/lib/docker/overlay2/c156d03c1532a2efce8670b7d665e0d4840e1b798c47998b8f746c3aaf8d82b4/merged&quot;</span>,</span><br><span class="line">    <span class="string">&quot;UpperDir&quot;</span>: <span class="string">&quot;/var/lib/docker/overlay2/c156d03c1532a2efce8670b7d665e0d4840e1b798c47998b8f746c3aaf8d82b4/diff&quot;</span>,</span><br><span class="line">    <span class="string">&quot;WorkDir&quot;</span>: <span class="string">&quot;/var/lib/docker/overlay2/c156d03c1532a2efce8670b7d665e0d4840e1b798c47998b8f746c3aaf8d82b4/work&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;overlay2&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仔细观察上列的返回信息，你会发现，faiss-demo1 容器其实就是使用了 overlay2 文件系统，将 faiss_benchmark 镜像各个层的 diff 目录作为 LowerDir 只读层（在这个基础上添加了一层 init 只读层，之后再聊它），将容器的 diff 目录（c156d03c1532 文件夹中的 diff 目录）作为 UpperDir 可读写层，叠加后呈现在了 MergedDir 层（MergedDir 是 c156d03c1532 文件夹中的 merged 目录），而我们在容器中看到的、操作的文件，其实就是 MergedDir 中的内容。</p><p>我们从宿主机的挂载信息中，也可以侧面验证这一点，在容器启动的情况下，执行如下命令，查看对应的 overlay2挂载点信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@pudding-160 ~]## mount | grep overlay | grep c156d03c1532</span><br><span class="line">overlay on /var/lib/docker/overlay2/c156d03c1532a2efce8670b7d665e0d4840e1b798c47998b8f746c3aaf8d82b4/merged <span class="built_in">type</span> overlay (rw,relatime,lowerdir=/var/lib/docker/overlay2/l/62APW7R2QAZIKL2JBXGDL2SZFX:/var/lib/docker/overlay2/l/VHFAUXFFYMW7NZ5S3SKLFYMS6R:/var/lib/docker/overlay2/l/FUWWJ73CD3TWQY4ESCXJSQD3Y7:/var/lib/docker/overlay2/l/V2E4YYCC3PEBB4VYHJ3P2E7JMA:/var/lib/docker/overlay2/l/5FRUEQSAL6URPMBZ4V5VHEOJDR:/var/lib/docker/overlay2/l/54MNMNIOUGOPX7SLOTKFTZHE5R,upperdir=/var/lib/docker/overlay2/c156d03c1532a2efce8670b7d665e0d4840e1b798c47998b8f746c3aaf8d82b4/diff,workdir=/var/lib/docker/overlay2/c156d03c1532a2efce8670b7d665e0d4840e1b798c47998b8f746c3aaf8d82b4/work)</span><br><span class="line"></span><br><span class="line"><span class="comment">#上述挂载点中的有很多/var/lib/docker/overlay2/l/下的路径，查看这些路径，会发现这些路径都是软链接，软连接指向的路径就是那些diff目录</span></span><br><span class="line">[root@pudding-160 ~]## ll /var/lib/docker/overlay2/l/62APW7R2QAZIKL2JBXGDL2SZFX</span><br><span class="line">lrwxrwxrwx 1 root root 77 Jul 29 15:47 /var/lib/docker/overlay2/l/62APW7R2QAZIKL2JBXGDL2SZFX -&gt; ../c156d03c1532a2efce8670b7d665e0d4840e1b798c47998b8f746c3aaf8d82b4-init/diff</span><br><span class="line">[root@pudding-160 ~]#</span><br><span class="line">[root@pudding-160 ~]## ll /var/lib/docker/overlay2/l/VHFAUXFFYMW7NZ5S3SKLFYMS6R</span><br><span class="line">lrwxrwxrwx 1 root root 72 Jul 29 15:38 /var/lib/docker/overlay2/l/VHFAUXFFYMW7NZ5S3SKLFYMS6R -&gt; ../0fee07bf5795a78e666b18059a4f64eb84d184d07eb6a5d1118ed487338e9edf/diff</span><br></pre></td></tr></table></figure><p>看到这里，我们应该能够完全理解镜像层、容器层、overlay2 文件系统时怎么融合在一起的了。首先，镜像下载到本地后，各个镜像层的文件存放在对应的 diff 目录中，当我们基于镜像创建容器时，docekr 引擎会为容器创建对应的各个目录，比如 diff、work、merged 目录，然后把镜像层的 diff 目录作为 overlay 中的 lowerDir，将容器的 diff 目录作为 overlay 中 upperDir，将折叠后的结果挂载到了 merge 目录中，最后，docekr 通过 <code>mount namespace</code> 技术，将 merged 目录隔离挂载到容器中。</p><p>现在，再看下图是不是一目了然了</p><p><img src="/img/2024-08-28-%E4%BA%86%E8%A7%A3%E5%AE%B9%E5%99%A8overlay%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/Untitled1.png" alt="镜像层、容器层之间的关系"></p><p>你可以做一些实验，比如，在容器中创建一些文件，修改一些文件，看看容器的 diff 目录中的变化情况，因为容器的 diff 目录就是读写层，当在容器中进行写操作时，最直接的变化会体现到容器的 diff 目录中，但是，你可能会遇到一些“意外情况”，比如，你在容器中修改了/etc/hosts 文件，发现容器的 diff 目录中并没有对应的 /etc/hosts 文件出现，这是因为有一个特殊的层存在，这个层就是我们刚才看到的”-init层”。当我们创建一个容器时，docker 会为容器进行一些初始化工作，其中就包括生成 hosts 信息、生成 hostname 等，你会发现，即使你在容器中修改了 /etc/host 文件，重启容器后，hosts 文件也会变成原来的样子（通过其他方法可以永久修改），因为 /etc/hosts、/etc/hostname、/etc/resolv.conf 文件中的信息都是 docker 生成的，docker 认为这些信息应该是针对容器当前的状态而存在的，以 hosts 文件为例来说，如果容器没有固定的 IP 地址，那么重启容器后，容器的 IP 可能会发生变化，所以每次重启容器时 docker 都会重新生成 hosts 内容，避免之前生成的 hosts 与当前状态所需要的 hosts 不符，当我们在容器中修改  /etc/hosts 文件时，会发现宿主机中的<code>/var/lib/docker/containers/容器ID/</code>目录下的 hosts 文件内容也发生了同样的变化，其实，docker 就是将宿主机中的<code>/var/lib/docker/containers/容器ID/hosts</code>文件挂载到了容器中的，既然这些状态应该属于容器，那么当我们基于容器创建镜像时，就不应该把容器中的这些信息带入到新创建的镜像中，当我们使用<code>docker commit</code>命令基于容器创建镜像时，会把容器的可读写层变成新创建出的镜像的最上层，所以，如果容器的可读写层中包含 hosts 文件，新镜像中就会带入容器的 hosts 信息，而容器因为 init 层和挂载操作的存在，避免了这些信息进入到容器的可读写层，所以可以保障我们基于容器创建镜像时，得到的镜像是“纯净”的。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="rootfs"><a href="#rootfs" class="headerlink" title="rootfs"></a>rootfs</h3><p>在讲 overlay2 之前，我们需要先简单了解一下什么是 rootfs：</p><p>rootfs 也叫 <strong>根文件系统</strong>，是 Linux 使用的最基本的文件系统，是内核启动时挂载的第一个文件系统，提供了根目录 <code>/</code> ，根文件系统的各个目录，例如 /bin、/etc、/mnt 等，再将其他分区挂载到 /mnt，/mnt 目录下就有了这个分区的各个目录和文件。</p><p>docker 容器中使用的同样也是 rootfs 这种文件系统，当我们通过 <code>dockr exec</code> 命令进入到容器内部时也可以看到在根目录下有 /bin、/etc、/tmp 等目录，但是在 docker 容器中与 Linux 不同的是，在挂载 rootfs 后，docker deamon 会利用<strong>联合挂载技术</strong>在已有的 rootfs 上再挂载一个读写层，容器在运行过程中文件系统发生的变化只会在读写层进行修改，并通过 whiteout 文件隐藏只读层中的旧版本文件。</p><blockquote><p>whiteout 文件：<br>whiteout 概念存在于联合文件系统（UnionFS）中，代表某一类占位符形态的特殊文件，当用户文件夹的共通部分联合到一个目录时（例如 bin）目录，用户可以删除归属于自己的某些系统文件副本，但归属于系统级的原件仍存留于同一个联合目录，此时系统将产生一份 whiteout 文件，表示该文件在当前用户目录中已删除，但系统目录中仍然保留。</p></blockquote><h3 id="联合挂载文件"><a href="#联合挂载文件" class="headerlink" title="联合挂载文件"></a>联合挂载文件</h3><p>所谓联合挂载文件（Union Mount），就是将原有的文件系统中的不同目录进行<strong>合并（merge）</strong>，最后向我们呈现出一个合并后文件系统。在 overlay2 文件结构中，联合挂载技术通过联合三个不同的目录来实现：lower 目录、upper 目录和 work 目录，这三个目录联合挂载后得到 merged 目录：</p><ul><li>lower 目录：<strong>只读层</strong>，可以有多个，处于最底层目录</li><li>upper 目录：<strong>读写层</strong>，只有一个</li><li>work 目录：工作基础目录，挂载后内容被清空，且在使用过程中其内容不可见</li><li>merged 目录：联合挂载后得到的<strong>视图</strong>，其中本身并没有实体文件，实际文件都在 upper 目录和 lower 目录中。在 merged 目录中对文件进行编辑，实际会修改 upper 目录中文件；而在 upper 目录与 lower 目录中修改文件，都会影响我们在 merged 目录看到的结果。</li></ul><h2 id="overlayFS"><a href="#overlayFS" class="headerlink" title="overlayFS"></a><strong>overlayFS</strong></h2><p>在介绍 docker 中使用的 overlay2 文件结构前，我们先通过对 overlay 文件系统进行简单的操作演示以便更深入理解不同层不同目录之间的关系</p><p>先创建几个文件夹和文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pudding@DESKTOP-1QCHCU4:~$ <span class="built_in">mkdir</span> A B C worker</span><br><span class="line">pudding@DESKTOP-1QCHCU4:~$ <span class="built_in">sudo</span> <span class="built_in">echo</span> <span class="string">&quot;From A&quot;</span> &gt;&gt; A/b.txt</span><br><span class="line">pudding@DESKTOP-1QCHCU4:~$ <span class="built_in">sudo</span> <span class="built_in">echo</span> <span class="string">&quot;From A&quot;</span> &gt;&gt; A/c.txt</span><br><span class="line">pudding@DESKTOP-1QCHCU4:~$ <span class="built_in">sudo</span> <span class="built_in">echo</span> <span class="string">&quot;From B&quot;</span> &gt;&gt; B/a.txt</span><br><span class="line">pudding@DESKTOP-1QCHCU4:~$ <span class="built_in">sudo</span> <span class="built_in">echo</span> <span class="string">&quot;From B&quot;</span> &gt;&gt; B/d.txt</span><br><span class="line">pudding@DESKTOP-1QCHCU4:~$ <span class="built_in">sudo</span> <span class="built_in">echo</span> <span class="string">&quot;From C&quot;</span> &gt;&gt; C/b.txt</span><br><span class="line">pudding@DESKTOP-1QCHCU4:~$ <span class="built_in">sudo</span> <span class="built_in">echo</span> <span class="string">&quot;From C&quot;</span> &gt;&gt; C/e.txt</span><br><span class="line">pudding@DESKTOP-1QCHCU4:~$ tree</span><br></pre></td></tr></table></figure><p><img src="/img/2024-08-28-%E4%BA%86%E8%A7%A3%E5%AE%B9%E5%99%A8overlay%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image.png" alt="目录 tree"></p><p>使用 mount 命令挂载成 overlayFS 文件系统，格式如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -t overlay overlay -o lowerdir=lower1:lower2:lower3,upperdir=upper,workdir=work merged_dir</span><br></pre></td></tr></table></figure><p>在这个例子中，我们用 A 和 B 两个文件夹作为 lower 目录，用 C 作为 upper 目录，worker 作为 work 目录，挂载到 /home/pudding/merged 目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> merged</span><br><span class="line"><span class="built_in">sudo</span> mount -t overlay overlay -o lowerdir=A:B,upperdir=C,workdir=worker /home/pudding/merged</span><br></pre></td></tr></table></figure><p>挂载后我们可以查看一下 merged 目录下的文件</p><p><img src="/img/2024-08-28-%E4%BA%86%E8%A7%A3%E5%AE%B9%E5%99%A8overlay%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image1.png" alt="merged tree"></p><p>可以看到我们原本的 A B C 三个目录下的文件已经合并，相同的文件名的文件将会选择性的显示，在 merged 中显示里 merged 层更近的文件，upper 层比 lower 层更近，同样 lower 层中，排序靠前的比排序靠后的更近（取决于mount 脚本中 lowerdir=A:B ），在这个例子中就是 A 比 B 更靠近 merged 层</p><p>根据这个规律，我们可以先分析下 merge 层中的文件来源，a.txt 在 A、B 中都有，但是 A 比 B 更靠近 merged 层，所以 merged 层的 a.txt 应该来自 A 目录，b.txt 在 A 和 C 中都有，但是 C 是 upper 层，所以 b.txt 应该来自 C 目录，我们可以核实一下</p><p><img src="/img/2024-08-28-%E4%BA%86%E8%A7%A3%E5%AE%B9%E5%99%A8overlay%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image2.png" alt="cat files"></p><p>接下来我们可以看下 upper 层、lower 曾和 merged 层之间的关系，上文已经提到了 upper 层是<strong>读写层</strong>而 lower 层是<strong>只读层</strong>，merged 层是联合挂载后的视图，那如果我们在 merged 层中对文件进行操作会生什么</p><p><img src="/img/2024-08-28-%E4%BA%86%E8%A7%A3%E5%AE%B9%E5%99%A8overlay%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image3.png" alt="change merged file"></p><p>我们修改 merge 层的 a.txt 文件，可以看到 merged 层的 a.txt 内容虽然改变，但是 A 目录（只读层）下的 a.txt 内容并没有发生变化，而在 C 目录（读写层）下多了一个 a.txt 文件，内容就是我们修改过的 a.txt 的内容，这就是只读层和读写层的关系，<strong>在 merged 目录对文件进行修改并不会影响到只读层的源文件，只会对读写层进行编辑</strong>。</p><p>如果我们在 merged 层删除文件会发生什么</p><p><img src="/img/2024-08-28-%E4%BA%86%E8%A7%A3%E5%AE%B9%E5%99%A8overlay%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image4.png" alt="delete file"></p><p>可以看到在 merged 目录中已经没有 c.txt 文件了，但是 c 目录下却多了一个 c.txt，这个文件就是我们在一开始提到的 <strong>whiteout 文件</strong>，它是主/次设备号都为 0 的字符设备，overlay 文件结构通过使用这种特殊文件来实现文件删除功能，在 merged 目录下使用 ls 命令查看文件时，overlay 会自动过滤掉 upper 目录下的 whiteout 文件以及在 lower 目录下的同名文件，以此实现文件删除效果</p><p>还有一个值得提到的点：overlay 在文件进行操作时用到了<strong>写时复制（Copy on Write）技术</strong>，在没有对文件进行修改时，merged 目录直接使用 lower 目录下的文件，只有当我们在 merged 目录对文件进行修改时，才会把修改的文件复制到 upper 目录</p><h2 id="Docker-overlay2"><a href="#Docker-overlay2" class="headerlink" title="Docker overlay2"></a><strong>Docker overlay2</strong></h2><p>有了对 overlayFS 的基本了解，我们接下来就可以着手分析 Docker 的 overlay2 文件结构了，实际上 Docker 支持的存储驱动有很多种：overlay、overlay2、aufs、vfs 等，在 Ubuntu 较新版本中的 Docker 中普遍采用了 overlay2 这种文件结构，其具有更优越的驱动性能，而 overlay 和 overlay2 的本质区别就是二者在镜像层之间的共享数据方法不同：</p><ul><li>overlay 通过 硬链接 的方式共享数据，只支持，增加磁盘 inode 负担</li><li>overlay2 通过 将多层的 lower 文件联合在一起</li></ul><p>简而言之，overlay2 就是 overlay 的改进版本，我们可以通过 docker info 命令查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pudding@DESKTOP-1QCHCU4:~$ <span class="built_in">sudo</span> docker info | grep -i <span class="string">&quot;storage driver&quot;</span></span><br><span class="line"> Storage Driver: overlay2</span><br></pre></td></tr></table></figure><p>在 Docker 中，我们日常操作主要涉及两个方面：镜像层与容器层，镜像层就是我们通过 <strong>docker pull</strong> 等命令下载到本机中的镜像，而容器层则是我们通过 <strong>docker exec</strong> 等命令进入的交互式终端，如果你使用过 Docker，你会发现我们只用一个镜像，通过 <strong>docker run</strong> 可以产生很多个容器，这就可以类比 upper 与 lower 两层，镜像作为 lower 层，只读提供文件系统基础，而容器作为 upper 层，我们可以在其中进行任意文件操作，只用同一个镜像就可以申引出不同的容器，这也是一种节约空间资源的方式吧（我的推测</p><p>接下来我们稍微详细地探讨下镜像层与容器层，还有他们的元数据</p><h3 id="镜像层"><a href="#镜像层" class="headerlink" title="镜像层"></a>镜像层</h3><p>我们可以通过 <code>docker inspect [IMAGE ID]</code> 来查看镜像配置</p><p><img src="/img/2024-08-28-%E4%BA%86%E8%A7%A3%E5%AE%B9%E5%99%A8overlay%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image5.png" alt="image GraphDriver"></p><p>其中的 GraphDriver 字段中关于 overlay2 文件结构的目录信息</p><p>每一层的对应都在配置信息中体现的非常清楚，但是有一点问题，我们在实际查看文件夹的时候，可以发现镜像层其实并没有 /merged 目录，<strong>我的理解</strong> /merged 目录只在运行容器时存在；这个目录是 Docker 为容器提供的一个视图，它将 lowerdir 和 upperdir 层合并为一个统一的文件系统供容器访问；虽然 merged 目录不存在于镜像层，但 Docker 在 GraphDriver 字段中提供了这些信息，以确保我们能够理解整个 overlay2 文件系统的结构。（不一定对</p><p>可以看到镜像的目录是在 <code>/var/lib/docker/overlay2</code> 下，我们打开一个镜像层看一看其中都有哪些文件</p><p><img src="/img/2024-08-28-%E4%BA%86%E8%A7%A3%E5%AE%B9%E5%99%A8overlay%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image6.png" alt="image overlay2"></p><p>其中我们关注一下 diff 目录、link 和 lower 文件</p><h4 id="diff-目录"><a href="#diff-目录" class="headerlink" title="diff 目录"></a>diff 目录</h4><p><strong>在这个目录中存放的是当前镜像层的文件，</strong>刚刚在介绍 overlay2 与 overlay 区别的时候提到了 overlay2 是将多个 lower 层联合到一起，在上面的图中也可以看到，多个 lower 层之间用<code>:</code>分割，在这些层中每一层都有一部分文件，把他们联合到一起就得到了完整的 rootfs</p><p><img src="/img/2024-08-28-%E4%BA%86%E8%A7%A3%E5%AE%B9%E5%99%A8overlay%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image7.png" alt="image diff"></p><h4 id="link-文件"><a href="#link-文件" class="headerlink" title="link 文件"></a>link 文件</h4><p>link 文件中的内容是<strong>当前层的软链接名称</strong></p><p><img src="/img/2024-08-28-%E4%BA%86%E8%A7%A3%E5%AE%B9%E5%99%A8overlay%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image8.png" alt="image link"></p><p>这些链接都在 <code>/var/lib/docker/overlay2/l</code> 目录下</p><p><img src="/img/2024-08-28-%E4%BA%86%E8%A7%A3%E5%AE%B9%E5%99%A8overlay%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image9.png" alt="image link"></p><p>使用软链接的目的是<strong>为了避免受到 mount 命令参数的长度限制</strong></p><blockquote><p><code>getconf ARG_MAX</code><br>该值决定了一个进程的命令行参数和环境变量的总长度<br>通常在 Linux 系统上为 2MB（2097152 字节）</p></blockquote><h4 id="lower-文件"><a href="#lower-文件" class="headerlink" title="lower 文件"></a>lower 文件</h4><p>lower 文件中的内容是<strong>在此层之下的所有层的软连接名称</strong>，最底层不存在该文件，我们知道 upper 层在 lower 层之上，而 lower 层中越靠后的则越在底层</p><p>我们查看 upper 层对应目录下 lower 文件，可以看到其中有 4 个软链接</p><p><img src="/img/2024-08-28-%E4%BA%86%E8%A7%A3%E5%AE%B9%E5%99%A8overlay%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image10.png" alt="image lower"></p><p>恰好 lower 目录中有 4 个镜像层</p><p><img src="/img/2024-08-28-%E4%BA%86%E8%A7%A3%E5%AE%B9%E5%99%A8overlay%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image11.png" alt="image GraphDriver lower"></p><p>在 lower 层中，处于最底层的则是应该在 <code>:</code> 最后的目录，即，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/var/lib/docker/overlay2/784dc7dce7d8625dc10a4fa065f2a1f27ff65e19def543c9f491f32575ec09dd</span><br></pre></td></tr></table></figure><p>查看这一目录下的文件，可以发现它并没有 lower 文件</p><p><img src="/img/2024-08-28-%E4%BA%86%E8%A7%A3%E5%AE%B9%E5%99%A8overlay%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image12.png" alt="image lowest"></p><p>这一层对应的软链接即 link 文件内容为 <code>54MNMNIOUGOPX7SLOTKFTZHE5R</code>，我们查看其上一层的 lower 文件内容</p><p><img src="/img/2024-08-28-%E4%BA%86%E8%A7%A3%E5%AE%B9%E5%99%A8overlay%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image13.png" alt="image one floor up"></p><p>可以发现确实对应了最底层目录的软链接</p><h3 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h3><p>Docker 的元数据存储目录为 <code>/var/lib/docker/image/overlay2</code> </p><p><img src="/img/2024-08-28-%E4%BA%86%E8%A7%A3%E5%AE%B9%E5%99%A8overlay%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image14.png" alt="image overlay2"></p><p>我们主要看 imagedb 和 layerdb 这两个文件夹</p><h4 id="imagedb"><a href="#imagedb" class="headerlink" title="imagedb"></a>imagedb</h4><p>这个文件夹中存储了镜像相关的元数据，具体位置是在 <code>/imagedb/content/sha256</code>  目录下，这个目录下的文件以 <strong>IMAGE ID</strong> 来命令</p><p><img src="/img/2024-08-28-%E4%BA%86%E8%A7%A3%E5%AE%B9%E5%99%A8overlay%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image15.png" alt="image imagedb"></p><p>这个文件的内容就是我们通过 <code>docker inspect [IMAGE ID]</code> 命令查看到的信息，其中我们关注 <code>RootFS</code> 字段</p><p><img src="/img/2024-08-28-%E4%BA%86%E8%A7%A3%E5%AE%B9%E5%99%A8overlay%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/Untitled2.png" alt="image RootFS"></p><p>可以看出这个字段中有很多 sha256 值，这些哈希值称为 <strong>diff_id</strong>，其从上至下的顺序就表示镜像层最底层到最顶层，也就是说每个 diff_id 对应了一个镜像层，实际上，对应每一个镜像层的还有另外两个 id：<strong>cache_id</strong> 和 <strong>chain_id</strong></p><ul><li><strong>cache_id</strong> 就是在 <code>docker/overlay2</code> 目录下看到的文件夹名称，也是我们通过 <code>docker inspect [IMAGE ID]</code> 命令查看 GraphDriver 字段对应不同的 Dir，其本质是宿主机随机生成的 uuid  <img src="/img/2024-08-28-%E4%BA%86%E8%A7%A3%E5%AE%B9%E5%99%A8overlay%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image16.png" alt="image cache_id"></li><li>chain_id 是通过 diff_id 计算出来的，是 Docker 内容寻址机制采用的索引 ID<ul><li>chain_id 在目录 <code>/var/lib/docker/image/overlay2/layerdb/sha256</code> 查看</li><li>如果当前镜像层为最底层，则其 chain_id 与 diff_id 相同</li><li>如果当前镜像层不是最底层，则其 chain_id 计算方式为：<code>sha256(上层chain_id + &quot; &quot; + 本层diff_id)</code></li></ul></li></ul><p>这三个 id 之间存在一一对应的关系，我们可以通过 diff_id 计算得到 chain_id，又可以通过 chain_id 找到对应的 cache_id，下面我们举个栗子说明一下：</p><p>我们刚刚提到了 diff_id 从上至下是最底层到最顶层</p><p><img src="/img/2024-08-28-%E4%BA%86%E8%A7%A3%E5%AE%B9%E5%99%A8overlay%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image17.png" alt="image RootFS"></p><p>查看 chain_id</p><p><img src="/img/2024-08-28-%E4%BA%86%E8%A7%A3%E5%AE%B9%E5%99%A8overlay%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image18.png" alt="image chain_id"></p><p>可以看到其中确实有一个 chain_id 与 最底层的 diff_id 相同，有了最底层的 chain_id 我们就可以计算出下一层的 chain_id，至于具体如何计算，以及如何通过 chain_id 找到对应的 cache_id，我们需要先了解 layerdb 目录下的内容</p><h4 id="layerdb"><a href="#layerdb" class="headerlink" title="layerdb"></a>layerdb</h4><p>我们现在已知 Docker 的镜像层作为只读层，容器曾作为读写层，而 Docekr 实际上定义了 roLayer 接口与 mountLayer 接口，分别用来描述（只读）镜像层与（读写）容器层，这两个接口的元数据就在目录 <code>/var/lib/docker/image/overlay2/layerdb</code> 下</p><ul><li><strong>roLayer</strong>  rolayer 接口用来描述镜像层，元数据的具体目录在 <code>layerdb/sha256/</code> 下，在此目录下每个文件夹都以每个镜像层的 chain_id 命名  <img src="/img/2024-08-28-%E4%BA%86%E8%A7%A3%E5%AE%B9%E5%99%A8overlay%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image19.png" alt="image roLayer">  在文件夹中主要有这 5 个文件，我们简单介绍一下：<ul><li>cache-id：当前 chain_id 对应的 cache_id，用来索引镜像层</li><li>diff：当前 chain_id 对应的 diff_id</li><li>parent：当前 chain_id 对应的镜像层的下一层（父层）镜像 chain_id，最底层不存在该文件</li><li>size：当前 chain_id 对应的镜像层物理大小，单位是字节</li><li>tar-split.json.gz：当前 chain_id 对应镜像层压缩包的 split 文件，可以用来还原镜像层的 tar 包，通过 <code>docker save</code> 命令导出镜像时会用到</li></ul>  我们在上一节中已经判断出了最底层对应的 chain_id，不妨查看一下对应目录下的文件  <img src="/img/2024-08-28-%E4%BA%86%E8%A7%A3%E5%AE%B9%E5%99%A8overlay%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image20.png" alt="image lowest chain_id">  可以看到该目录下确实没有 parent 文件，那么我们再查看其下一层，通过 diff_id 的顺序我们可以得知其下一层的 diff_id 为 <code>0d5cae34765c1f89a17e5e8e7e6f6f9ddc541151e3efab2487b013faeecac3a6</code> （上文提到的 inspect 的 RootFS 里 Layers 的 sha256 信息），通过计算 sha256，我们可以得出下一层的 chain_id  <img src="/img/2024-08-28-%E4%BA%86%E8%A7%A3%E5%AE%B9%E5%99%A8overlay%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image21.png" alt="image one floor up chain_id">  计算得到最底层的下一层镜像 chain_id 为 <code>696245322de78f67f7f15ab9ade64bf0c35cf1f280a66d763230d9e99a3a6d39</code>  <img src="/img/2024-08-28-%E4%BA%86%E8%A7%A3%E5%AE%B9%E5%99%A8overlay%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image22.png" alt="image diff">  确实存在该目录，可以看到：<ul><li>diff 文件内容是 <code>004114a8d0e34895acdd9c1c370b1184b239d538e3951887d04d1bda771bd441</code></li><li>parent 文件内容是 <code>4f118a86fef9debde65113068bd2b85f9c5fd65250ac6af2e8281a502cc0a724</code></li></ul>  可以看到与我们计算用到的两个值也完全相同</li><li><strong>mountLayer</strong>  mountLayer 接口用来描述容器层，元数据的具体目录在 <code>layerdb/mounts/</code> ，在此目录下的文件夹以每个容器的容器 ID（CONTAINER ID）命名  <img src="/img/2024-08-28-%E4%BA%86%E8%A7%A3%E5%AE%B9%E5%99%A8overlay%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image23.png" alt="image contain">  在这个文件夹下只有 3 个文件，内容如下：  <img src="/img/2024-08-28-%E4%BA%86%E8%A7%A3%E5%AE%B9%E5%99%A8overlay%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image24.png" alt="image mountLayer">  简单介绍一下这3个文件：<ul><li>init-id：对应容器 init 层目录名，源文件在 <code>/var/lib/docker/overlay2</code> 目录下</li><li>mount-id：容器层存储在 <code>/var/lib/docker/overlay2</code> 目录下的名称</li><li>parent：容器的镜像层<strong>最顶层</strong>镜像的 chain_id</li></ul>  我们可以查看 parent 文件中 chain_id 对应目录下的 diff 文件  <img src="/img/2024-08-28-%E4%BA%86%E8%A7%A3%E5%AE%B9%E5%99%A8overlay%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image25.png" alt="image diff">  根据 diff_id 从上至下的顺序，我们可以确定这个 diff_id 的确是镜像层的最顶层  <img src="/img/2024-08-28-%E4%BA%86%E8%A7%A3%E5%AE%B9%E5%99%A8overlay%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image26.png" alt="image rootfs">  在这里我们引入了一个叫做 <strong>init 层</strong> 的概念，实际上，一个完善的容器分为 3 层：镜像层、init 层和容器层，镜像层提供完整的文件系统基础（rootfs），容器层提供给用户进行交互操作与读写权限，而 init 层则是对应每个容器自己的一些系统配置文件，我们可以看一下 ini 层的内容  <img src="/img/2024-08-28-%E4%BA%86%E8%A7%A3%E5%AE%B9%E5%99%A8overlay%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image27.png" alt="image init">  可以看到在 diff 目录中有一些 /etc/hosts、/etc/resolv.conf 等配置文件，需要这一层的原因是当容器启动的时候，会有一些每个容器特定的配置文件（例如 hostname），但由于镜像层是只读层无法进行修改，所以就在镜像层之上单独挂载一层 init 层，用户通过修改每个容器对应的 init 层中的一些配置文件从而达到修改镜像配置文件的目的，而在 init 层中的配置文件也仅对当前容器生效，通过 docker commit 命令创建镜像时也不会提交 init 层。</li></ul><h3 id="容器层"><a href="#容器层" class="headerlink" title="容器层"></a>容器层</h3><p>最后我们来看一下容器层的构造，刚刚我们在 <strong>mountLayer</strong> 一节的讲述中提到了 <strong>mount-id</strong> 这个文件，而这个文件的内容就是容器目录的名称，我们可以通过 <code>docker inspect [CONTAINER ID]</code> 命令也可以判断</p><p><img src="/img/2024-08-28-%E4%BA%86%E8%A7%A3%E5%AE%B9%E5%99%A8overlay%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image28.png" alt="image mount-id"></p><p><img src="/img/2024-08-28-%E4%BA%86%E8%A7%A3%E5%AE%B9%E5%99%A8overlay%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image29.png" alt="image graphdriver"></p><p>可以看到其实容器层的目录与镜像层、init层都在同一目录下，其实也就说明了他们在文件结构上都是相同的</p><p><img src="/img/2024-08-28-%E4%BA%86%E8%A7%A3%E5%AE%B9%E5%99%A8overlay%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image30.png" alt="image overlay2"></p><p>同样都是这几个文件，但不同的是，我们可以看到在容器层确实有了 merge 这个目录，与我们在文章一开始实现的 overlayFS 是相同的</p><p><img src="/img/2024-08-28-%E4%BA%86%E8%A7%A3%E5%AE%B9%E5%99%A8overlay%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image31.png" alt="image merged"></p><p>在 merge 目录下展现了完整的 rootfs 文件系统，这就是 overlay2 通过联合挂载技术，将镜像层、init 层与容器层挂载到一起呈现的结果，这也是我们通过 <code>docker exec</code> 命令进入容器的交互式终端看到的结果，也就是所谓的<strong>视图</strong></p><p><img src="/img/2024-08-28-%E4%BA%86%E8%A7%A3%E5%AE%B9%E5%99%A8overlay%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image32.png" alt="image contain"></p><h4 id="link-amp-lower-文件"><a href="#link-amp-lower-文件" class="headerlink" title="link &amp; lower 文件"></a><strong>link &amp; lower 文件</strong></h4><p>我们在镜像层的时候已经讲过这两个文件了，在容器层中这两个文件与镜像层作用是相同的，不过我们可以看一下 lower 文件的内容</p><p><img src="/img/2024-08-28-%E4%BA%86%E8%A7%A3%E5%AE%B9%E5%99%A8overlay%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image33.png" alt="image lower"></p><p>前面讲过，lower 文件的内容是在此层之下的所有层的软链接名称，我们已知此镜像的镜像层共 4 层（lower 层 3 个，upper 层 1 个），但是我们从上图可以看到在容器层之下有 5 个其他层，那多出来的一个就是我们在上一节中提到的 init 层，init 层也有其对应的软链接（看上一节中的图），所以在 <code>docker/overlay2/l</code> 目录下实际上有 6 个软连接（4个镜像层，1个 init 层，1 个容器层）</p><p><img src="/img/2024-08-28-%E4%BA%86%E8%A7%A3%E5%AE%B9%E5%99%A8overlay%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image34.png" alt="image link"></p><p>而通过 <code>docker inspect [CONTAINER ID]</code> 命令我们也可以判断出容器层是最顶层，其次是 init 层，最下面是镜像层，也对应了 lower 文件中软链接的顺序</p><p><img src="/img/2024-08-28-%E4%BA%86%E8%A7%A3%E5%AE%B9%E5%99%A8overlay%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image35.png" alt="image graphdriver"></p><h4 id="diff-目录-1"><a href="#diff-目录-1" class="headerlink" title="diff 目录"></a><strong>diff 目录</strong></h4><p>这个目录实际上就是 overlayFS 文件结构中的 upper 层（上图中也能看到），所以它的用途就是保存用户在容器中（merged 层）对文件进行的编辑</p><p><img src="/img/2024-08-28-%E4%BA%86%E8%A7%A3%E5%AE%B9%E5%99%A8overlay%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image36.png" alt="image diff"></p><p>我们在容器内的 /root/A 目录下创建了一个 a.txt 文件，可以看到在 diff 目录下也体现了出来，我们再尝试在容器中删除原本镜像自带的文件看一看效果</p><p><img src="/img/2024-08-28-%E4%BA%86%E8%A7%A3%E5%AE%B9%E5%99%A8overlay%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image37.png" alt="image contain"></p><p>我们在容器中删除 /etc 目录下的 shadow 文件，可以看到在 diff 目录下的 /etc 中多了一个 shadow 文件，而这个文件实际上就是我们在文章一开始讲到的 whiteout 文件，用来隐藏我们已经删掉的 shadow 文件，而实际上镜像层的 shadow 文件并没有被删除</p><p><img src="/img/2024-08-28-%E4%BA%86%E8%A7%A3%E5%AE%B9%E5%99%A8overlay%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/image38.png" alt="image diff"></p><p>至此，我们对于 Docker 使用的 overlay2 文件结构分析结束。</p>]]></content>
    
    
    <summary type="html">Docker 的 overlay2 存储驱动基于 OverlayFS 文件系统，高效管理容器和镜像层。通过 docker run 创建容器时，Docker 将多个只读镜像层（LowerDir）与可读写的容器层（UpperDir）及初始化层（init）结合，形成 MergedDir 中的统一文件系统视图。通过 docker cp 复制到容器的文件存储在 /var/lib/docker/overlay2 的 UpperDir 中。使用 docker rm 删除容器后，UpperDir 及其相关文件会被移除，确保 overlay2 目录中无残留数据。LowerDir 保存不可变的镜像层，UpperDir 捕获运行时修改，采用写时复制技术提升效率。init 层处理容器特定配置，如 /etc/hosts，这些配置不会在通过 docker commit 创建新镜像时保留。元数据存储在 /var/lib/docker/image/overlay2 中，通过 diff_id、chain_id 和 cache_id 映射层关系。/var/lib/docker/overlay2/l 中的软链接避免命令行长度限制，提升性能。这种结构确保隔离、资源高效利用和干净删除，使 overlay2 成为 Docker 存储的可靠选择。</summary>
    
    
    
    
    <category term="docker" scheme="https://wu3227834.github.io/tags/docker/"/>
    
    <category term="contain" scheme="https://wu3227834.github.io/tags/contain/"/>
    
  </entry>
  
  <entry>
    <title>github 国内代理访问下载</title>
    <link href="https://wu3227834.github.io/2024/08/20/2024-08-20-github-guo-nei-dai-li-fang-wen-xia-zai/"/>
    <id>https://wu3227834.github.io/2024/08/20/2024-08-20-github-guo-nei-dai-li-fang-wen-xia-zai/</id>
    <published>2024-08-20T00:00:00.000Z</published>
    <updated>2025-05-29T10:13:18.874Z</updated>
    
    <content type="html"><![CDATA[<h2 id="演示代理"><a href="#演示代理" class="headerlink" title="演示代理"></a><strong>演示代理</strong></h2><ol><li>前缀</li></ol><blockquote><p><a href="https://github.jobcher.com/gh/">https://github.jobcher.com/gh/</a></p></blockquote><ol><li>下载仓库</li></ol><blockquote><p>git clone <a href="https://github.jobcher.com/gh/">https://github.jobcher.com/gh/</a>&lt;你要下载的GitHub地址&gt;</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.jobcher.com/gh/https://github.com/wu3227834/ann-filtering-benchmark-datasets.git</span><br></pre></td></tr></table></figure><h2 id="另外一种方法"><a href="#另外一种方法" class="headerlink" title="另外一种方法"></a><strong>另外一种方法</strong></h2><p>在你有科学上网的前提下使用代理方式来连接github</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global https.proxy http://127.0.0.1:1080</span><br><span class="line"><span class="comment">#取消设置</span></span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure><p><a href="http://127.0.0.1:1080/">http://127.0.0.1:1080</a> 是你的代理服务地址</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;演示代理&quot;&gt;&lt;a href=&quot;#演示代理&quot; class=&quot;headerlink&quot; title=&quot;演示代理&quot;&gt;&lt;/a&gt;&lt;strong&gt;演示代理&lt;/strong&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;前缀&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;</summary>
      
    
    
    
    
    <category term="git" scheme="https://wu3227834.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>python 并发函数</title>
    <link href="https://wu3227834.github.io/2024/08/20/2024-08-20-python-bing-fa-han-shu/"/>
    <id>https://wu3227834.github.io/2024/08/20/2024-08-20-python-bing-fa-han-shu/</id>
    <published>2024-08-20T00:00:00.000Z</published>
    <updated>2025-05-29T10:13:18.874Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>工作需要向几十万表写入亿级别数据，想使用 pyhon 的并发执行。才开始使用 ThreadPoolExecutor 发现奇慢无比，大佬说这其实是串行，并发得用  multiprocessing，立帖研究。</p><p>本文以 python3.10 为例，学习一下 python 的并发执行。</p><h2 id="并发执行"><a href="#并发执行" class="headerlink" title="并发执行"></a>并发执行</h2><p>python 并发执行分三个方面：多线程（threading）、多进程（multiprocessing）、多协程（asynico）</p><p>适当的工具选择主要取决于要执行的任务（CPU 密集型或 IO 密集型）：</p><ul><li>CPU 密集型（CPU-bound）：也叫做计算密集型，是指 I/O 在很短时间内就可以完成，CPU  需要大量的计算和处理，特点是 CPU 占用率相当高；例如：<strong>压缩/解压缩、加密解密、正则表达式搜索、计算</strong>；</li><li>IO 密集型（I/O bound）：是指系统运作大部分的状况是 CPU 在等 I/O（硬盘，内存）的读写操作，CPU 占用率较低，例如：<strong>文件处理，网络爬虫，读写数据库；</strong></li></ul><p>在对比这三种方式之前，让我们先了解两个概念：<strong>并行和并发</strong></p><h3 id="并行和并发的区别"><a href="#并行和并发的区别" class="headerlink" title="并行和并发的区别"></a>并行和并发的区别</h3><p>在 Python 中，”并发”和”并行”是两个相关但不同的概念。</p><blockquote><p>并发 （Concurrency）是指程序的设计方式，允许多个任务在重叠的时间段内执行。虽然在同一时刻只能执行一个任务，但任务之间可以通过切换上下文来实现交替执行。这种交替执行的方式可以提高程序的响应性和效率，尤其是在处理 I/O 密集型任务时。在并发编程中，任务之间通常是独立的，它们可以通过多线程、多进程、协程或异步编程等方式来实现。</p><p>并行（Parallelism）是指多个任务同时执行的能力。在并行编程中，多个任务真正地同时执行，通常需要多个物理或逻辑处理单元（例如多核 CPU）。并行执行任务可以显著提高计算密集型任务的性能，但对于I/O密集型任务则没有明显的优势。</p></blockquote><p>简单来说，<strong>并发是指多个任务在重叠的时间段内交替执行，通过切换上下文实现任务之间的交替执行，以提高程序的响应性和效率；而并行是指多个任务真正地同时执行，通常需要多个物理或逻辑处理单元，用于同时处理不同任务，以提高计算密集型任务的性能。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> concurrent.futures</span><br><span class="line"></span><br><span class="line"><span class="comment"># 并发执行任务</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Task <span class="subst">&#123;name&#125;</span> started&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Task <span class="subst">&#123;name&#125;</span> completed&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 并行执行任务</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parallel_task</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Task <span class="subst">&#123;name&#125;</span> started&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Task <span class="subst">&#123;name&#125;</span> completed&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 并发示例</span></span><br><span class="line"><span class="keyword">with</span> concurrent.futures.ThreadPoolExecutor() <span class="keyword">as</span> executor:</span><br><span class="line">    tasks = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>]</span><br><span class="line">    executor.<span class="built_in">map</span>(task, tasks)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 并行示例</span></span><br><span class="line"><span class="keyword">with</span> concurrent.futures.ProcessPoolExecutor() <span class="keyword">as</span> executor:</span><br><span class="line">    tasks = [<span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Z&#x27;</span>]</span><br><span class="line">    executor.<span class="built_in">map</span>(parallel_task, tasks)</span><br></pre></td></tr></table></figure><p>在上面的示例中，’task’ 函数模拟了一个耗时 2 秒的任务，并使用线程池实现了并发执行。’parallel_task’ 函数也是一个耗时 2 秒的任务，但使用了进程池实现了并行执行。我们可以运行这段代码，观察任务启动时 python 进程的数目、执行的顺序和时间，以更好地理解并发和并行的区别。</p><p>然后，我们来聊 多进程、多线程、多协程的不同、关系以及怎么选择。</p><h3 id="进程、线程、协程的对比"><a href="#进程、线程、协程的对比" class="headerlink" title="进程、线程、协程的对比"></a>进程、线程、协程的对比</h3><ul><li>多进程：<ul><li>优点：可以实现并行，且只有多进程可以实现并行</li><li>缺点：占用资源多，可启动数目最少</li></ul></li><li>多线程：<ul><li>占用资源少，轻量级</li><li>python 的线程是无法并行的（占用多个 cpu），只能进行并发</li><li>切换线程也是有开销的。</li><li>适合 IO 密集型运算、同时运行任务不多（线程可启动数量也是有限制的）</li></ul></li><li>多协程：<ul><li>优点：内存开销最小，可启动数量最多</li><li>缺点：支持的库比较少，代码复杂，例如爬虫不支持，所以想用多协程爬取的话，可以用 aiohttp，不能用 requests</li><li>适用于：IO 密集型、超多任务运行</li></ul></li></ul><h3 id="进程、线程、协程的关系"><a href="#进程、线程、协程的关系" class="headerlink" title="进程、线程、协程的关系"></a>进程、线程、协程的关系</h3><ul><li>一个进程中可以启动很多线程</li><li>一个线程中可以启动很多协程</li></ul><h3 id="python-慢的原因"><a href="#python-慢的原因" class="headerlink" title="python 慢的原因"></a><strong>python 慢的原因</strong></h3><p>两个原因：</p><ul><li>是解释型语言，边解释边执行</li><li>GIL，无法利用多核 CPU</li></ul><p>GIL 是什么，为什么有 GIL？</p><p>全局解释器锁（Global interpreter lock），是计算机程序设计语言解释器用于同步线程的一种机制，它使得任何时刻仅有一个线程在执行。</p><p>python 设计初期为了解决线程并发的问题引入了 GIL，但是现在很难去除，本质是一种锁，它的好处在于简化了 python 对共享资源的管理，但是导致 python 无法实现真正的多线程执行。</p><p>怎样规避 GIL 带来的限制：</p><ul><li>IO 期间线程会释放 GIL，实现 CPU 和 IO 的并发，因此 GIL 的存在对于 IO 密集型计算是有好的，但是对 CPU 密集型则会拖累速度</li><li>利用 multiprocessing，可以利用多核 CPU 的优势</li></ul><h3 id="怎样选择"><a href="#怎样选择" class="headerlink" title="怎样选择"></a><strong>怎样选择</strong></h3><ul><li>IO 密集型运算优先选择多进程</li><li>若满足三点：需要超多任务量、有现成协程库支持 、代码复杂度可以接受，则选择协程，否则选择线程</li></ul><h2 id="threading-—-基于线程的并行"><a href="#threading-—-基于线程的并行" class="headerlink" title="threading — 基于线程的并行"></a><strong>threading — 基于线程的并行</strong></h2><p><a href="https://docs.python.org/zh-cn/3.10/library/threading.html">3.10.13 Documentation » Python 标准库 » 并发执行 » threading — 基于线程的并行</a></p><h2 id="multiprocessing-—-基于进程的并行"><a href="#multiprocessing-—-基于进程的并行" class="headerlink" title="multiprocessing — 基于进程的并行"></a>multiprocessing — 基于进程的并行</h2><p><a href="https://docs.python.org/zh-cn/3.10/library/multiprocessing.html">3.10.13 Documentation » Python 标准库 » 并发执行 » multiprocessing — 基于进程的并行</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://docs.python.org/zh-cn/3.10/library/concurrency.html">3.10.13 Documentation » Python 标准库 » 并发执行</a></li><li><a href="https://blog.csdn.net/weixin_52906070/article/details/132317118">python并发编程这一篇就够了</a></li><li><a href="https://xz.aliyun.com/t/12766?time__1311=GqGxu7G=oYqWqGN4eeqBKIh4Rh=9kFda4D">python并发从0到1</a></li><li><a href="https://www.itheima.com/news/20230710/103420.html">Python中的并发和并行是什么意思?</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;工作需要向几十万表写入亿级别数据，想使用 pyhon 的并发执行。才开始使用 ThreadPoolExecutor 发现奇慢无比，大佬说这其</summary>
      
    
    
    
    
    <category term="python" scheme="https://wu3227834.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Java命令学习系列—Jps</title>
    <link href="https://wu3227834.github.io/2024/06/30/2024-06-30-java-ming-ling-xue-xi-xi-lie-jps/"/>
    <id>https://wu3227834.github.io/2024/06/30/2024-06-30-java-ming-ling-xue-xi-xi-lie-jps/</id>
    <published>2024-06-30T00:00:00.000Z</published>
    <updated>2025-05-29T10:13:18.874Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>jps 位于 jdk 的 bin 目录下，其作用是显示当前系统的 java 进程情况，及其 id 号。 jps 相当于 Solaris 进程工具 ps。不像 ”pgrep java” 或 ”ps -ef grep java” ，jps 并不使用应用程序名来查找 JVM 实例。因此，它查找所有的 Java 应用程序，包括即使没有使用 java 执行体的那种（例如，定制的启动 器）。另外，jps 仅查找当前用户的 Java 进程，而不是当前系统中的所有进程。</p></blockquote><h2 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h2><p>我们知道，很多 JAVA 命令都在 jdk 的 JAVA_HOME/bin/ 目录下面，jps 也不例外，它就在 bin 目录下，它是 java 自带的一个命令。</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>jps（Java Virtual Machine Process Status Tool）是 JDK 1.5 提供的一个显示当前所有 java 进程 pid 的命令，简单实用，非常适合在 linux/unix 平台上简单察看当前 java 进程的一些简单情况。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>jdk 中的 jps 命令可以显示当前运行的 java 进程以及相关参数，它的实现机制如下：</p><p>java 程序在启动以后，会在 <code>java.io.tmpdir</code> 指定的目录下，就是临时文件夹里，生成一个类似于</p><p><code>hsperfdata_User</code> 的文件夹，这个文件夹里（在 Linux 中为 /tmp/hsperfdata_{userName}/），有几个文件，名字就是 java 进程的 pid，因此列出当前运行的 java 进程，只是把这个目录里的文件名列一下而已。 至于系统的参数什么，就可以解析这几个文件获得。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@pudding-160 hsperfdata_root]## ll</span><br><span class="line">total 96</span><br><span class="line">-rw------- 1 root root 32768 Jun 25 21:28 372997</span><br><span class="line">-rw------- 1 root root 32768 Jun 25 21:27 49553</span><br><span class="line">-rw------- 1 root root 32768 Jun 25 21:27 5032</span><br><span class="line">[root@pudding-160 hsperfdata_root]## <span class="built_in">pwd</span></span><br><span class="line">/tmp/hsperfdata_root</span><br><span class="line">[root@pudding-160 hsperfdata_root]## jps</span><br><span class="line">372997 ManagerMaster</span><br><span class="line">49553 RunJar</span><br><span class="line">5032 ManagerAgent</span><br><span class="line">433884 Jps</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>想要学习一个命令，先来看看帮助，使用 <code>jps -help</code> 查看帮助：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@pudding-160 ~]## jps -<span class="built_in">help</span></span><br><span class="line">usage: jps [-<span class="built_in">help</span>]</span><br><span class="line">       jps [-q] [-mlvV] [&lt;<span class="built_in">hostid</span>&gt;]</span><br><span class="line"></span><br><span class="line">Definitions:</span><br><span class="line">    &lt;<span class="built_in">hostid</span>&gt;:      &lt;hostname&gt;[:&lt;port&gt;]</span><br></pre></td></tr></table></figure><p>接下来，为了详细介绍这些参数，我们编写几个类，在 main 方法里写一个 while(true) 的循环，查看 java 进程情况。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.JavaCommand;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> pudding</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JpsDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>-q 只显示 pid，不显示 class 名称、jar 文件名和传递给 main 方法的参数</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pudding@DESKTOP-1QCHCU4:/mnt/wsl/demo$ jps -q</span><br><span class="line">4167</span><br><span class="line">4312</span><br></pre></td></tr></table></figure><p><strong>-m 输出传递给 main 方法的参数，在嵌入式 jvm 上可能是null，</strong>在这里，在启动 main 方法的时候，我给 String[] args 传递一个参数：pudding，执行<code>jsp -m</code> ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pudding@DESKTOP-1QCHCU4:/mnt/wsl/demo$ jps -m</span><br><span class="line">7760 Jps -m</span><br><span class="line">7674 JpsDemo pudding</span><br></pre></td></tr></table></figure><p><strong>-l 输出应用程序 main class 的完整 package 名或者应用程序的 jar 文件完整路径名：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pudding@DESKTOP-1QCHCU4:/mnt/wsl/demo$ jps -l</span><br><span class="line">4517 sun.tools.jps.Jps</span><br><span class="line">4167 com.JavaCommand.JpsDemo</span><br></pre></td></tr></table></figure><p><strong>-v 输出传递给 JVM 的参数；</strong>在这里，在启动 main 方法的时候，我给 jvm 传递一个参数：-Dfile.encoding=UTF-8，执行<code>jps -v</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pudding@DESKTOP-1QCHCU4:/mnt/wsl/demo$ jps -v</span><br><span class="line">9317 JpsDemo -Dfile.encoding=UTF-8</span><br><span class="line">9391 Jps -Dapplication.home=/usr/lib/jvm/java-8-openjdk-amd64 -Xms8m</span><br></pre></td></tr></table></figure><p>PS：jps 命令有个地方很不好，似乎只能显示当前用户的 java 进程，要显示其他用户的还是只能用 unix/linux 的 ps 命令。</p><blockquote><p>jps 是我最常用的 java 命令。使用 jps 可以查看当前有哪些 Java 进程处于运行状态。如果我运行了一个 web 应用（使用 tomcat、jboss、jetty 等启动）的时候，我就可以使用 jps 查看启动情况。有的时候我想知道这个应用的日志会输出到哪里，或者启动的时候使用了哪些 javaagent，那么我可以使用 jps -v 查看进程的 jvm 参数情况。</p></blockquote><h2 id="jps-失效处理"><a href="#jps-失效处理" class="headerlink" title="jps 失效处理"></a>jps 失效处理</h2><h3 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h3><p>用 <code>ps -ef|grep java</code> 能看到启动的 java 进程，但是用 jps 查看却不存在该进程的 id。待会儿解释过之后就能知道在该情况下，jconsole、jvisualvm 可能无法监控该进程，其他 java 自带工具也可能无法使用。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>jps、jconsole、jvisualvm 等工具的数据来源就是这个文件（/tmp/hsperfdata_${userName}/pid)。所以当该文件不存在或是无法读取时就会出现 jps 无法查看该进程号，jconsole 无法监控等问题</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><ol><li><strong>磁盘读写、目录权限问题</strong>：若该用户没有权限写/tmp目录或是磁盘已满，则无法创建 /tmp/hsperfdata_${userName}/pid 文件。或该文件已经生成，但用户没有读权限</li><li><strong>临时文件丢失，被删除或是定期清理</strong>：对于 linux 机器，一般都会存在定时任务对临时文件夹进行清理，导致 /tmp 目录被清空。这也是我第一次碰到该现象的原因。常用的可能定时删除临时目录的工具为 crontab、redhat 的 tmpwatch、ubuntu 的 tmpreaper 等等<blockquote><p>这个导致的现象可能会是这样，用 jconsole 监控进程，发现在某一时段后进程仍然存在，但是却没有监控信息了。</p></blockquote></li><li><strong>java 进程信息文件存储地址被设置，不在 /tmp 目录下</strong>：上面我们在介绍时说默认会在 /tmp/hsperfdata_${userName} 目录保存进程信息，但由于以上 1、2 所述原因，可能导致该文件无法生成或是丢失，所以 java 启动时提供了参数（-Djava.io.tmpdir），可以对这个文件的位置进行设置，而 jps、jconsole 都只会从 /tmp 目录读取，而无法从设置后的目录读物信息，这是我第二次碰到该现象的原因</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;jps 位于 jdk 的 bin 目录下，其作用是显示当前系统的 java 进程情况，及其 id 号。 jps 相当于 Solaris 进程工具 ps。不像 ”pgrep java” 或 ”ps -ef grep java” ，jps 并不使用应用</summary>
      
    
    
    
    
    <category term="性能测试" scheme="https://wu3227834.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    <category term="Java" scheme="https://wu3227834.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java命令学习系列—Jstack</title>
    <link href="https://wu3227834.github.io/2024/06/30/2024-06-30-java-ming-ling-xue-xi-xi-lie-jstack/"/>
    <id>https://wu3227834.github.io/2024/06/30/2024-06-30-java-ming-ling-xue-xi-xi-lie-jstack/</id>
    <published>2024-06-30T00:00:00.000Z</published>
    <updated>2025-05-29T10:13:18.874Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>jstack 是 java 虚拟机自带的一种堆栈跟踪工具</p></blockquote><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>jstack 用于生成 java 虚拟机当前时刻的线程快照。线程快照是当前 java 虚拟机内每一条线程正在执行的方法堆栈的集合，生成线程快照的主要目的是<strong>定位线程出现长时间停顿的原因</strong>，如<strong>线程间死锁、死循环、请求外部资源导致的长时间</strong>等待等。 线程出现停顿的时候通过 jstack 来查看各个线程的调用堆栈，就可以知道没有响应的线程到底在后台做什么事情，或者等待什么资源。 如果 java 程序崩溃生成 core 文件，jstack 工具可以用来获得 core 文件的 java stac k和 native stack 的信息，从而可以轻松地知道 java 程序是如何崩溃和在程序何处发生问题。另外，jstack 工具还可以附属到正在运行的 java 程序中，看到当时运行的 java 程序的 java stack 和 native stack 的信息, 如果现在运行的 java 程序呈现 hung 的状态，jstack 是非常有用的。</p><blockquote><p>So，<strong>jstack命令主要用来查看Java线程的调用堆栈的，可以用来分析线程问题（如死锁）。</strong></p></blockquote><h2 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a><strong>线程状态</strong></h2><p>想要通过 jstack 命令来分析线程的情况的话，首先要知道线程都有哪些状态，下面这些状态是我们使用 jstack 命令查看线程堆栈信息时可能会看到的<strong>线程的几种状态</strong>：</p><ol><li>NEW，未启动的。不会出现在 Dump 中。</li><li>RUNNABLE，在虚拟机内执行的。</li><li>BLOCKED，受阻塞并等待监视器锁。</li><li>WATING，无限期等待另一个线程执行特定操作。</li><li>TIMED_WATING，有时限的等待另一个线程的特定操作。</li><li>TERMINATED，已退出的。</li></ol><h2 id="Monitor"><a href="#Monitor" class="headerlink" title="Monitor"></a>Monitor</h2><p>在多线程的 JAVA 程序中，实现线程之间的同步，就要说说 Monitor。Monitor 是 Java 中用来实现线程之间的互斥与协作的主要手段，它可以看成是对象或者 class 的锁。每一个对象都有，也仅有一个 monitor。下图，描述了线程和 Monitor 之间的关系，以及线程的状态转换图：</p><p><img src="/img/2024-06-30-Jstack/Untitled.png" alt="monitor"></p><p><strong>进入区（Entrt Set）</strong>：表示线程通过 synchronized 要求获取对象的锁。如果对象未被锁住，则进入拥有者；否则则在进入区等待。一旦对象锁被其他线程释放,立即参与竞争。</p><p><strong>拥有者（The Owner）</strong>：表示某一线程成功竞争到对象锁。</p><p><strong>等待区（Wait Set）</strong>：表示线程通过对象的 wait 方法，释放对象的锁，并在等待区等待被唤醒。</p><p>从图中可以看出，一个 Monitor 在某个时刻，只能被一个线程拥有，该线程就是 <code>“Active Thread”</code>，而其它线程都是 <code>“Waiting Thread”</code>，分别在两个队列 <code>“Entry Set”</code> 和 <code>“Wait Set”</code> 里面等候。在 <code>“Entry Set”</code> 中等待的线程状态是 <code>“Waiting for monitor entry”</code>，而在 <code>“Wait Set”</code> 中等待的线程状态是 <code>“in Object.wait()”</code>。 先看  <code>“Entry Set”</code> 里面的线程。我们称被 synchronized 保护起来的代码段为临界区。当一个线程申请进入临界区时，它就进入了 <code>“Entry Set”</code> 队列。对应的 code 就像：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(obj) &#123;</span><br><span class="line">.........</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调用修饰"><a href="#调用修饰" class="headerlink" title="调用修饰"></a>调用修饰</h2><p>表示线程在方法调用时，额外的重要的操作。线程 Dump 分析的重要信息。修饰上方的方法调用。</p><blockquote><p>locked &lt;地址&gt; 目标：使用 synchronized 申请对象锁成功，监视器的拥有者。<br>waiting to lock &lt;地址&gt; 目标：使用 synchronized 申请对象锁未成功，在迚入区等待。<br>waiting on &lt;地址&gt; 目标：使用 synchronized 申请对象锁成功后，释放锁幵在等待区等待。<br>parking to wait for &lt;地址&gt; 目标</p></blockquote><h3 id="locked"><a href="#locked" class="headerlink" title="locked"></a><strong>locked</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">at oracle.jdbc.driver.PhysicalConnection.prepareStatement</span><br><span class="line">- locked &lt;<span class="number">0x00002aab63bf7f58</span>&gt; (a oracle.jdbc.driver.T4CConnection)</span><br><span class="line">at oracle.jdbc.driver.PhysicalConnection.prepareStatement</span><br><span class="line">- locked &lt;<span class="number">0x00002aab63bf7f58</span>&gt; (a oracle.jdbc.driver.T4CConnection)</span><br><span class="line">at com.jiuqi.dna.core.internal.db.datasource.PooledConnection.prepareStatement</span><br></pre></td></tr></table></figure><p>通过 synchronized 关键字，成功获取到了对象的锁,成为监视器的拥有者，在临界区内操作。对象锁是可以线程重入的。</p><h3 id="waiting-to-lock"><a href="#waiting-to-lock" class="headerlink" title="waiting to lock"></a><strong>waiting to lock</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">at com.jiuqi.dna.core.impl.CacheHolder.isVisibleIn(CacheHolder.java:<span class="number">165</span>)</span><br><span class="line">- waiting to lock &lt;<span class="number">0x0000000097ba9aa8</span>&gt; (a CacheHolder)</span><br><span class="line">at com.jiuqi.dna.core.impl.CacheGroup$Index.findHolder</span><br><span class="line">at com.jiuqi.dna.core.impl.ContextImpl.find</span><br><span class="line">at com.jiuqi.dna.bap.basedata.common.util.BaseDataCenter.findInfo</span><br></pre></td></tr></table></figure><p>通过 synchronized 关键字，没有获取到了对象的锁，线程在监视器的进入区等待。在调用栈顶出现，线程状态为 Blocked。</p><h3 id="waiting-on"><a href="#waiting-on" class="headerlink" title="waiting on"></a><strong>waiting on</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">at java.lang.Object.wait(Native Method)</span><br><span class="line">- waiting on &lt;<span class="number">0x00000000da2defb0</span>&gt; (a WorkingThread)</span><br><span class="line">at com.jiuqi.dna.core.impl.WorkingManager.getWorkToDo</span><br><span class="line">- locked &lt;<span class="number">0x00000000da2defb0</span>&gt; (a WorkingThread)</span><br><span class="line">at com.jiuqi.dna.core.impl.WorkingThread.run</span><br></pre></td></tr></table></figure><p>通过 synchronized 关键字，成功获取到了对象的锁后，调用了 wait 方法，进入对象的等待区等待。在调用栈顶出现，线程状态为 WAITING 或 TIMED_WATING 。</p><h3 id="parking-to-wait-for"><a href="#parking-to-wait-for" class="headerlink" title="parking to wait for"></a><strong>parking to wait for</strong></h3><p>park 是基本的线程阻塞原语，不通过监视器在对象上阻塞。随 concurrent 包会出现的新的机制，synchronized 体系不同。</p><h2 id="线程动作"><a href="#线程动作" class="headerlink" title="线程动作"></a>线程动作</h2><p>线程状态产生的原因：</p><blockquote><p>runnable：状态一般为RUNNABLE。</p><p>in Object.wait()：等待区等待，状态为 WAITING 或 TIMED_WAITING。</p><p>waiting for monitor entry：进入区等待，状态为 BLOCKED。</p><p>waiting on condition：等待区等待、被 park。</p><p>sleeping：休眠的线程，调用了 Thread.sleep()。</p></blockquote><p><strong>Wait on condition</strong> 该状态出现在线程等待某个条件的发生。具体是什么原因，可以结合 stacktrace 来分析。</p><ul><li>最常见的情况就是线程处于 sleep 状态，等待被唤醒。</li><li>常见的情况还有等待网络 IO：在 java 引入 nio 之前，对于每个网络连接，都有一个对应的线程来处理网络的读写操作，即使没有可读写的数据，线程仍然阻塞在读写操作上，这样有可能造成资源浪费，而且给操作系统的线程调度也带来压力。在  NewIO 里采用了新的机制，编写的服务器程序的性能和可扩展性都得到提高。正等待网络读写，这可能是一个网络瓶颈的征兆。因为网络阻塞导致线程无法执行。<ul><li>一种情况是网络非常忙，几乎消耗了所有的带宽，仍然有大量数据等待网络读写；</li><li>另一种情况也可能是网络空闲，但由于路由等问题，导致包无法正常的到达。</li></ul></li></ul><p>所以要结合系统的一些性能观察工具来综合分析，比如 netstat 统计单位时间的发送包的数目，如果很明显超过了所在网络带宽的限制；观察 cpu 的利用率，如果系统态的 CPU 时间，相对于用户态的 CPU 时间比例较高；如果程序运行在 Solaris 10 平台上，可以用 dtrace 工具看系统调用的情况，如果观察到  read/write 的系统调用的次数或者运行时间遥遥领先；这些都指向由于网络带宽所限导致的网络瓶颈。</p><h2 id="线程-Dump-的分析"><a href="#线程-Dump-的分析" class="headerlink" title="线程 Dump 的分析"></a>线程 Dump 的分析</h2><h3 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h3><p>结合代码阅读的推理。需要线程 Dump 和源码的相互推到和印证。</p><p>造成 Bug 的根源往往会在调用栈上直接体现，一定要格外注意线程当前调用之前的所有调用。</p><h3 id="入手点"><a href="#入手点" class="headerlink" title="入手点"></a>入手点</h3><p><strong>进入区等待</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;d&amp;a-3588&quot;</span> daemon waiting <span class="keyword">for</span> monitor entry [<span class="number">0x000000006e5d5000</span>]</span><br><span class="line">java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class="line">at com.jiuqi.dna.bap.authority.service.UserService$LoginHandler.handle()</span><br><span class="line">- waiting to lock &lt;<span class="number">0x0000000602f38e90</span>&gt; (a java.lang.Object)</span><br><span class="line">at com.jiuqi.dna.bap.authority.service.UserService$LoginHandler.handle()</span><br></pre></td></tr></table></figure><p>线程状态 BLOCKED，线程动作 wait on monitor entry，调用修饰 waiting to lock 总是一起出现。表示在代码级别已经存在冲突的调用。必然有问题的代码，需要尽可能减少其发生。</p><p><strong>同步块阻塞</strong></p><p>一个线程锁住某对象,大量其他线程在该对象上等待。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;blocker&quot;</span> runnable</span><br><span class="line">java.lang.Thread.State: RUNNABLE</span><br><span class="line">at com.jiuqi.hcl.javadump.Blocker$<span class="number">1.</span>run(Blocker.java:<span class="number">23</span>)</span><br><span class="line">- locked &lt;<span class="number">0x00000000eb8eff68</span>&gt; (a java.lang.Object)</span><br><span class="line"><span class="string">&quot;blockee-11&quot;</span> waiting <span class="keyword">for</span> monitor entry</span><br><span class="line">java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class="line">at com.jiuqi.hcl.javadump.Blocker$<span class="number">2.</span>run(Blocker.java:<span class="number">41</span>)</span><br><span class="line">- waiting to lock &lt;<span class="number">0x00000000eb8eff68</span>&gt; (a java.lang.Object)</span><br><span class="line"><span class="string">&quot;blockee-86&quot;</span> waiting <span class="keyword">for</span> monitor entry</span><br><span class="line">java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class="line">at com.jiuqi.hcl.javadump.Blocker$<span class="number">2.</span>run(Blocker.java:<span class="number">41</span>)</span><br><span class="line">- waiting to lock &lt;<span class="number">0x00000000eb8eff68</span>&gt; (a java.lang.Object)</span><br></pre></td></tr></table></figure><p><strong>持续运行的IO</strong> </p><p>IO操作是会以 RUNNABLE 状态达成阻塞。例如：数据库死锁、网络读写。 格外注意对 IO 线程的真实状态的分析。一般来说，被捕捉到 RUNNABLE 的 IO 调用，都是有问题的。</p><p>以下堆栈显示： 线程状态为 RUNNABLE。 调用栈在 SocketInputStream 或 SocketImpl 上，socketRead0 等方法。 调用栈包含了 jdbc 相关的包。很可能发生了数据库死锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;d&amp;a-614&quot;</span> daemon prio=<span class="number">6</span> tid=<span class="number">0x0000000022f1f000</span> nid=<span class="number">0x37c8</span> runnable</span><br><span class="line">[<span class="number">0x0000000027cbd000</span>]</span><br><span class="line">java.lang.Thread.State: RUNNABLE</span><br><span class="line">at java.net.SocketInputStream.socketRead0(Native Method)</span><br><span class="line">at java.net.SocketInputStream.read(Unknown Source)</span><br><span class="line">at oracle.net.ns.Packet.receive(Packet.java:<span class="number">240</span>)</span><br><span class="line">at oracle.net.ns.DataPacket.receive(DataPacket.java:<span class="number">92</span>)</span><br><span class="line">at oracle.net.ns.NetInputStream.getNextPacket(NetInputStream.java:<span class="number">172</span>)</span><br><span class="line">at oracle.net.ns.NetInputStream.read(NetInputStream.java:<span class="number">117</span>)</span><br><span class="line">at oracle.jdbc.driver.T4CMAREngine.unmarshalUB1(T4CMAREngine.java:<span class="number">1034</span>)</span><br><span class="line">at oracle.jdbc.driver.T4C8Oall.receive(T4C8Oall.java:<span class="number">588</span>)</span><br></pre></td></tr></table></figure><p><strong>分线程调度的休眠</strong></p><p>正常的线程池等待</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;d&amp;a-131&quot;</span> in Object.wait()</span><br><span class="line">java.lang.Thread.State: TIMED_WAITING (on object monitor)</span><br><span class="line">at java.lang.Object.wait(Native Method)</span><br><span class="line">at com.jiuqi.dna.core.impl.WorkingManager.getWorkToDo(WorkingManager.java:<span class="number">322</span>)</span><br><span class="line">- locked &lt;<span class="number">0x0000000313f656f8</span>&gt; (a com.jiuqi.dna.core.impl.WorkingThread)</span><br><span class="line">at com.jiuqi.dna.core.impl.WorkingThread.run(WorkingThread.java:<span class="number">40</span>)</span><br></pre></td></tr></table></figure><p>可疑的线程等待</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;d&amp;a-121&quot;</span> in Object.wait()</span><br><span class="line">java.lang.Thread.State: WAITING (on object monitor)</span><br><span class="line">at java.lang.Object.wait(Native Method)</span><br><span class="line">at java.lang.Object.wait(Object.java:<span class="number">485</span>)</span><br><span class="line">at com.jiuqi.dna.core.impl.AcquirableAccessor.exclusive()</span><br><span class="line">- locked &lt;<span class="number">0x00000003011678d8</span>&gt; (a com.jiuqi.dna.core.impl.CacheGroup)</span><br><span class="line">at com.jiuqi.dna.core.impl.Transaction.lock()</span><br></pre></td></tr></table></figure><h3 id="入手点总结"><a href="#入手点总结" class="headerlink" title="入手点总结"></a><strong>入手点总结</strong></h3><p><strong>wait on monitor entry</strong>： 被阻塞的，肯定有问题</p><p><strong>runnable</strong>： 注意 IO 线程</p><p>**in Object.wait()**： 注意非线程池等待</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>想要学习一个命令，先来看看帮助，使用 <code>jstack -help</code> 查看帮助：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">pudding<span class="meta">@DESKTOP</span>-1QCHCU4:~$ jstack -help</span><br><span class="line">Usage:</span><br><span class="line">    jstack [-l] &lt;pid&gt;</span><br><span class="line">        (to connect to running process)</span><br><span class="line">    jstack -F [-m] [-l] &lt;pid&gt;</span><br><span class="line">        (to connect to a hung process)</span><br><span class="line">    jstack [-m] [-l] &lt;executable&gt; &lt;core&gt;</span><br><span class="line">        (to connect to a core file)</span><br><span class="line">    jstack [-m] [-l] [server_id@]&lt;remote server IP or hostname&gt;</span><br><span class="line">        (to connect to a remote debug server)</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">    -F  to force a thread dump. Use <span class="keyword">when</span> jstack &lt;pid&gt; does not <span class="title function_">respond</span> <span class="params">(process is hung)</span></span><br><span class="line">    -m  to print both java and <span class="keyword">native</span> <span class="title function_">frames</span> <span class="params">(mixed mode)</span></span><br><span class="line">    -l  <span class="type">long</span> listing. Prints additional information about locks</span><br><span class="line">    -h or -help to print <span class="built_in">this</span> help message</span><br></pre></td></tr></table></figure><ul><li>-F：当 ’jstack [-l] pid’ 没有相应的时候强制打印栈信息</li><li>-l：长列表。打印关于锁的附加信息，例如属于 java.util.concurrent 的 ownable synchronizers 列表</li><li>-m：打印 java 和 native c/c++ 框架的所有栈信息</li><li>-h：-help 打印帮助信息</li><li>pid：需要被打印配置信息的 java 进程 id，可以用 jps 查询</li></ul><p>首先，我们分析这么一段程序的线程情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> pudding</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JStackDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">//Do Nothing</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先是有 jps 查看进程号：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pudding<span class="meta">@DESKTOP</span>-1QCHCU4:/mnt/wsl$ jps</span><br><span class="line"><span class="number">929</span> org.eclipse.equinox.launcher_1<span class="number">.6</span><span class="number">.800</span>.v20240513-<span class="number">1750.</span>jar</span><br><span class="line"><span class="number">1477</span> sun.tools.jcmd.JCmd</span><br><span class="line"><span class="number">1499</span> Jps</span><br><span class="line"><span class="number">1372</span> JStackDemo1</span><br></pre></td></tr></table></figure><p>然后使用 jstack 查看堆栈信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pudding<span class="meta">@DESKTOP</span>-1QCHCU4:/mnt/wsl$ jstack <span class="number">1372</span></span><br><span class="line"><span class="number">2024</span>-<span class="number">06</span>-<span class="number">26</span> <span class="number">21</span>:<span class="number">41</span>:<span class="number">40</span></span><br><span class="line">Full thread dump OpenJDK <span class="number">64</span>-Bit Server <span class="title function_">VM</span> <span class="params">(<span class="number">25.412</span>-b08 mixed mode)</span>:</span><br><span class="line">...此处省略若干内容...</span><br><span class="line"><span class="string">&quot;main&quot;</span> #<span class="number">1</span> prio=<span class="number">5</span> os_prio=<span class="number">0</span> tid=<span class="number">0x00007fc86c00a800</span> nid=<span class="number">0x55d</span> runnable [<span class="number">0x00007fc873672000</span>]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line">        at JStackDemo1.main(JStackDemo1.java:<span class="number">7</span>)</span><br></pre></td></tr></table></figure><p>我们可以从这段堆栈信息中看出什么来呢？我们可以看到，当前一共有一条用户级别线程，线程处于 runnable 状态，执行到 <a href="/img/2024-06-30-Jstack/http://JStackDemo1.java">JStackDemo1.java</a> 的第七行。 看下面代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> pudding</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JStackDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Thread1</span>());</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Thread1</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程堆栈信息如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;Reference Handler&quot;</span> daemon prio=<span class="number">10</span> tid=<span class="number">0x00007fbbcc06e000</span> nid=<span class="number">0x286c</span> in Object.wait() [<span class="number">0x00007fbbc8dfc000</span>]</span><br><span class="line">   java.lang.Thread.State: WAITING (on object monitor)</span><br><span class="line">    at java.lang.Object.wait(Native Method)</span><br><span class="line">    - waiting on &lt;<span class="number">0x0000000783e066e0</span>&gt; (a java.lang.ref.Reference$Lock)</span><br><span class="line">    at java.lang.Object.wait(Object.java:<span class="number">503</span>)</span><br><span class="line">    at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:<span class="number">133</span>)</span><br><span class="line">    - locked &lt;<span class="number">0x0000000783e066e0</span>&gt; (a java.lang.ref.Reference$Lock)</span><br></pre></td></tr></table></figure><p>我们能看到：</p><blockquote><p>线程的状态： WAITING 线程的调用栈<br>线程的当前锁住的资源： &lt;0x0000000783e066e0&gt;<br>线程当前等待的资源：&lt;0x0000000783e066e0&gt;</p></blockquote><p>为什么同时锁住的等待同一个资源：</p><blockquote><p>线程的执行中，先获得了这个对象的 Monitor（对应于 locked &lt;0x0000000783e066e0&gt;）。当执行到 obj.wait()，线程即放弃了 Monitor 的所有权，进入 “wait set” 队列（对应于 waiting on &lt;0x0000000783e066e0&gt; ）。</p></blockquote><h3 id="死锁分析"><a href="#死锁分析" class="headerlink" title="死锁分析"></a><strong>死锁分析</strong></h3><p>学会了怎么使用 jstack 命令之后，我们就可以看看，如何使用 jstack 分析死锁了，这也是我们一定要掌握的内容。 <strong>啥叫死锁？</strong> 所谓<a href="/img/2024-06-30-Jstack/http://zh.wikipedia.org/wiki/%E6%AD%BB%E9%94%81">死锁</a>： 是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。 </p><p>说白了，我现在想吃鸡蛋灌饼，桌子上放着鸡蛋和饼，但是我和我的朋友同时分别拿起了鸡蛋和病，我手里拿着鸡蛋，但是我需要他手里的饼。他手里拿着饼，但是他想要我手里的鸡蛋。就这样，如果不能同时拿到鸡蛋和饼，那我们就不能继续做后面的工作（做鸡蛋灌饼）。所以，这就造成了死锁。 <strong>看一段死锁的程序：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> pudding</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JStackDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">DeadLockclass</span>(<span class="literal">true</span>));</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">DeadLockclass</span>(<span class="literal">false</span>));</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DeadLockclass</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> falg;</span><br><span class="line">    DeadLockclass(<span class="type">boolean</span> falg) &#123;</span><br><span class="line">        <span class="built_in">this</span>.falg = falg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 如果falg的值为true则调用t1线程</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (falg) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (Suo.o1) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;o1 &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">                    <span class="keyword">synchronized</span> (Suo.o2) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;o2 &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 如果falg的值为false则调用t2线程</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (Suo.o2) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;o2 &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">                    <span class="keyword">synchronized</span> (Suo.o1) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;o1 &quot;</span> + Thread.currentThread().getName());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Suo</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">o2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我启动该程序时，我们看一下控制台：</p><p><img src="/img/2024-06-30-Jstack/Untitled1.png" alt="控制台"></p><p>我们发现，程序只输出了两行内容，然后程序就不再打印其它的东西了，但是程序并没有停止。这样就产生了死锁。 当线程 1 使用 <code>synchronized</code> 锁住了 o1 的同时，线程 2 也是用 <code>synchronized</code> 锁住了 o2。当两个线程都执行完第一个打印任务的时候，线程 1 想锁住 o2，线程 2 想锁住 o1。但是，线程 1 当前锁着 o1，线程 2 锁着 o2。所以两个想成都无法继续执行下去，就造成了死锁。<br>然后，我们使用 <strong>jstack 来看一下线程堆栈信息</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Found one Java-level deadlock:</span><br><span class="line">=============================</span><br><span class="line"><span class="string">&quot;Thread-1&quot;</span>:</span><br><span class="line">  waiting to lock monitor <span class="number">0x00007f6274003ac8</span> (object <span class="number">0x000000077e004ec0</span>, a java.lang.Object),</span><br><span class="line">  which is held by <span class="string">&quot;Thread-0&quot;</span></span><br><span class="line"><span class="string">&quot;Thread-0&quot;</span>:</span><br><span class="line">  waiting to lock monitor <span class="number">0x00007f62740050c8</span> (object <span class="number">0x000000077e004ed0</span>, a java.lang.Object),</span><br><span class="line">  which is held by <span class="string">&quot;Thread-1&quot;</span></span><br><span class="line"></span><br><span class="line">Java stack information <span class="keyword">for</span> the threads listed above:</span><br><span class="line">===================================================</span><br><span class="line"><span class="string">&quot;Thread-1&quot;</span>:</span><br><span class="line">        at DeadLockclass.run(JStackDemo.java:<span class="number">40</span>)</span><br><span class="line">        - waiting to lock &lt;<span class="number">0x000000077e004ec0</span>&gt; (a java.lang.Object)</span><br><span class="line">        - locked &lt;<span class="number">0x000000077e004ed0</span>&gt; (a java.lang.Object)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:<span class="number">750</span>)</span><br><span class="line"><span class="string">&quot;Thread-0&quot;</span>:</span><br><span class="line">        at DeadLockclass.run(JStackDemo.java:<span class="number">27</span>)</span><br><span class="line">        - waiting to lock &lt;<span class="number">0x000000077e004ed0</span>&gt; (a java.lang.Object)</span><br><span class="line">        - locked &lt;<span class="number">0x000000077e004ec0</span>&gt; (a java.lang.Object)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:<span class="number">750</span>)</span><br><span class="line"></span><br><span class="line">Found <span class="number">1</span> deadlock.</span><br></pre></td></tr></table></figure><p>哈哈，堆栈写的很明显，它告诉我们 <code>Found one Java-level deadlock</code>，然后指出造成死锁的两个线程的内容。然后，又通过 <code>Java stack information for the threads listed above</code>来显示更详细的死锁的信息。 他说</p><blockquote><p>Thread-1 在想要执行第 40 行的时候，当前锁住了资源 <code>&lt;0x00000007d6aa2ca8&gt;</code>，但是他在等待资源 <code>&lt;0x00000007d6aa2c98&gt;</code> ；<br>Thread-0 在想要执行第 27 行的时候，当前锁住了资源 <code>&lt;0x00000007d6aa2c98&gt;</code>，但是他在等待资源<code>&lt;0x00000007d6aa2ca8&gt;</code> ；<br>由于这两个线程都持有资源，并且都需要对方的资源，所以造成了死锁。 原因我们找到了，就可以具体问题具体分析，解决这个死锁了。</p></blockquote><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a><strong>其他</strong></h3><p><strong>虚拟机执行 Full GC 时，会阻塞所有的用户线程。因此，即时获取到同步锁的线程也有可能被阻塞。</strong> 在查看线程 Dump 时，首先查看内存使用情况</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;jstack 是 java 虚拟机自带的一种堆栈跟踪工具&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;功能&quot;&gt;&lt;a href=&quot;#功能&quot; class=&quot;headerlink&quot; title=&quot;功能&quot;&gt;&lt;/a&gt;功能&lt;/h2&gt;&lt;p&gt;jstack </summary>
      
    
    
    
    
    <category term="性能测试" scheme="https://wu3227834.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    <category term="Java" scheme="https://wu3227834.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java命令学习系列—Jstat</title>
    <link href="https://wu3227834.github.io/2024/06/30/2024-06-30-java-ming-ling-xue-xi-xi-lie-jstat/"/>
    <id>https://wu3227834.github.io/2024/06/30/2024-06-30-java-ming-ling-xue-xi-xi-lie-jstat/</id>
    <published>2024-06-30T00:00:00.000Z</published>
    <updated>2025-05-29T10:13:18.874Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>jstat (JVM Statistics Monitoring Tool) 用于监控虚拟机各种运行状态信息的命令行工具。它可以显示本地或远程虚拟机进程中类加载、内存、垃圾收集、JIT 编译等运行数据，再没有 GUI 图形的服务器上，它是运行期间定位虚拟机性能问题首选工具。</p></blockquote><p>jstat 位于 java 的 bin 目录下，主要利用 JVM 内建的指令对 Java 应用程序的资源和性能进行实施的命令行的监控，包括了对 Heap size 和垃圾回收状况的监控。可见，Jstat 是轻量级的、专门针对 JVM 的工具，非常适用。</p><h2 id="jstat-命令格式"><a href="#jstat-命令格式" class="headerlink" title="jstat 命令格式"></a>jstat 命令格式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstat -&lt;option&gt; [-t] [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]</span><br></pre></td></tr></table></figure><h3 id="参数解释："><a href="#参数解释：" class="headerlink" title="参数解释："></a><strong>参数解释：</strong></h3><ul><li>Option — 选项，我们一般使用 -gcutil 查看 gc 情况</li><li>vmid — VM的进程号，即当前运行的java进程号</li><li>interval– 间隔时间，单位为秒或者毫秒</li><li>count — 打印次数，如果缺省则打印无数次</li><li>参数 interval 和 count 代表查询间隔和次数，如果省略这两个参数，说明只查询一次。假设需要每 250 毫秒查询一次进程 5828 垃圾收集状况，一共查询 5 次，那命令行如下：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstat -gc 5828 250 5</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">对于命令格式中的 VMID 与 LVMID 需要特别说明下：</span><br><span class="line">如果是本地虚拟机进程，VMID(Virtual Machine IDentifier,虚机标识符) 和 LVMID(Local Virtual Machine IDentifier，虚机标识符) 是一致的；</span><br><span class="line">如果是远程虚拟机进程，那 VMID 的格式应当是：[protocol:][//] lvmid [@hostname[:port]/servername]</span><br></pre></td></tr></table></figure><h3 id="option"><a href="#option" class="headerlink" title="option"></a><strong>option</strong></h3><p>选项 option 代表这用户希望查询的虚拟机信息，主要分为 3 类：类装载、垃圾收集和运行期编译状况，具体选项及作用如下：</p><ul><li><code>class</code> 监视类装载、卸载数量、总空间及类装载所耗费的时间</li><li><code>gc</code> 监视 Java 堆状况，包括 Eden 区、2 个Survivor区、老年代、永久代等的容量</li><li><code>gccapacity</code> 监视内容与 -gc 基本相同，但输出主要关注 Java 堆各个区域使用到的最大和最小空间</li><li><code>gcutil</code> 监视内容与 -gc 基本相同，但输出主要关注已使用空间占总空间的百分比</li><li><code>gccause</code> 与 -gcutil 功能一样，但是会额外输出导致上一次 GC 产生的原因</li><li><code>gcnew</code> 监视新生代 GC 的状况</li><li><code>gcnewcapacity</code>监视内容与 -gcnew 基本相同，输出主要关注使用到的最大和最小空间</li><li><code>gcold</code> 监视老年代 GC 的状况</li><li><code>gcoldcapacity</code> 监视内容与 -gcold 基本相同，输出主要关注使用到的最大和最小空间</li><li><code>gcpermcapacity</code> 输出永久代使用到的最大和最小空间</li><li><code>compiler</code> 输出 JIT 编译器编译过的方法、耗时等信息</li><li><code>printcompilation</code> 输出已经被 JIT 编译的方法</li></ul><h2 id="常见术语"><a href="#常见术语" class="headerlink" title="常见术语"></a><strong>常见术语</strong></h2><p><strong>1、<code>jstat –class&lt;pid&gt; :</code> 显示加载 class 的数量，及所占空间等信息。</strong></p><blockquote><p><code>Loaded</code> 装载的类的数量<br><code>Bytes</code> 装载类所占用的字节数 <br><code>Unloaded</code> 卸载类的数量 <br><code>Bytes</code> 卸载类的字节数 <br><code>Time</code> 装载和卸载类所花费的时间</p></blockquote><p><strong>2、<code>jstat -compiler &lt;pid&gt;</code>显示 VM 实时编译的数量等信息。</strong></p><blockquote><p><code>Compiled</code> 编译任务执行数量 <br><code>Failed</code> 编译任务执行失败数量 <br><code>Invalid</code> 编译任务执行失效数量 <br><code>Time</code> 编译任务消耗时间 <br><code>FailedType</code> 最后一个编译失败任务的类型 <br><code>FailedMethod</code> 最后一个编译失败任务所在的类及方法</p></blockquote><p><strong>3、<code>jstat -gc &lt;pid&gt;</code>: 可以显示 gc 的信息，查看 gc 的次数，及时间。</strong></p><blockquote><p><code>S0C</code> 年轻代中第一个 survivor（幸存区）的容量 （字节）<br><code>S1C</code> 年轻代中第二个 survivor（幸存区）的容量 （字节）<br><code>S0U</code> 年轻代中第一个 survivor（幸存区）目前已使用空间（字节）<br><code>S1U</code> 年轻代中第二个 survivor（幸存区）目前已使用空间（字节）<br><code>EC</code> 年轻代中 Eden（伊甸园）的容量（字节）<br><code>EU</code> 年轻代中 Eden（伊甸园）目前已使用空间（字节）<br><code>OC</code> Old 代的容量（字节）<br><code>OU</code> Old 代目前已使用空间（字节）<br><code>PC</code> Perm（持久代）的容量（字节） <br><code>PU</code> Perm（持久代）目前已使用空间（字节）<br><code>YGC</code> 从应用程序启动到采样时年轻代中 gc 次数<br><code>YGCT</code> 从应用程序启动到采样时年轻代中 gc 所用时间（s）<br><code>FGC</code> 从应用程序启动到采样时 old 代（全 gc）gc 次数<br><code>FGCT</code> 从应用程序启动到采样时 old 代（全 gc）gc 所用时间（s）<br><code>GCT</code> 从应用程序启动到采样时 gc 用的总时间（s）</p></blockquote><p><strong>4、<code>jstat -gccapacity &lt;pid&gt;:</code>可以显示，VM内存中三代（young,old,perm）对象的使用和占用大小</strong></p><blockquote><p><code>NGCMN</code> 年轻代（young）中初始化（最小）的大小（字节） <br><code>NGCMX</code> 年轻代（young）的最大容量（字节）<br><code>NGC</code> 年轻代（young）中当前的容量（字节）<br><code>S0C</code> 年轻代中第一个 survivor（幸存区）的容量（字节） <br><code>S1C</code> 年轻代中第二个 survivor（幸存区）的容量（字节） <br><code>EC</code> 年轻代中 Eden（伊甸园）的容量（字节） <br><code>OGCMN</code> old 代中初始化（最小）的大小（字节）<br><code>OGCMX</code> old 代的最大容量（字节）<br><code>OGC</code> old代当前新生成的容量（字节）<br><code>OC</code> Old代的容量 （字节） <br><code>PGCMN</code> perm 代中初始化（最小）的大小 （字节） <br><code>PGCMX</code> perm 代的最大容量（字节）<br><code>PGC</code> perm 代当前新生成的容量（字节） <br><code>PC</code> Perm（持久代）的容量（字节） <br><code>YGC</code> 从应用程序启动到采样时年轻代中 gc 次数 <br><code>FGC</code> 从应用程序启动到采样时 old 代（全gc）gc 次数</p></blockquote><p><strong>5、<code>jstat -gcutil &lt;pid&gt;</code>:统计gc信息</strong></p><blockquote><p><code>S0</code> 年轻代中第一个 survivor（幸存区）已使用的占当前容量百分比<br><code>S1</code> 年轻代中第二个 survivor（幸存区）已使用的占当前容量百分比<br><code>E</code> 年轻代中 Eden（伊甸园）已使用的占当前容量百分比<br><code>O</code> old 代已使用的占当前容量百分比 <br><code>P</code> perm 代已使用的占当前容量百分比 <br><code>YGC</code> 从应用程序启动到采样时年轻代中 gc 次数 <br><code>YGCT</code> 从应用程序启动到采样时年轻代中 gc 所用时间（s）<br><code>FGC</code> 从应用程序启动到采样时 old 代（全 gc）gc 次数 <br><code>FGCT</code> 从应用程序启动到采样时 old 代（全 gc）gc 所用时间（s） <br><code>GCT</code> 从应用程序启动到采样时 gc 用的总时间（s）</p></blockquote><p><strong>6、<code>jstat -gcnew &lt;pid&gt;</code>:年轻代对象的信息。</strong></p><blockquote><p><code>S0C</code> 年轻代中第一个survivor（幸存区）的容量（字节）<br><code>S1C</code> 年轻代中第二个survivor（幸存区）的容量（字节）<br><code>S0U</code> 年轻代中第一个survivor（幸存区）目前已使用空间（字节）<br><code>S1U</code> 年轻代中第二个survivor（幸存区）目前已使用空间（字节）<br><code>TT</code> 持有次数限制<br><code>MTT</code> 最大持有次数限制<br><code>EC</code> 年轻代中 Eden（伊甸园）的容量（字节）<br><code>EU</code> 年轻代中 Eden（伊甸园）目前已使用空间（字节）<br><code>YGC</code> 从应用程序启动到采样时年轻代中 gc 次数<br><code>YGCT</code> 从应用程序启动到采样时年轻代中 gc 所用时间（s）</p></blockquote><p><strong>7、<code>jstat -gcnewcapacity&lt;pid&gt;</code>: 年轻代对象的信息及其占用量。</strong></p><blockquote><p><code>NGCMN</code> 年轻代（young）中初始化（最小）的大小（字节）<br><code>NGCMX</code> 年轻代（young）的最大容量（字节）<br><code>NGC</code> 年轻代（young）中当前的容量（字节）<br><code>S0CMX</code> 年轻代中第一个 survivor（幸存区）的最大容量（字节）<br><code>S0C</code> 年轻代中第一个 survivor（幸存区）的容量（字节）<br><code>S1CMX</code> 年轻代中第二个 survivor（幸存区）的最大容量（字节）<br><code>S1C</code> 年轻代中第二个 survivor（幸存区）的容量（字节）<br><code>ECMX</code> 年轻代中 Eden（伊甸园）的最大容量（字节）<br><code>EC</code> 年轻代中 Eden（伊甸园）的容量（字节）<br><code>YGC</code> 从应用程序启动到采样时年轻代中 gc 次数<br><code>FGC</code> 从应用程序启动到采样时 old 代（全 gc）gc 次数</p></blockquote><p><strong>8、<code>jstat -gcold &lt;pid&gt;：</code>old代对象的信息。</strong></p><blockquote><p><code>PC</code> Perm（持久代）的容量 （字节） <br><code>PU</code> Perm（持久代）目前已使用空间 （字节） <br><code>OC</code> Old代的容量 （字节） OU Old 代目前已使用空间 （字节） <br><code>YGC</code> 从应用程序启动到采样时年轻代中 gc 次数 <br><code>FGC</code> 从应用程序启动到采样时 old 代（全gc）gc 次数 <br><code>FGCT</code> 从应用程序启动到采样时 old 代（全gc）gc 所用时间（s） <br><code>GCT</code> 从应用程序启动到采样时 gc 用的总时间（s）</p></blockquote><p><strong>9、<code>stat -gcoldcapacity &lt;pid&gt;</code>: old代对象的信息及其占用量。</strong></p><blockquote><p><code>OGCMN</code> old 代中初始化（最小）的大小 （字节）<br><code>OGCMX</code> old 代的最大容量（字节）<br><code>OGC</code> old 代当前新生成的容量 （字节）<br><code>OC</code> Old 代的容量 （字节）<br><code>YGC</code> 从应用程序启动到采样时年轻代中 gc 次数<br><code>FGC</code> 从应用程序启动到采样时 old 代（全gc）gc 次数<br><code>FGCT</code> 从应用程序启动到采样时 old 代（全gc）gc 所用时间（s）<br><code>GCT</code> 从应用程序启动到采样时 gc 用的总时间（s）</p></blockquote><p><strong>10、<code>jstat -gcpermcapacity&lt;pid&gt;</code>: perm对象的信息及其占用量。</strong></p><blockquote><p><code>PGCMN</code> perm代中初始化（最小）的大小 （字节）<br><code>PGCMX</code> perm代的最大容量 （字节）<br><code>PGC</code> perm代当前新生成的容量 （字节）<br><code>PC</code> Perm（持久代）的容量 （字节）<br><code>YGC</code> 从应用程序启动到采样时年轻代中 gc 次数<br><code>FGC</code> 从应用程序启动到采样时 old 代（全gc）gc 次数<br><code>FGCT</code> 从应用程序启动到采样时 old 代（全gc）gc 所用时间（s）<br><code>GCT</code> 从应用程序启动到采样时 gc 用的总时间（s）</p></blockquote><p><strong>11、<code>jstat -printcompilation &lt;pid&gt;</code>：当前VM执行的信息。</strong></p><blockquote><p><code>Compiled</code> 编译任务的数目<br><code>Size</code> 方法生成的字节码的大小<br><code>Type</code> 编译类型<br><code>Method</code> 类名和方法名用来标识编译的方法。<br>类名使用/做为一个命名空间分隔符。方法名是给定类中的方法。上述格式是由-XX:+PrintComplation选项进行设置的</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;jstat (JVM Statistics Monitoring Tool) 用于监控虚拟机各种运行状态信息的命令行工具。它可以显示本地或远程虚拟机进程中类加载、内存、垃圾收集、JIT 编译等运行数据，再没有 GUI 图形的服务器上，它是运行期间定</summary>
      
    
    
    
    
    <category term="性能测试" scheme="https://wu3227834.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    <category term="Java" scheme="https://wu3227834.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java开发必须掌握的线上问题排查命令</title>
    <link href="https://wu3227834.github.io/2024/06/30/2024-06-30-java-kai-fa-bi-xu-zhang-wo-de-xian-shang-wen-ti-pai-cha-ming-ling/"/>
    <id>https://wu3227834.github.io/2024/06/30/2024-06-30-java-kai-fa-bi-xu-zhang-wo-de-xian-shang-wen-ti-pai-cha-ming-ling/</id>
    <published>2024-06-30T00:00:00.000Z</published>
    <updated>2025-05-29T10:13:18.874Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个合格的开发人员，不仅要能写得一手代码，还要有一项很重要的技能就是排查问题。这里提到的排查问题不仅仅是在 coding 的过程中 debug 等，还包括的就是线上问题的排查。由于在生成环境中，一般没办法 debug（其实有些问题，debug 也白扯…），所以我们需要借助一些常见命令来查看运行时的具体情况，这些运行时信息包括但不限于运行日志、异常堆栈、堆使用情况、GC情况、JVM参数情况、线程情况等。</p><p>给一个系统定位问题的时候，知识、经验是关键，数据是依据，工具是运用知识处理数据的手段。为了便于我们排查和解决问题，Sun 公司为我们提供了一些常用命令。这些命令一般都是 jdk/lib/tools.jar 中类库的一层薄包装。随着 JVM 的安装一起被安装到机器中，在 bin 目录中。下面就来认识一下这些命令以及具体使用方式。</p><h2 id="JPS"><a href="#JPS" class="headerlink" title="JPS"></a>JPS</h2><p><strong>功能：</strong>显示当前所有 java 进程 pid 的命令。</p><p><strong>常见指令：</strong></p><p><code>jps</code>：显示当前用户的所有java进程的PID</p><p><code>jps -v 3331</code>：显示虚拟机参数</p><p><code>jps -m 3331</code>：显示传递给 main() 函数的参数</p><p><code>jps -l 3331</code>：显示主类的全路径</p><h2 id="jinfo"><a href="#jinfo" class="headerlink" title="jinfo"></a>jinfo</h2><p><strong>功能：</strong>实时查看和调整虚拟机参数，可以显示未被显示指定的参数的默认值（jps  -v 则不能）</p><blockquote><p>jdk8 中已经不支持该命令</p></blockquote><p><strong>常用指令：</strong></p><p><code>jinfo -flag CMSIniniatingOccupancyFration 1444</code>：查询 CMSIniniatingOccupancyFration 参数值</p><h2 id="jstat"><a href="#jstat" class="headerlink" title="jstat"></a>jstat</h2><p><strong>功能：</strong>显示进程中的类加载、内存、垃圾收集、JIT 编译等运行数据。</p><p><strong>常用指令：</strong></p><p><code>jstat -gc 3331 250 20</code> ：查询进程2764的垃圾收集情况，每250毫秒查询一次，一共查询20次。</p><p><code>jstat -gccause</code>：额外输出上次GC原因</p><p><code>jstat -calss</code>：件事类装载、类卸载、总空间以及所消耗的时间</p><h2 id="jmap"><a href="#jmap" class="headerlink" title="jmap"></a>jmap</h2><p><strong>功能：</strong>生成堆准储快照（heapdump）</p><p><strong>常用指令：</strong></p><p><code>jmap -heap 3331</code>：查看java 堆（heap）使用情况</p><p><code>jmap -histo 3331</code>：查看堆内存（histogram）中的对象数量及大小</p><p><code>jmap -histo:live 3331</code>：JVM 会先触发 gc，然后再统计信息</p><p><code>jmap -dump:format=b,file=heapDump 3331</code>：将内存使用的详细情况输出到文件，之后一般使用其他工具进行分析。</p><h2 id="jhat"><a href="#jhat" class="headerlink" title="jhat"></a><strong>jhat</strong></h2><p><strong>功能：</strong>一般与 jmap 搭配使用，用来分析 jmap 生成的堆转储文件。</p><blockquote><p>由于有很多可视化工具（Eclipse Memory Analyzer 、IBM HeapAnalyzer）可以替代，所以很少用。不过在没有可视化工具的机器上也是可用的。</p></blockquote><p><strong>常用指令：</strong></p><p><code>jmap -dump:format=b,file=heapDump 3331</code> + <code>jhat heapDump</code>：解析 Java 堆转储文件，并启动一个 web server</p><h2 id="jstack"><a href="#jstack" class="headerlink" title="jstack"></a><strong>jstack</strong></h2><p><strong>功能：</strong>生成当前时刻的线程快照。</p><p><strong>常用指令：</strong></p><p><code>jstack 3331</code>：查看线程情况</p><p><code>jstack -F 3331</code>：正常输出不被响应时，使用该指令</p><p><code>jstack -l 3331</code>：除堆栈外，显示关于锁的附件信息</p><h1 id="常见问题定位过程"><a href="#常见问题定位过程" class="headerlink" title="常见问题定位过程"></a>常见问题定位过程</h1><h2 id="频繁-GC-问题或内存溢出问题"><a href="#频繁-GC-问题或内存溢出问题" class="headerlink" title="频繁 GC 问题或内存溢出问题"></a>频繁 GC 问题或内存溢出问题</h2><ol><li>使用 <code>jps</code> 查看线程 ID</li><li>使用 <code>jstat -gc xxx 250 20</code> 查看 gc 情况，一般比较关注 PERM 区的情况，查看 GC 的增长情况。</li><li>使用 <code>jstat -gccause</code> 额外输出上次 GC 原因</li><li>使用 <code>jmap -dump:format=b,file=heapDump xxx</code>  生成堆转储文件</li><li>使用 jhat 或者可视化工具（Eclipse Memory Analyzer 、IBM HeapAnalyzer）分析堆情况。</li><li>结合代码解决内存溢出或泄露问题。</li></ol><h2 id="死锁问题"><a href="#死锁问题" class="headerlink" title="死锁问题"></a><strong>死锁问题</strong></h2><ol><li>使用<code>jps</code>查看线程 ID，转换为 16 进制 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf %x 线程号</span><br></pre></td></tr></table></figure></li><li>使用<code>jstack xxx</code>：查看线程情况</li></ol><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a><strong>结语</strong></h1><p>经常使用适当的虚拟机监控和分析工具可以加快我们分析数据、定位解决问题的速度，但也要知道，工具永远都是知识技能的一层包装，没有什么工具是包治百病的。</p><p><a href="https://wu3227834.github.io/2024/06/29/2026-06-30-java-ming-ling-xue-xi-xi-lie-yi-jps/"><strong>Java命令学习系列（一）— Jps</strong></a></p><p><a href="https://wu3227834.github.io/2024/06/29/2026-06-30-java-ming-ling-xue-xi-xi-lie-er-jstack/"><strong>Java命令学习系列（二）— Jstack</strong></a></p><p><a href="https://wu3227834.github.io/2024/06/29/2026-06-30-java-ming-ling-xue-xi-xi-lie-san-jmap/"><strong>Java命令学习系列（三）— Jmap</strong></a></p><p><a href="https://wu3227834.github.io/2024/06/29/2026-06-30-java-ming-ling-xue-xi-xi-lie-si-jstat/"><strong>Java命令学习系列（四）— Jstat</strong></a></p><p><a href="https://www.notion.so/Java-Jhat-e4da5c23fe34484093bcd8607fd14d07?pvs=21"><strong>Java命令学习系列（五）— Jhat</strong></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;作为一个合格的开发人员，不仅要能写得一手代码，还要有一项很重要的技能就是排查问题。这里提到的排查问题不仅仅是在 coding 的过程中 debug 等，还包括的就是线上问题的排查。由于在生成环境中，一般没办法 debug（其实有些问题，debug 也白扯…），所以我们需要借</summary>
      
    
    
    
    
    <category term="性能测试" scheme="https://wu3227834.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    <category term="Java" scheme="https://wu3227834.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java命令学习系列—Jmap</title>
    <link href="https://wu3227834.github.io/2024/06/30/2024-06-30-java-ming-ling-xue-xi-xi-lie-jmap/"/>
    <id>https://wu3227834.github.io/2024/06/30/2024-06-30-java-ming-ling-xue-xi-xi-lie-jmap/</id>
    <published>2024-06-30T00:00:00.000Z</published>
    <updated>2025-05-29T10:13:18.874Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>jmap 是 JDK 自带的工具软件，主要用于打印指定 Java 进程（或核心文件、远程调试服务器）的共享对象内存映射或堆内存细节。可以使用 jmap 生成 Heap Dump。</p></blockquote><h2 id="什么是堆-dump"><a href="#什么是堆-dump" class="headerlink" title="什么是堆 dump"></a>什么是堆 dump</h2><p>堆 dump 是反应 Java 堆使用情况的内存镜像，其中主要包括<strong>系统信息、虚拟机信息、完整的线程 dump、所有类和对象的状态</strong>等。一般，在内存不足、GC 异常等情况下，我们怀疑有内存泄漏。这个时候我们就可以制作堆 Dump 来查看具体情况，分析原因。</p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>《Java虚拟机的内存组成以及堆内存介绍》《Java GC工作原理》常见内存错误：</p><blockquote><p>outOfMemoryError：年老代内存不足</p><p>outOfMemoryError:PermGen Space：永久代内存不足</p><p>outOfMemoryError:GC overhead limit exceed：垃圾回收时间占用系统运行时间的 98% 或以上</p></blockquote><h2 id="jmap"><a href="#jmap" class="headerlink" title="jmap"></a>jmap</h2><h3 id="用法摘要"><a href="#用法摘要" class="headerlink" title="用法摘要"></a>用法摘要</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Usage:</span><br><span class="line">    jmap [option] &lt;pid&gt;</span><br><span class="line">        (to connect to running process)</span><br><span class="line">    jmap [option] &lt;executable &lt;core&gt;</span><br><span class="line">        (to connect to a core file)</span><br><span class="line">    jmap [option] [server_id@]&lt;remote server IP or hostname&gt;</span><br><span class="line">        (to connect to remote debug server)</span><br><span class="line"></span><br><span class="line">where &lt;option&gt; is one of:</span><br><span class="line">    &lt;none&gt;               to print same info as Solaris pmap</span><br><span class="line">    -heap                to print java heap summary</span><br><span class="line">    -histo[:live]        to print histogram of java object heap; <span class="keyword">if</span> the <span class="string">&quot;live&quot;</span></span><br><span class="line">                         suboption is specified, only count live objects</span><br><span class="line">    -permstat            to print permanent generation statistics</span><br><span class="line">    -finalizerinfo       to print information on objects awaiting finalization</span><br><span class="line">    -dump:&lt;dump-options&gt; to dump java heap in hprof binary format</span><br><span class="line">                         dump-options:</span><br><span class="line">                           live         dump only live objects; <span class="keyword">if</span> not specified,</span><br><span class="line">                                        all objects in the heap are dumped.</span><br><span class="line">                           format=b     binary format</span><br><span class="line">                           file=&lt;file&gt;  dump heap to &lt;file&gt;</span><br><span class="line">                         Example: jmap -dump:live,format=b,file=heap.bin &lt;pid&gt;</span><br><span class="line">    -F                   force. Use with -dump:&lt;dump-options&gt; &lt;pid&gt; or -histo</span><br><span class="line">                         to force a heap dump or histogram <span class="keyword">when</span> &lt;pid&gt; does not</span><br><span class="line">                         respond. The <span class="string">&quot;live&quot;</span> suboption is not supported</span><br><span class="line">                         in <span class="built_in">this</span> mode.</span><br><span class="line">    -h | -help           to print <span class="built_in">this</span> help message</span><br><span class="line">    -J&lt;flag&gt;             to pass &lt;flag&gt; directly to the runtime system</span><br></pre></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p><strong>option</strong>：选项参数是互斥的(不可同时使用)。想要使用选项参数，直接跟在命令名称后即可。</p><p><strong>pid</strong>：需要打印配置信息的进程 ID。该进程必须是一个 Java 进程。想要获取运行的 Java 进程列表，你可以使用 jps。</p><p><strong>executable</strong>：产生核心 dump 的 Java 可执行文件。</p><p><strong>core</strong>：需要打印配置信息的核心文件。</p><p><strong>remote-hostname-or-IP</strong>：远程调试服务器的（请查看jsadebugd）主机名或 IP 地址。</p><p><strong>server-id</strong>：可选的唯一 id，如果相同的远程主机上运行了多台调试服务器，用此选项参数标识服务器。</p><h4 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h4><p>**&lt;no option&gt;**：如果使用不带选项参数的 jmap 打印共享对象映射，将会打印目标虚拟机中加载的每个共享对象的起始地址、映射大小以及共享对象文件的路径全称。这与 Solaris 的 pmap 工具比较相似。</p><ul><li>**dump:[live,]format=b,file=<filename>**：以 hprof 二进制格式转储 Java 堆到指定 filename 的文件中。live 子选项是可选的。如果指定了 live 子选项，堆中只有活动的对象会被转储。想要浏览 heap dump，你可以使用 jhat（Java 堆分析工具）读取生成的文件。</li><li><strong>finalizerinfo</strong>：打印等待终结的对象信息。</li><li><strong>heap</strong>：打印一个堆的摘要信息，包括使用的 GC 算法、堆配置信息和 generation wise heap usage。</li><li>**histo[:live]*<em>：打印堆的柱状图。其中包括每个 Java 类、对象数量、内存大小（单位：字节）、完全限定的类名。打印的虚拟机内部的类名称将会带有一个’</em>’前缀。如果指定了live子选项，则只计算活动的对象。</li><li><strong>permstat</strong>：打印 Java 堆内存的永久保存区域的类加载器的智能统计信息。对于每个类加载器而言，它的名称、活跃度、地址、父类加载器、它所加载的类的数量和大小都会被打印。此外，包含的字符串数量和大小也会被打印。</li><li><strong>F</strong>：强制模式。如果指定的 pid 没有响应，请使用 jmap -dump 或 jmap -histo 选项。此模式下，不支持 live 子选项。</li><li><strong>h</strong>：打印帮助信息。</li><li><strong>help</strong>：打印帮助信息。</li><li>**J<flag> **：指定传递给运行jmap的JVM的参数。</li></ul><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p><strong>查看 java 堆（heap）使用情况</strong>，执行命令： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">jmap -heap 31846</span><br><span class="line"></span><br><span class="line">Attaching to process ID 31846, please <span class="built_in">wait</span>...</span><br><span class="line">Debugger attached successfully.</span><br><span class="line">Server compiler detected.</span><br><span class="line">JVM version is 24.71-b01</span><br><span class="line"></span><br><span class="line">using thread-local object allocation.</span><br><span class="line">Parallel GC with 4 thread(s) //GC 方式</span><br><span class="line"></span><br><span class="line">Heap Configuration: //堆内存初始化配置</span><br><span class="line">   MinHeapFreeRatio = 0 //对应jvm启动参数-XX:MinHeapFreeRatio设置JVM堆最小空闲比率(default 40)</span><br><span class="line">   MaxHeapFreeRatio = 100 //对应jvm启动参数 -XX:MaxHeapFreeRatio设置JVM堆最大空闲比率(default 70)</span><br><span class="line">   MaxHeapSize      = 2082471936 (1986.0MB) //对应jvm启动参数-XX:MaxHeapSize=设置JVM堆的最大大小</span><br><span class="line">   NewSize          = 1310720 (1.25MB) //对应jvm启动参数-XX:NewSize=设置JVM堆的‘新生代’的默认大小</span><br><span class="line">   MaxNewSize       = 17592186044415 MB //对应jvm启动参数-XX:MaxNewSize=设置JVM堆的‘新生代’的最大大小</span><br><span class="line">   OldSize          = 5439488 (5.1875MB) //对应jvm启动参数-XX:OldSize=&lt;value&gt;:设置JVM堆的‘老生代’的大小</span><br><span class="line">   NewRatio         = 2 //对应jvm启动参数-XX:NewRatio=:‘新生代’和‘老生代’的大小比率</span><br><span class="line">   SurvivorRatio    = 8 //对应jvm启动参数-XX:SurvivorRatio=设置年轻代中Eden区与Survivor区的大小比值 </span><br><span class="line">   PermSize         = 21757952 (20.75MB)  //对应jvm启动参数-XX:PermSize=&lt;value&gt;:设置JVM堆的‘永生代’的初始大小</span><br><span class="line">   MaxPermSize      = 85983232 (82.0MB) //对应jvm启动参数-XX:MaxPermSize=&lt;value&gt;:设置JVM堆的‘永生代’的最大大小</span><br><span class="line">   G1HeapRegionSize = 0 (0.0MB)</span><br><span class="line"></span><br><span class="line">Heap Usage: //堆内存使用情况</span><br><span class="line">PS Young Generation</span><br><span class="line">Eden Space: //Eden区内存分布</span><br><span class="line">   capacity = 33030144 (31.5MB) //Eden区总容量</span><br><span class="line">   used     = 1524040 (1.4534378051757812MB) //Eden区已使用</span><br><span class="line">   free     = 31506104 (30.04656219482422MB) //Eden区剩余容量</span><br><span class="line">   4.614088270399305% used //Eden区使用比率</span><br><span class="line">From Space:  //其中一个Survivor区的内存分布</span><br><span class="line">   capacity = 5242880 (5.0MB)</span><br><span class="line">   used     = 0 (0.0MB)</span><br><span class="line">   free     = 5242880 (5.0MB)</span><br><span class="line">   0.0% used</span><br><span class="line">To Space:  //另一个Survivor区的内存分布</span><br><span class="line">   capacity = 5242880 (5.0MB)</span><br><span class="line">   used     = 0 (0.0MB)</span><br><span class="line">   free     = 5242880 (5.0MB)</span><br><span class="line">   0.0% used</span><br><span class="line">PS Old Generation //当前的Old区内存分布</span><br><span class="line">   capacity = 86507520 (82.5MB)</span><br><span class="line">   used     = 0 (0.0MB)</span><br><span class="line">   free     = 86507520 (82.5MB)</span><br><span class="line">   0.0% used</span><br><span class="line">PS Perm Generation//当前的 “永生代” 内存分布</span><br><span class="line">   capacity = 22020096 (21.0MB)</span><br><span class="line">   used     = 2496528 (2.3808746337890625MB)</span><br><span class="line">   free     = 19523568 (18.619125366210938MB)</span><br><span class="line">   11.337498256138392% used</span><br><span class="line"></span><br><span class="line">670 interned Strings occupying 43720 bytes.</span><br></pre></td></tr></table></figure><p><strong>查看堆内存（histogram）中的对象数量及大小</strong>。执行命令： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">jmap -histo 3331</span><br><span class="line"></span><br><span class="line">num     <span class="comment">#instances         #bytes  class name</span></span><br><span class="line">编号     个数                字节     类名</span><br><span class="line">----------------------------------------------</span><br><span class="line">   1:             7        1322080  [I</span><br><span class="line">   2:          5603         722368  &lt;methodKlass&gt;</span><br><span class="line">   3:          5603         641944  &lt;constMethodKlass&gt;</span><br><span class="line">   4:         34022         544352  java.lang.Integer</span><br><span class="line">   5:           371         437208  &lt;constantPoolKlass&gt;</span><br><span class="line">   6:           336         270624  &lt;constantPoolCacheKlass&gt;</span><br><span class="line">   7:           371         253816  &lt;instanceKlassKlass&gt;</span><br></pre></td></tr></table></figure><blockquote><p><strong>jmap -histo:live 这个命令执行，JVM会先触发gc，然后再统计信息。</strong></p></blockquote><p><strong>将内存使用的详细情况输出到文件</strong>，执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmap -dump:format=b,file=heapDump 6900</span><br></pre></td></tr></table></figure><p>然后用 <code>jhat</code> 命令可以参看 <code>jhat -port 5000 heapDump</code> 在浏览器中访问：<code>http://localhost:5000/</code> 查看详细信息</p><blockquote><p>这个命令执行，JVM 会将整个 heap 的信息 dump 写入到一个文件，heap 如果比较大的话，就会导致这个过程比较耗时，并且执行的过程中为了保证 dump 的信息是可靠的，所以会暂停应用。</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>如果程序内存不足或者频繁GC，很有可能存在内存泄露情况，这时候就要借助 Java 堆 Dump 查看对象的情况。</li><li>要制作堆 Dump 可以直接使用 jvm 自带的 jmap 命令</li><li>可以先使用 <code>jmap -heap</code> 命令查看堆的使用情况，看一下各个堆空间的占用情况。</li><li>使用 <code>jmap -histo:[live]</code> 查看堆内存中的对象的情况。如果有大量对象在持续被引用，并没有被释放掉，那就产生了内存泄露，就要结合代码，把不用的对象释放掉。</li><li>也可以使用 <code>jmap -dump:format=b,file=&lt;fileName&gt;</code>命令将堆信息保存到一个文件中，再借助jhat命令查看详细内容</li><li>在内存出现泄露、溢出或者其它前提条件下，建议多 dump 几次内存，把内存文件进行编号归档，便于后续内存整理分析。</li></ol><p><strong>Error attaching to process: sun.jvm.hotspot.debugger.DebuggerException: Can’t attach to the process</strong></p><p>在ubuntu中第一次使用 jmap 会报错：<code>Error attaching to process: sun.jvm.hotspot.debugger.DebuggerException: Can&#39;t attach to the process</code>，这是oracla文档中提到的一个bug：<a href="http://bugs.java.com/bugdatabase/view_bug.do?bug_id=7050524,%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F%E5%A6%82%E4%B8%8B%EF%BC%9A">http://bugs.java.com/bugdatabase/view_bug.do?bug_id=7050524,解决方式如下：</a></p><ol><li>echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope 该方法在下次重启前有效。</li><li>永久有效方法 sudo vi /etc/sysctl.d/10-ptrace.conf 编辑下面这行 <code>kernel.yama.ptrace_scope = 1</code> 修改为 <code>kernel.yama.ptrace_scope = 0</code> 重启系统，使修改生效。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;jmap 是 JDK 自带的工具软件，主要用于打印指定 Java 进程（或核心文件、远程调试服务器）的共享对象内存映射或堆内存细节。可以使用 jmap 生成 Heap Dump。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;什么是堆-dum</summary>
      
    
    
    
    
    <category term="性能测试" scheme="https://wu3227834.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    <category term="Java" scheme="https://wu3227834.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>性能测试——火焰图进阶</title>
    <link href="https://wu3227834.github.io/2024/04/22/2024-04-22-flamegraph/"/>
    <id>https://wu3227834.github.io/2024/04/22/2024-04-22-flamegraph/</id>
    <published>2024-04-22T00:00:00.000Z</published>
    <updated>2025-05-29T10:13:18.874Z</updated>
    
    <content type="html"><![CDATA[<p>当程序出现性能瓶颈时，我们通常通过表象（比如请求某个接口时 CPU 使用率飙涨）然后结合代码去推测可能出问题的地方，却不知道问题到底是什么引起的。如果有个一可视化的工具直观地展现程序的性能瓶颈就好了，幸好 <a href="/img/2024-04-22-FlameGraph/http://www.brendangregg.com/">Brendan D. Gregg</a> 发明了火焰图。</p><p><a href="/img/2024-04-22-FlameGraph/http://www.brendangregg.com/flamegraphs.html">火焰图</a>（Flame Graph）看起来就像一团跳动的火焰，因此得名。火焰图可以将 CPU 的使用情况可视化，使我们直观地了解到程序的性能瓶颈，通常要结合操作系统的性能分析工具（profiling tracer）使用，常见的操作系统的性能分析工具如下：</p><ul><li>Linux：perf, eBPF, SystemTap, and ktap。</li><li>Solaris, illumos, FreeBSD：DTrace。</li><li>Mac OS X：DTrace and Instruments。</li><li>Windows：Xperf.exe。</li></ul><h2 id="1-1-1-perf"><a href="#1-1-1-perf" class="headerlink" title="1.1.1 perf"></a>1.1.1 perf</h2><p><a href="/img/2024-04-22-FlameGraph/http://www.brendangregg.com/linuxperf.html">perf_events</a>（简称 perf）是 Linux Kernal 自带的系统性能分析工具，能够进行函数级与指令级的热点查找。它基于事件采样原理，以性能事件为基础，支持针对处理器相关性能指标与操作系统相关性能指标的性能剖析，常用于查找性能瓶颈及定位热点代码。</p><p>测试机器：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">uname</span> -a</span><br><span class="line">Linux nswbmw-VirtualBox 4.10.0-28-generic <span class="comment">#32~16.04.2-Ubuntu SMP Thu Jul 20 10:19:48 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：非 Linux 用户需要用虚拟机安装 Ubuntu 16.04 和 <a href="mailto:&#x6e;&#x6f;&#100;&#101;&#x40;&#x38;&#x2e;&#x39;&#x2e;&#52;">&#x6e;&#x6f;&#100;&#101;&#x40;&#x38;&#x2e;&#x39;&#x2e;&#52;</a> 后进行后面的操作。</p><p>安装 perf：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt install linux-tools-common</span><br><span class="line">$ perf <span class="comment"># 根据提示安装对应的内核版本的 tools, 如下</span></span><br><span class="line">$ <span class="built_in">sudo</span> apt install linux-tools-4.10.0-28-generic linux-cloud-tools-4.10.0-28-generic</span><br></pre></td></tr></table></figure><p>创建测试目录 ~/test 和测试代码：</p><p><strong>app.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Paloma</span> = <span class="built_in">require</span>(<span class="string">&#x27;paloma&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Paloma</span>()</span><br><span class="line"><span class="keyword">const</span> users = &#123;&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">route</span>(&#123; <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, <span class="attr">path</span>: <span class="string">&#x27;/newUser&#x27;</span>, <span class="title function_">controller</span> (ctx) &#123;</span><br><span class="line">  <span class="keyword">const</span> username = ctx.<span class="property">query</span>.<span class="property">username</span> || <span class="string">&#x27;test&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> password = ctx.<span class="property">query</span>.<span class="property">password</span> || <span class="string">&#x27;test&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> salt = crypto.<span class="title function_">randomBytes</span>(<span class="number">128</span>).<span class="title function_">toString</span>(<span class="string">&#x27;base64&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> hash = crypto.<span class="title function_">pbkdf2Sync</span>(password, salt, <span class="number">10000</span>, <span class="number">64</span>, <span class="string">&#x27;sha512&#x27;</span>).<span class="title function_">toString</span>(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  users[username] = &#123; salt, hash &#125;</span><br><span class="line"></span><br><span class="line">  ctx.<span class="property">status</span> = <span class="number">204</span></span><br><span class="line">&#125;&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">route</span>(&#123; <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, <span class="attr">path</span>: <span class="string">&#x27;/auth&#x27;</span>, <span class="title function_">controller</span> (ctx) &#123;</span><br><span class="line">  <span class="keyword">const</span> username = ctx.<span class="property">query</span>.<span class="property">username</span> || <span class="string">&#x27;test&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> password = ctx.<span class="property">query</span>.<span class="property">password</span> || <span class="string">&#x27;test&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!users[username]) &#123;</span><br><span class="line">    ctx.<span class="keyword">throw</span>(<span class="number">400</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> hash = crypto.<span class="title function_">pbkdf2Sync</span>(password, users[username].<span class="property">salt</span>, <span class="number">10000</span>, <span class="number">64</span>, <span class="string">&#x27;sha512&#x27;</span>).<span class="title function_">toString</span>(<span class="string">&#x27;hex&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (users[username].<span class="property">hash</span> === hash) &#123;</span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">204</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ctx.<span class="keyword">throw</span>(<span class="number">403</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;&#125;)</span><br><span class="line"> </span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p>添加 –perf_basic_prof（或者 –perf-basic-prof）参数运行此程序，会对应生成一个 /tmp/perf-&lt;PID&gt;.map 的文件。命令如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ node --perf_basic_prof app.js &amp;</span><br><span class="line">[1] 3590</span><br><span class="line">$ <span class="built_in">tail</span> /tmp/perf-3590.map</span><br><span class="line">51b87a7b93e 18 Function:~emitListeningNT net.js:1375</span><br><span class="line">51b87a7b93e 18 LazyCompile:~emitListeningNT net.js:1375</span><br><span class="line">51b87a7bad6 39 Function:~emitAfterScript async_hooks.js:443</span><br><span class="line">51b87a7bad6 39 LazyCompile:~emitAfterScript async_hooks.js:443</span><br><span class="line">51b87a7bcbe 77 Function:~tickDone internal/process/next_tick.js:88</span><br><span class="line">51b87a7bcbe 77 LazyCompile:~tickDone internal/process/next_tick.js:88</span><br><span class="line">51b87a7bf36 12 Function:~clear internal/process/next_tick.js:42</span><br><span class="line">51b87a7bf36 12 LazyCompile:~clear internal/process/next_tick.js:42</span><br><span class="line">51b87a7c126 b8 Function:~emitPendingUnhandledRejections internal/process/promises.js:86</span><br><span class="line">51b87a7c126 b8 LazyCompile:~emitPendingUnhandledRejections internal/process/promises.js:86</span><br></pre></td></tr></table></figure><p><strong>map 文件内容三列依次为</strong>：16进制的符号地址（symbol addresses）、大小（sizes）和符号名（symbol names）。perf 会尝试查找 /tmp/perf-&lt;PID&gt;.map 文件，用来做符号转换，即把 16 进制的符号地址转换成人能读懂的符号名。</p><p><strong>注意</strong>：使用 –perf_basic_prof_only_functions 参数也可以，但经尝试后发现生成的火焰图信息不全（不全的地方显示 [perf-&lt;PID&gt;.map]），所以这里使用 –perf_basic_prof。但是，使用 –perf_basic_prof  有个缺点，就是会导致 map 文件一直增大，这是由于符号（symbols）地址不断变换导致的，用 –perf_basic_prof_only_functions 可以缓解这个问题。关于如何取舍，还请读者自行尝试。</p><p>接下来 clone 用来生成火焰图的工具：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> http://github.com/brendangregg/FlameGraph ~/FlameGraph</span><br></pre></td></tr></table></figure><p>我们先用 ab 压测：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl <span class="string">&quot;http://localhost:3000/newUser?username=admin&amp;password=123456&quot;</span></span><br><span class="line">$ ab -k -c 10 -n 2000 <span class="string">&quot;http://localhost:3000/auth?username=admin&amp;password=123456&quot;</span></span><br></pre></td></tr></table></figure><p>新开另一个终端，在 ab 开始压测后立即运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> perf record -F 99 -p 3590 -g -- <span class="built_in">sleep</span> 30</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">chown</span> root /tmp/perf-3590.map</span><br><span class="line">$ <span class="built_in">sudo</span> perf script &gt; perf.stacks</span><br><span class="line">$ ~/FlameGraph/stackcollapse-perf.pl --kernel &lt; ~/perf.stacks | ~/FlameGraph/flamegraph.pl --color=js --<span class="built_in">hash</span>&gt; ~/flamegraph.svg</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：第 1 次生成的 svg 可能不太准确，最好重复几次以上步骤，使用第 2 次及以后生成的 flamegraph.svg。</p><p>有几点需要解释一下：</p><ul><li><p>perf record</p><ul><li>-F 指定了采样频率 99Hz（即每秒 99 次，如果 99 次都返回同一个函数名，那就说明 CPU 在这一秒钟都在执行同一个函数，可能存在性能问题）。</li><li>-p 指定进程的 pid。</li><li>-g 启用 call-graph 记录。</li><li>– sleep 30 指定记录 30s。</li></ul></li><li><p>sudo chown root /tmp/perf-3009.map，将 map 文件更改为 root 权限，否则会报如下错误：</p><blockquote><p>File /tmp/perf-PID.map not owned by current user or root, ignoring it (use -f to override).<br>Failed to open /tmp/perf-PID.map, continuing without symbols</p></blockquote></li><li><p>perf record 会将记录的信息保存到当前执行目录的 perf.data 文件中，然后使用 perf script 读取 perf.data 的 trace 信息写入 perf.stacks。</p></li><li><p>–color=js 指定生成针对 JavaScript 配色的 svg，即：</p><ul><li>green：JavaScript。</li><li>blue：Builtin。</li><li>yellow：C++。</li><li>red：System（native user-level, and kernel）。</li></ul></li></ul><p>ab 压测用了 30s 左右，用浏览器打开 flamegraph.svg，截取关键的部分如下图所示：</p><p><img src="/img/2024-04-22-FlameGraph/1.1.1.png" alt="flamegraph1.svg"></p><h2 id="1-1-2-理解火焰图"><a href="#1-1-2-理解火焰图" class="headerlink" title="1.1.2 理解火焰图"></a>1.1.2 理解火焰图</h2><p>火焰图含义：</p><ul><li>每一个小块代表了一个函数在栈中的位置（即一个栈帧）。</li><li>Y 轴代表栈的深度（栈上的帧数），顶端的小块显示了占据 CPU 的函数。每个小块的下面是它的祖先（即父函数）。</li><li>X 轴代表总的样例群体。它不像绝大多数图表那样从左到右表示时间的流逝，其左右顺序没有特殊含义，仅仅按照字母表的顺序排列。</li><li>小块的宽度代表 CPU 的使用时间，或者说相对于父函数而言使用 CPU 的比例（基于所有样例），越宽则代表占用 CPU 的时间越长，或者使用 CPU 很频繁。</li><li>如果采取多线程并发运行取样，则取样数量会超过运行时间。</li></ul><p><strong>从上图可以看出</strong>：最上面的绿色小块（即 JavaScript 代码）指向 test/app.js 第 18 行，即 <code>GET /auth</code> 这个路由。再往上看，黄色的小块（即 C++ 代码） node::crypto::PBKDF2 占用了大量的 CPU 时间。</p><p><strong>解决方法</strong>：将同步改为异步，即将 crypto.pbkdf2Sync 改为 crypto.pbkdf2。修改如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">route</span>(&#123; <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, <span class="attr">path</span>: <span class="string">&#x27;/auth&#x27;</span>, <span class="keyword">async</span> <span class="title function_">controller</span> (ctx) &#123;</span><br><span class="line">  <span class="keyword">const</span> username = ctx.<span class="property">query</span>.<span class="property">username</span> || <span class="string">&#x27;test&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> password = ctx.<span class="property">query</span>.<span class="property">password</span> || <span class="string">&#x27;test&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!users[username]) &#123;</span><br><span class="line">    ctx.<span class="keyword">throw</span>(<span class="number">400</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> hash = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    crypto.<span class="title function_">pbkdf2</span>(password, users[username].<span class="property">salt</span>, <span class="number">10000</span>, <span class="number">64</span>, <span class="string">&#x27;sha512&#x27;</span>, <span class="function">(<span class="params">err, derivedKey</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">reject</span>(err)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">resolve</span>(derivedKey.<span class="title function_">toString</span>(<span class="string">&#x27;hex&#x27;</span>))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (users[username].<span class="property">hash</span> === hash) &#123;</span><br><span class="line">    ctx.<span class="property">status</span> = <span class="number">204</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ctx.<span class="keyword">throw</span>(<span class="number">403</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;&#125;)</span><br></pre></td></tr></table></figure><p>用 ab 重新压测，结果用了 16s。重新生成的火焰图如下：</p><p><img src="/img/2024-04-22-FlameGraph/1.1.2.png" alt="flamegraph2.svg"></p><p><strong>可以看出</strong>：只有在左侧极窄的绿色小块可以看到 JavaScript 代码，红色的部分我们不关心也无法优化。那么，为什么异步比同步的 QPS 要高呢？原因是 Node.js 底层的 libuv 用了多个线程进行计算，这里就不再深入介绍了。</p><p>svg 火焰图的其他小技巧如下：</p><ol><li>单击任意一个小块即可展开，即被单击的小块宽度变宽，它的子函数也按比例变宽，方便查看。</li><li>可单击 svg 右上角的 search 按钮进行搜索，被搜索的关键词会高亮显示，在有目的地查找某个函数时比较有用。</li></ol><h2 id="1-1-3-红蓝差分火焰图"><a href="#1-1-3-红蓝差分火焰图" class="headerlink" title="1.1.3 红蓝差分火焰图"></a>1.1.3 红蓝差分火焰图</h2><p>虽然我们有了火焰图，但要处理性能回退问题，还需要在修改代码前后的火焰图之间，不断切换和对比，来找出问题所在，很不方便。于是 <a href="/img/2024-04-22-FlameGraph/http://www.brendangregg.com/index.html">Brendan D. Gregg</a> 又发明了红蓝差分火焰图（Red/Blue Differential Flame Graphs）。</p><p><strong>如下所示</strong>：红色表示增长，蓝色表示衰减。</p><p><img src="/img/2024-04-22-FlameGraph/1.1.3.png" alt="flamegraph3.svg"></p><p>红蓝差分火焰图的工作原理如下：</p><ol><li>抓取修改前的栈 profile1 文件。</li><li>抓取修改后的栈 profile2 文件。</li><li>使用 profile2 来生成火焰图，这样栈帧的宽度就是以 profile2 文件为基准的。</li><li>使用 profile2 - profile1 的差异来对火焰图重新上色。上色的原则是：如果栈帧在 profile2 中出现出现的次数更多，则标为红色，否则标为蓝色。色彩是根据修改前后的差异来填充的。</li></ol><p>这样，通过红蓝差分火焰图，我们就可以清楚地看到系统性能的差异之处。</p><p>生成红蓝差分火焰图的流程如下：</p><ol><li><p>修改代码前运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> perf record -F 99 -p &lt;PID&gt; -g -- <span class="built_in">sleep</span> 30</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">chown</span> root /tmp/perf-&lt;PID&gt;.map</span><br><span class="line">$ <span class="built_in">sudo</span> perf script &gt; perf_before.stacks</span><br></pre></td></tr></table></figure></li><li><p>修改代码后运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> perf record -F 99 -p &lt;PID&gt; -g -- <span class="built_in">sleep</span> 30</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">chown</span> root /tmp/perf-&lt;PID&gt;.map</span><br><span class="line">$ <span class="built_in">sudo</span> perf script &gt; perf_after.stacks</span><br></pre></td></tr></table></figure></li><li><p>将 profile 文件进行折叠（fold），然后生成差分火焰图：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ~/FlameGraph/stackcollapse-perf.pl ~/perf_before.stacks &gt; perf_before.folded</span><br><span class="line">$ ~/FlameGraph/stackcollapse-perf.pl ~/perf_after.stacks &gt; perf_after.folded</span><br><span class="line">$ ./FlameGraph/difffolded.pl perf_before.folded perf_after.folded | ./FlameGraph/flamegraph.pl &gt; flamegraph_diff.svg</span><br></pre></td></tr></table></figure></li></ol><p><strong>如上缺点是</strong>：如果一个代码执行路径完全消失了，那么在火焰图中就找不到地方来标注蓝色，我们只能看到当前的 CPU 使用情况，却不知道为什么会变成这样。</p><p>一种解决办法是：生成一个相反的差分火焰图，即基于 profile1 生成 profile1 - profile2 的差分火焰图。对应命令如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./FlameGraph/difffolded.pl perf_after.folded perf_before.folded | ./FlameGraph/flamegraph.pl --negate &gt; flamegraph_diff2.svg</span><br></pre></td></tr></table></figure><p>其中，–negate 用于颠倒红/蓝配色。最终我们得到：</p><ul><li>flamegraph_diff.svg：宽度是以修改前的 profile 文件为基准，颜色表明将要发生的情况。</li><li>flamegraph_diff2.svg：宽度是以修改后的 profile 文件为基准，颜色表明已经发生的情况。</li></ul><p>总之，红蓝差分火焰图可能只在代码变化不大的情况下使用时效果明显，在代码变化较大的情况下使用时效果可能就不明显了。</p><h2 id="1-1-4-参考链接"><a href="#1-1-4-参考链接" class="headerlink" title="1.1.4 参考链接"></a>1.1.4 参考链接</h2><ul><li><a href="https://lidaohang.gitbooks.io/quick_location/content/huo-yan-tu/cpuji-bie-huo-yan-tu/hong-lan-cha-fen-huo-yan-tu.html">https://lidaohang.gitbooks.io/quick_location/content/huo-yan-tu/cpuji-bie-huo-yan-tu/hong-lan-cha-fen-huo-yan-tu.html</a></li><li><a href="https://yunong.io/2015/11/23/generating-node-js-flame-graphs/">https://yunong.io/2015/11/23/generating-node-js-flame-graphs/</a></li><li><a href="http://www.brendangregg.com/perf.html">http://www.brendangregg.com/perf.html</a></li><li><a href="http://www.brendangregg.com/blog/2014-09-17/node-flame-graphs-on-linux.html">http://www.brendangregg.com/blog/2014-09-17/node-flame-graphs-on-linux.html</a></li><li><a href="https://linux.cn/article-4670-1.html">https://linux.cn/article-4670-1.html</a></li><li><a href="http://www.brendangregg.com/blog/2014-11-09/differential-flame-graphs.html">http://www.brendangregg.com/blog/2014-11-09/differential-flame-graphs.html</a></li><li><a href="http://www.ruanyifeng.com/blog/2017/09/flame-graph.html">http://www.ruanyifeng.com/blog/2017/09/flame-graph.html</a></li></ul>]]></content>
    
    
    <summary type="html">火焰图（Flame Graph）是一种可视化工具，用于直观分析程序性能瓶颈，广泛应用于性能测试。结合 Linux 的 perf、eBPF 等工具，火焰图通过采样展示 CPU 使用情况，Y 轴表示调用栈深度，X 轴表示采样频率，块宽度反映函数占用 CPU 时间。使用 perf 记录 Node.js 程序性能数据，配合 FlameGraph 工具生成 SVG 格式火焰图，可快速定位热点代码，如同步函数 crypto.pbkdf2Sync 导致的高 CPU 占用。优化后（如改为异步），火焰图显示性能提升。红蓝差分火焰图进一步对比代码修改前后的性能差异，红色表示 CPU 使用增长，蓝色表示减少，便于分析性能回退。然而，当代码变化较大时，差分效果可能不明显。火焰图通过直观展示调用栈和资源占用，是性能测试中不可或缺的工具。</summary>
    
    
    
    
    <category term="性能测试" scheme="https://wu3227834.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
    <category term="火焰图" scheme="https://wu3227834.github.io/tags/%E7%81%AB%E7%84%B0%E5%9B%BE/"/>
    
    <category term="pref" scheme="https://wu3227834.github.io/tags/pref/"/>
    
  </entry>
  
  <entry>
    <title>Linux 性能调优基础：top</title>
    <link href="https://wu3227834.github.io/2024/04/07/2024-04-07-linux-tracing-basis/"/>
    <id>https://wu3227834.github.io/2024/04/07/2024-04-07-linux-tracing-basis/</id>
    <published>2024-04-07T00:00:00.000Z</published>
    <updated>2025-05-29T10:13:18.874Z</updated>
    
    <content type="html"><![CDATA[<p>top 命令是 linux 下常用的性能分析工具，能够实时显示系统中各个进程的资源占用使用情况，类似于 windos 的任务窗口。</p><h2 id="top-理论"><a href="#top-理论" class="headerlink" title="top 理论"></a>top 理论</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">top - 16:55:39 up 220 days,  1:16,  4 <span class="built_in">users</span>,  load average: 299.05, 217.84, 106.90</span></span><br><span class="line">Tasks: 3355 total,  12 running, 3339 sleeping,   3 stopped,   1 zombie</span><br><span class="line"><span class="meta prompt_">%</span><span class="language-bash">Cpu(s): 40.7 us, 38.9 sy,  0.0 ni,  0.1 <span class="built_in">id</span>,  0.0 wa, 20.1 hi,  0.2 si,  0.0 st</span></span><br><span class="line">MiB Mem : 257336.1 total,  17260.1 free,  77063.5 used, 163012.4 buff/cache</span><br><span class="line">MiB Swap:  32768.0 total,  19075.1 free,  13692.9 used.  42491.5 avail Mem</span><br><span class="line"></span><br><span class="line">    PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND</span><br></pre></td></tr></table></figure><p>统计信息区前五行是系统整体的统计信息。第一行是任务队列信息，同 uptime 命令的执行结果。其内容如下：</p><table><thead><tr><th>内容</th><th>解释</th></tr></thead><tbody><tr><td>16:55:39</td><td>当前时间</td></tr><tr><td>up 220 days</td><td>系统运行时间</td></tr><tr><td>4 users</td><td>当前登录用户数</td></tr><tr><td>load average: 299.05, 217.84, 106.90</td><td>系统负载，即任务队列平均长度。分别为 1、5、15 min 前到现在平均值</td></tr></tbody></table><p>第二、三行为进程和 CPU 的信息。当有多个 CPU 时，这些内容可能会超过两行。内容如下：</p><table><thead><tr><th>内容</th><th>解释</th></tr></thead><tbody><tr><td>Tasks: 3355 total</td><td>进程总数[键入 H 可查看线程数]</td></tr><tr><td>12 running, 3339 sleeping, 3 stopped</td><td>正在运行的进程、睡眠进程、停止的进程</td></tr><tr><td>1 zombie</td><td>僵尸进程数</td></tr><tr><td>%Cpu(s): 40.7 us, 38.9 sy</td><td>用户空间占用 CPU 百分比、内核空间占用 CPU 百分比</td></tr><tr><td>0.0 ni, 0.1 id</td><td>用户进程空间内改变进程优先级占用 CPU、空闲 CPU 百分比</td></tr><tr><td>0.0 wa, 20.1 hi, 0.2 si, 0.0 st</td><td>等待 IO 的 CPU 时间百分比，最后三个是中断请求相关</td></tr></tbody></table><p>倒数第二、三行为内存相关信息：</p><table><thead><tr><th>内容</th><th>解释</th></tr></thead><tbody><tr><td>MiB Mem</td><td>表示系统内存的使用情况</td></tr><tr><td>MiB Swap</td><td>表示交换空间（虚拟内存）的使用情况</td></tr><tr><td>xxx total, xxx free, xxx used</td><td>分别是内存总量、空闲内存总量、使用内存总量</td></tr><tr><td>xxx buff/cache</td><td>被用作缓冲或缓存的内存量</td></tr><tr><td>xxx avail Mem</td><td>可用的交换空间</td></tr></tbody></table><ul><li>buffe <a href="http://wiki.answers.com/Q/Difference_between_buffer_and_cache">Difference between buffer and cache</a></li></ul><blockquote><p>由硬件设备或程序共享的数据区域称为缓冲区。它们以不同的速度运行，或者有不同的优先顺序。缓冲区允许每个设备或进程在没有其他设备或进程阻碍的情况下运行。为了使缓冲区有效，缓冲区设计器需要考虑缓冲区的大小。与缓存一样，缓冲区是一个“中点保存位置”，但它的存在并不是为了加快活动的速度，而是为了支持单独活动的协调。</p></blockquote><blockquote><p>这个术语不仅用于编程，也用于硬件。在编程中，缓冲有时需要从数据的最终预期位置筛选数据，以便在移动到常规文件或数据库之前对数据进行编辑或处理。</p></blockquote><ul><li>cached</li></ul><blockquote><p>高速缓冲存储器是随机存取存储器（RAM）的一种。计算机微处理器对高速缓冲存储器的访问速度比普通 RAM 的访问速度更快。就像微处理器处理数据一样，它首先在高速缓冲存储器中查找，如果在那里，它会从之前读取的数据中找到数据，它不需要从更大的内存中进行更耗时的数据读取。</p></blockquote><blockquote><p>有时，高速缓冲存储器是按照与微处理器的接近程度和便利程度来描述的。L1 高速缓存与微处理器位于同一芯片上。</p></blockquote><blockquote><p>除了高速缓存之外，RAM 本身也是一种用于硬盘存储的高速缓存，因为当你打开计算机并加载正在加载的操作系统时，所有 RAM 的内容都会先到达硬盘，稍后当你启动新应用程序并访问新数据。RAM 还包含一个称为磁盘缓存的特殊区域，该区域由最近从硬盘读取的数据组成。</p></blockquote><p>最后 1 行则是进程相关的资源占用信息:</p><ul><li>PID：进程ID。系统中每个进程都有一个唯一的ID号，称为进程ID。</li><li>USER：进程的拥有者。显示启动这个进程的用户名称。</li><li>PR：进程的优先级。内核根据这个值来决定进程的执行优先级。</li><li>NI：进程的nice值。这是一个用户控制的为进程设置的优先级的值。数值可从-20（最高优先级）到19（最低优先级）。</li><li>VIRT：虚拟内存使用量。进程使用的所有虚拟内存的和，包括进程使用的库，以及映射的文件和交换空间的大小。</li><li>RES：常驻内存大小。这是进程当前使用的、未被调出的物理内存量，单位通常是KB。</li><li>SHR：共享内存大小。这是多个进程可能共享的内存部分，通常包括库等。</li><li>S：进程的状态。通常的状态有：<ul><li>S（睡眠中）：等待事件完成（如输入/输出完成）。</li><li>R（运行中）：正在运行或在运行队列中等待。</li><li>T（停止）：进程已停止执行。</li><li>Z（僵尸）：进程已终止，但其父进程尚未收到其终止状态。</li></ul></li><li>%CPU：CPU使用率。展示进程使用的CPU时间百分比，这个值是在最后一次更新的时候样本里CPU使用情况的近似值，可能超过100%在多核CPU的系统。</li><li>%MEM：内存使用率。该进程使用的物理内存和总物理内存的百分比。</li><li>TIME+：进程使用的CPU时间总计，格式通常为分钟:秒。</li><li>COMMAND：启动进程的命令名称。</li></ul><h2 id="top-技巧"><a href="#top-技巧" class="headerlink" title="top 技巧"></a>top 技巧</h2><p>终端执行 top 命令之后【也可后接一些选项，比如 top -p 1 只监控 init 进程，top -u root 只显示 root 运行进程等等】，可以敲击如下按键，实现不同功能：</p><ul><li>h：获取 top 的命令帮助</li><li>1（数字1）：列出所有的单个 CPU 负载情况</li><li>z：top 显示颜色<ul><li>x：类似高亮显示，在 z 模式下使用</li></ul></li><li>P[大写]：按 CPU 占用高低顺序列出程序</li><li>M[大写]：按内存占用高低顺序列出程序</li><li>c：显示进程命令的全路径与参数</li><li>H：显示线程，默认只显示进程</li><li>top 默认按 cpu 占用排序，按F（大写）即可选择相应排序</li><li>d：top 默认刷新时间是 3s ，使用d键可自定义刷新时间</li><li>top 选择列排序[高到低]的方法[在z颜色和x高亮模式下显示效果明显]：<ul><li>shift+&lt;：左选</li><li>shift+&gt;：右选</li></ul></li><li>f：可以指定 top 显示的内容，如 ppid、swap 等都可以选择显示<ul><li>显示 Swap 利用率：按 f 键，然后按 p 键，回车即可看到 Swap 状态</li></ul></li><li>k：输入 k 之后可以 kill 掉指定的进程</li><li>A：分类显示各种系统资源高的进程。可用于快速识别系统上的性能要求极高的任务，推荐使用</li><li>W[大写]:将当前设置写入 ~/.toprc 文件中。这是写 top 配置文件的推荐方法</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/linuxwiki/SourceWiki/blob/master/%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/top.md">SourceWiki-性能调优-top.md</a></li><li><a href="http://linux.vbird.org/">鸟哥Linux私房菜</a> </li><li><a href="http://www.cyberciti.biz/tips/top-linux-monitoring-tools.html">top - Process Activity Command</a></li><li><a href="http://how-to.linuxcareer.com/learning-linux-commands-top">Learning Linux Commands: top</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;top 命令是 linux 下常用的性能分析工具，能够实时显示系统中各个进程的资源占用使用情况，类似于 windos 的任务窗口。&lt;/p&gt;
&lt;h2 id=&quot;top-理论&quot;&gt;&lt;a href=&quot;#top-理论&quot; class=&quot;headerlink&quot; title=&quot;top 理论&quot;</summary>
      
    
    
    
    
    <category term="linux" scheme="https://wu3227834.github.io/tags/linux/"/>
    
    <category term="性能测试" scheme="https://wu3227834.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>量化索引：Product Quantization 乘积量化</title>
    <link href="https://wu3227834.github.io/2024/04/01/2024-04-01-product-quantization/"/>
    <id>https://wu3227834.github.io/2024/04/01/2024-04-01-product-quantization/</id>
    <published>2024-04-01T00:00:00.000Z</published>
    <updated>2025-05-29T10:13:18.874Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>Product Quantization，国内有人直译为乘积量化，这里的乘积量化是指笛卡尔积（Cartesian product），意思是指把原先的向量空间分解为若干个低维向量空间的笛卡尔积，并对分解得到的低纬向量空间的分别做量化（quantization）。这样每个向量就能由多个低纬空间的量化 code 组合表示。为简洁描述起见，下文用 PQ 作为 Product Quantization 的简称。</p><blockquote><p>The idea is to decomposes the space into a Cartesian product of low dimensional subspaces and to quantize each subspace separately. A vector is represented by a short code composed of its subspace quantization indices.</p></blockquote><p>近几年，深度学习技术被广泛用于图像识别、语音识别、自然语言处理等领域，能够把每个实体（图像、语音、文本）转换为对应的 embedding 向量。一般来说，相似的实体转换得到的 embedding 向量也是相似的。对于相似搜索问题，最简单的想法是暴力穷举法，如果全部实体的个数是 N，N 是千万量级甚至是上亿的规模，每个实体对应的向量是 D，那么当要从这个实体集合中寻找某个实体的相似实体，暴力穷举的计算复杂度是 O(ND)，这是一个非常大的计算量，该方法显然不可取。所以对大数据量下高维度数据的相似搜索场景，我们就需要一些高效的相似搜索技术，而 PQ 就是其中一类方法。</p><h2 id="Product-Quantization"><a href="#Product-Quantization" class="headerlink" title="Product Quantization"></a>Product Quantization</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>Product Quantization 是将每个数据集向量转换为短内存高效表示（称为 PQ 代码）的过程。不是完全保留所有向量，而是存储它们的简短表示。同时，PQ 是一种有损压缩算法，预测精度较低，但在实际应用中效果还不错。</p><blockquote><p>In general, quantization is the process of mapping infinite values to discrete ones.</p></blockquote><h3 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h3><p>首先，该算法将每个向量划分为几个相等的部分——子向量。所有数据集向量的各个部分形成独立的子空间，并分别进行处理。然后对向量的每个子空间执行聚类算法。通过这样做，在每个子空间中创建了几个质心。每个子向量都使用它所属质心的 ID 进行编码。此外，存储所有质心的坐标以供以后使用。</p><blockquote><p>Subspace centroids are also called quantized vectors.<br>In product quantization, a cluster ID is often referred to as a reproduction value.</p></blockquote><p>注意: 在下图中，一个矩形表示一个包含多个值的向量，而一个正方形表示一个数字。</p><p><img src="/img/2024-04-01-Product_Quantization/pho1.jpg" alt="量化编码"></p><p>因此，如果一个原始向量被分成 n 个部分，那么它就可以用 n 个数字进行编码——每个子向量的各个质心的 ID。通常，为了更有效地使用内存，创建的质心 k 的数目通常被选为 2 的幂。这样，存储编码向量所需的内存是 n * log(k) bits。</p><blockquote><p>The collection of all centroids inside a subspace is called a codebook. Running n clustering algorithms for all subspaces produces n separate codebooks.</p></blockquote><h3 id="压缩示例"><a href="#压缩示例" class="headerlink" title="压缩示例"></a>压缩示例</h3><p>设想一个大小为 1024 的存储浮点数（32bits）的原始向量被分成 n = 8 个子向量，其中每个子向量由 k = 256 个簇中的一个进行编码。因此，编码单个集群的 ID 将需要 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.546ex;" xmlns="http://www.w3.org/2000/svg" width="15.427ex" height="2.116ex" role="img" focusable="false" viewBox="0 -694 6818.8 935.4"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"></path></g><g data-mml-node="mn" transform="translate(1311,-241.4) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(1714.6,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mn" transform="translate(1881.2,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500,0)"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(1000,0)"></path></g><g data-mml-node="mo" transform="translate(3659,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(4714.8,0)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g><g data-mml-node="mi" transform="translate(5214.8,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(5643.8,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(5988.8,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(6349.8,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g></g></svg></mjx-container>。让我们比较两种情况下向量表示的内存大小:</p><ul><li>原始向量: 1024 * 32 bits = 4096 bytes</li><li>编码向量: 8 * 8 bits = 8 bytes</li></ul><p>最终的压缩是 512 倍! 这是产品量化的真正威力。</p><p><img src="/img/2024-04-01-Product_Quantization/pho2.jpg" alt="压缩示例：向量中的数字显示它存储了多少个数字"></p><p>以下是一些重要的注意事项：</p><ul><li>该算法可以在一个向量子集上进行训练（例如，创建聚类），并用于另一个向量子集：训练完算法后，将传递另一个向量数据集，然后使用每个子空间已构造的质心对新向量进行编码。</li><li>通常，选择 k-means 作为聚类算法。它的优点之一是集群的数量 k 是一个超参数，可以根据内存使用需求手动定义。</li></ul><h3 id="推理"><a href="#推理" class="headerlink" title="推理"></a>推理</h3><p>为了更好地理解，让我们首先看看几种朴素方法，并找出它们的缺点。这也将帮助我们认识到为什么它们不应该被正常使用。</p><h4 id="朴素方案"><a href="#朴素方案" class="headerlink" title="朴素方案"></a>朴素方案</h4><p>第一种朴素的方法包括通过连接每个向量相应的质心来解压缩所有向量。之后，可以计算从查询向量到所有数据集向量的 L2 距离（或其他度量）。显然，这种方法是可行的，但是非常耗时，因为要对高维解压向量进行暴力搜索和距离计算。</p><p>另一种可能的方式是将查询向量分割成子向量，并基于其 PQ 码计算从每个查询子向量到数据库向量的各个量化向量的距离之和。因此，这里再次使用了暴力搜索技术，并且距离计算仍然需要原始向量维数的线性时间，就像前面的情况一样。</p><p><img src="/img/2024-04-01-Product_Quantization/pho3.jpg" alt="计算近似距离，以欧几里得度量为例"></p><p>另一种可能的方法是将查询向量编码成 PQ 码。然后这个 PQ 码被直接用来计算到所有其他 PQ 码的距离。将距离最短的数据集向量与相应的 PQ 码作为查询的最近邻。这种方法比前两种方法更快，因为它总是计算低维 PQ 码之间的距离。然而，PQ 码是由群集 ID 组成的，这种群集 ID 没有多少语义意义，可以看作是一个明确用作实变量的范畴变量。显然，这是一个不好的做法，这种方法可能会导致预测质量差。</p><h4 id="最佳方案"><a href="#最佳方案" class="headerlink" title="最佳方案"></a>最佳方案</h4><p>查询向量被划分为子向量。对于每个子向量，计算到相应子空间的所有质心的距离。最终，该信息存储在表 d 中。</p><p><img src="/img/2024-04-01-Product_Quantization/pho4.jpg" alt="获取存储部分查询子向量到质心距离的表 d"></p><blockquote><p>Calculated subvector-to-centroid distances are often referred to as partial distances.</p></blockquote><p>通过使用这个子向量到质心距离表 d，可以很容易地通过其 PQ 码获得从查询到任何数据库向量的近似距离:</p><ol><li>对于数据库向量的每个子向量，找到最近的质心 j (通过使用来自 PQ 码的映射值) ，并获得从该质心到查询子向量 i（通过使用计算的矩阵 d）的偏距（partial distance） d[i][j]。</li><li>所有的偏距均被平方并求和。通过对该值求平方根，即可获得近似的欧氏距离。如果您还想知道如何获得其他度量的近似结果，请导航到“其他距离度量的近似值”部分。</li></ol><p><img src="/img/2024-04-01-Product_Quantization/pho5.jpg" alt="利用 PQ 码和距离表计算查询到数据库向量的距离"></p><blockquote><p>Using this method for calculating approximate distances assumes that partial distances d are very close to actual distances a between query and database subvectors.</p></blockquote><p>然而，这个条件可能不被满足，特别是当数据库子向量与其质心之间的距离 c 很大时。在这种情况下，计算会导致精度降低。</p><p><img src="/img/2024-04-01-Product_Quantization/pho6.jpg" alt="左边的例子展示了当实际距离非常接近偏距（c 很小）时的一个很好的近似情况。在右边，我们可以观察到一个糟糕的场景，因为偏距比实际距离长得多（c 很大）。"></p><p>在获得所有数据库行的近似距离后，我们搜索具有最小值的向量。这些向量将是查询的最近邻。</p><h4 id="其他距离度量的近似"><a href="#其他距离度量的近似" class="headerlink" title="其他距离度量的近似"></a>其他距离度量的近似</h4><p>到目前为止，我们已经研究了如何通过使用偏距来近似欧几里得度量。让我们将这个规则推广到其他度量标准。</p><p>想象一下我们想要计算一对向量之间的距离度量。如果我们知道度量的公式，我们可以直接应用它来得到结果。但是有时候我们可以通过以下方式分部分的做：</p><ul><li>两个向量被分成 n 个子向量</li><li>对于每对各自的子向量，计算距离度量</li><li>然后将计算出的 n 个度量结合起来生成原始向量之间的实际距离</li></ul><p><img src="/img/2024-04-01-Product_Quantization/pho7.jpg" alt="该图显示了计算度量的两种方法。在左边，度量公式直接应用于两个向量。在右边，部分距离计算每对各自的子向量。然后使用聚合函数 h、g 和 f 对它们进行组合。"></p><p>欧几里得度量是一个可以按部分计算的度量标准的例子。根据上图，我们可以选择聚合函数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.172ex" height="2.452ex" role="img" focusable="false" viewBox="0 -833.9 4054.1 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mo" transform="translate(576,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(965,0)"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mo" transform="translate(1430,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2096.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(3152.6,0)"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mn" transform="translate(498,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container>，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="35.981ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 15903.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mo" transform="translate(477,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(866,0)"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mn" transform="translate(498,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(1767.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(2212.2,0)"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mn" transform="translate(498,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(3280.4,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(4619.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(5063.8,0)"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mi" transform="translate(498,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(6036,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(6702.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(7758.6,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(8227.6,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(8799.6,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(9677.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(10066.6,0)"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mn" transform="translate(498,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(10968.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(11412.8,0)"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mn" transform="translate(498,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(12314.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(12759,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(14097.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(14542.4,0)"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mi" transform="translate(498,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(15514.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> 和 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="10.056ex" height="2.473ex" role="img" focusable="false" viewBox="0 -843 4444.6 1093"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mo" transform="translate(1404,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2070.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msqrt" transform="translate(3126.6,0)"><g transform="translate(853,0)"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g></g><g data-mml-node="mo" transform="translate(0,-17)"><path data-c="221A" d="M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z"></path></g><rect width="465" height="60" x="853" y="723"></rect></g></g></g></svg></mjx-container>。</p><p><img src="/img/2024-04-01-Product_Quantization/pho8.jpg" alt="欧几里得度量可按部分计算"></p><p>内积是这种度量的另一个例子，其聚合函数 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.185ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3617.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mo" transform="translate(576,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(965,0)"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mo" transform="translate(1430,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2096.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3152.6,0)"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g></g></g></svg></mjx-container>，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="35.981ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 15903.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mo" transform="translate(477,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(866,0)"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mn" transform="translate(498,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(1767.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(2212.2,0)"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mn" transform="translate(498,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(3280.4,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(4619.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(5063.8,0)"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mi" transform="translate(498,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(6036,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(6702.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(7758.6,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(8227.6,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(8799.6,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(9677.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(10066.6,0)"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mn" transform="translate(498,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(10968.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(11412.8,0)"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mn" transform="translate(498,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(12314.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(12759,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(14097.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(14542.4,0)"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mi" transform="translate(498,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(15514.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> 和 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.126ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 3591.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mo" transform="translate(1404,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2070.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3126.6,0)"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g></g></g></svg></mjx-container>。</p><p>在乘积量化的背景下，这是一个非常重要的属性，因为在推理过程中，算法按部分计算距离。<strong>这意味着，使用不具有此属性的指标进行乘积量化会出现更多问题，例如余弦距离</strong></p><h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><p>乘积量化的主要优点是对存储为短 PQ 码的数据库向量进行大规模压缩。对于某些应用程序，这样的压缩率甚至可能高于 95%！然而，除了 PQ 码之外，还需要存储包含各子空间量子化向量的 k×n 矩阵 d。</p><blockquote><p>Product quantization is a lossy-compression method, so the higher the compression is, the more likely that the prediction accuracy will decrease.</p></blockquote><p>建立一个有效的表示系统需要训练多个聚类算法。除此之外，在推理过程中，k*n 的偏距需要以蛮力的方式计算，并为每个数据库向量求和，这可能需要一些时间。</p><p><img src="/img/2024-04-01-Product_Quantization/pho9.jpg" alt="Product Quantization 性能"></p><h4 id="Faiss-执行"><a href="#Faiss-执行" class="headerlink" title="Faiss 执行"></a>Faiss 执行</h4><blockquote><p><a href="https://github.com/facebookresearch/faiss">Faiss</a> (Facebook AI Search Similarity) is a Python library written in C++ used for optimised similarity search. This library presents different types of indexes which are data structures used to efficiently store the data and perform queries.</p></blockquote><p>基于来自 Faiss 文档的信息，我们将看到如何使用 PQ。</p><p>PQ 是在 IndexPQ 类中实现的。对于初始化，我们需要提供3个参数：</p><ul><li>d：数据维度</li><li>M： 每个向量的分割数（与上面使用的 n 相同的参数）</li><li>nbits: 编码单个集群 ID 所需的位数。这意味着一个子空间中的总簇数等于 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="8.29ex" height="2.117ex" role="img" focusable="false" viewBox="0 -853.7 3664.4 935.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(798.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(1854.6,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(1029,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1374,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></g></g></svg></mjx-container>。</li></ul><p>对于等子空间维数分裂，参数 dim 必须被 M 整除。</p><p>存储单个向量所需的总字节数等于：</p><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.816ex;" xmlns="http://www.w3.org/2000/svg" width="17.04ex" height="2.817ex" role="img" focusable="false" viewBox="0 -884.7 7531.7 1245.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(429,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(919,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(1280,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(1746,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(2492.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(3548.6,0)"><path data-c="2308" d="M174 734Q178 746 190 750H298H369Q400 750 411 747T422 730T411 713T372 709Q365 709 345 709T310 710H214V-235Q206 -248 196 -250Q192 -250 189 -249T184 -247T180 -244T178 -241T176 -237T174 -234V734Z"></path></g><g data-mml-node="mfrac" transform="translate(3992.6,0)"><g data-mml-node="mrow" transform="translate(220,394) scale(0.707)"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mo" transform="translate(1051,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mi" transform="translate(1551,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2151,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(2580,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2925,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(3286,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g><g data-mml-node="mn" transform="translate(1370.8,-345) scale(0.707)"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g><rect width="2855.2" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(7087.7,0)"><path data-c="2309" d="M21 717T21 730T32 746T75 750H147H256Q266 742 269 735V-235Q262 -248 251 -250Q247 -250 244 -249T239 -247T235 -244T233 -241T231 -237T229 -234V710H133Q119 710 99 710T71 709Q43 709 32 713Z"></path></g></g></g></svg></mjx-container></p><blockquote><p>As we can see in the formula above, for more efficient memory usage the value of M * nbits should be divisible by 8.</p></blockquote><p><img src="/img/2024-04-01-Product_Quantization/pho10.jpg" alt="IndexPQ 的 Faiss 实现"></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>我们已经研究了一种在信息检索系统中非常流行的算法，它可以有效地压缩大量数据。其主要缺点是推理速度缓慢。尽管如此，该算法在现代大数据应用中得到了广泛应用，特别是与其他最近邻搜索技术相结合时。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://vividfree.github.io/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/2017/08/05/understanding-product-quantization">理解 product quantization 算法</a></li><li><a href="https://towardsdatascience.com/similarity-search-product-quantization-b2a1a6397701">Similarity Search, Part 2: Product Quantization</a></li></ul><p>所有图像均来自 《Similarity Search, Part 2: Product Quantization》</p>]]></content>
    
    
    <summary type="html">乘积量化（Product Quantization, PQ）是一种高效的向量压缩与近似最近邻搜索算法，广泛应用于向量数据库。PQ 将高维向量空间分解为多个低维子空间的笛卡尔积，分别对每个子空间进行量化，生成短 PQ 码表示向量，从而大幅降低存储需求。例如，1024 维 float 向量分割为 8 个子向量，每个子空间用 256 个质心编码，压缩率可达 512 倍。训练阶段通过 k-means 聚类为每个子空间生成质心（码本）；编码阶段将子向量映射到最近质心 ID；推理阶段通过预计算查询子向量到质心的偏距表，快速估算近似距离（如欧几里得距离）。PQ 是有损压缩，精度略降但效率高，适合大规模高维数据搜索。FAISS 库中的 IndexPQ 实现支持灵活配置维度、分割数和位数。PQ 的推理速度可能受限，但结合其他技术可广泛应用于图像、文本等相似性搜索场景。</summary>
    
    
    
    
    <category term="向量数据库" scheme="https://wu3227834.github.io/tags/%E5%90%91%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>量化索引：Scalar Quantization 标量量化</title>
    <link href="https://wu3227834.github.io/2024/02/19/2024-02-19-scalar-quantization/"/>
    <id>https://wu3227834.github.io/2024/02/19/2024-02-19-scalar-quantization/</id>
    <published>2024-02-19T00:00:00.000Z</published>
    <updated>2025-05-29T10:13:18.874Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文转载：<a href="https://yongyuan.name/blog/scalar-quantization.html">https://yongyuan.name/blog/scalar-quantization.html</a><br>本意为了归纳总结向量索引相关的知识，方便日后翻阅，自己做了些许的修改~</p></blockquote><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在工作中遇到这样一个场景：通过多模态学习到的 64 维 video embedding，在搜索竞拍的时候，需要实时取到前 K（K&gt;=300）个结果对应得的 video embedding，由于模型比较大，这个 video embedding，不支持实时计算，而是在视频上传时候，就被计算好。工程架构对存储和读取性能是有要求的，既不能直接将这 64 维 embedding 直接写到 kiwi（redis改造后的数据库）里面。</p><p>这个问题，可以简化为：有没有一种量化方法，将一个 d 维 float 型向量，encode 为一个 d 维 int8 型的向量，这个 d 维 int8 型的向量经过 decode 后，与原始向量的误差尽可能小？这样一来，存储空间降低为原来的 1/4 倍，并且读取 int8 的性能比 float 型会快很多。答案是肯定的，这就是本篇博文要介绍总结的 Scalar Quantization。</p><p>Scalar Quantization，即标量量化。关于 Scalar Quantization，网上资料比较多（<a href="https://www.google.com.hk/search?q=Scalar+Quantization&newwindow=1&safe=strict&biw=1389&bih=766&sxsrf=ALeKk01QFkem3Lrzgoe3vrfd5uyeVr2RPQ%3A1624178770171&ei=UgDPYOjkCMWxr7wP98CqkA0&oq=Scalar+Quantization&gs_lcp=Cgdnd3Mtd2l6EAMyBwgjEOoCECcyBwgjEOoCECcyBwgjEOoCECcyBwgjEOoCECcyBwgjEOoCECcyBwgjEOoCECcyBwgjEOoCECcyBwgjEOoCECcyBwgjEOoCECcyBwgjEOoCECdQ06k-WOSrPmDwrD5oAxACeACAAckBiAHJAZIBAzItMZgBAKABAaABAqoBB2d3cy13axqwAQrAAQE&sclient=gws-wiz&ved=0ahUKEwjo1ZW16axxAhxFy4sBHxegCtIQ4dUDCBI&uact=5">Google</a>）但小白菜在查过很多资料后，发觉能把 Scalar Quantization 向量量化过程讲清楚，并且还能剖析 faiss 中实现的 Scalar Quantization。为了方便后面的同学理解，小白菜结合自己对 Scalar Quantization 原理与实现，做了整理。</p><h2 id="Scalar-Quantization-原理"><a href="#Scalar-Quantization-原理" class="headerlink" title="Scalar Quantization 原理"></a>Scalar Quantization 原理</h2><p>Scalar Quantization 标量量化，分为 3 个过程：</p><ul><li>training 过程，主要是训练 encode 过程，需要的一些参数，这些的参数，主要是每 1 维对应的最大值、最小值；</li><li>encode 过程，将 float 向量量化为 int8 向量（int8 是其中一种数据压缩形式，还有 4 比特之类的，这里主要以 8 比特说明原理）</li><li>decode 过程，将 int8 向量解码为 float 向量；</li></ul><p>为了更好的说明 Scalar Quantization 的原理，小白菜画了 Scalar Quantization 标量量化原理框图，如下图所示：</p><p><img src="/img/2024-02-19-Scalar_Quantization/pho1.jpg" alt="Scalar Quantization 标量量化原理框图（copyright@yongyuan.name）"></p><p>整个 Scalar Quantization 过程，其实是很容易理解的，下面对训练、编码和解码做些说明。</p><h3 id="训练过程"><a href="#训练过程" class="headerlink" title="训练过程"></a>训练过程</h3><p>Scalar Quantization 训练过程，如上图最左边所示，从样本中随机采样出 N 个样本后，训练过程主要是得到 N 个样本中每 1 维的最大值、最小值。得到最大值、最小值后，将它们保存下来即可。实际在训练的时候，N 能大的时候，尽量大点。</p><blockquote><p>N 个样本中每 1 维的最大值、最小值：如上图所示，将 64 维度向量切成 64 份，求 N 个向量，在第 i 维度的最大值、最小值。</p></blockquote><h3 id="编码过程"><a href="#编码过程" class="headerlink" title="编码过程"></a>编码过程</h3><p>Scalar Quantization 在编码的时候，对于一个 d 维的待编码的 float 型向量 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="19.498ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 8618 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(849.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(1905.6,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="msub" transform="translate(2405.6,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(3414.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(3858.8,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(4867.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(5312,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(6650.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(7095.3,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g><g data-mml-node="mo" transform="translate(8118,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container>，编码过程主要包含如下步骤：</p><ul><li>对每 1 维，求 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.033ex;" xmlns="http://www.w3.org/2000/svg" width="18.442ex" height="3.112ex" role="img" focusable="false" viewBox="0 -919 8151.4 1375.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(485,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1014,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(1312,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="msub" transform="translate(1884,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(499,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(2954.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(4010.5,0)"><g data-mml-node="mrow" transform="translate(717.4,451.6) scale(0.707)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(899,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(1677,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2555,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="msub" transform="translate(2900,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(633,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mrow" transform="translate(220,-345) scale(0.707)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(878,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="msub" transform="translate(1407,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(2306,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(3084,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3962,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="msub" transform="translate(4307,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(633,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g><rect width="3900.9" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container>；</li><li>对每 1 维，如果 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="10.205ex" height="1.927ex" role="img" focusable="false" viewBox="0 -694 4510.5 851.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(485,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1014,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(1312,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="msub" transform="translate(1884,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(499,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(2954.7,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mn" transform="translate(4010.5,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container>，则 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="6.056ex" height="1.927ex" role="img" focusable="false" viewBox="0 -694 2677 851.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(485,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1014,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(1312,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="msub" transform="translate(1884,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(499,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container> 重置为 0；如果 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="10.205ex" height="1.927ex" role="img" focusable="false" viewBox="0 -694 4510.5 851.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(485,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1014,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(1312,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="msub" transform="translate(1884,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(499,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(2954.7,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="mn" transform="translate(4010.5,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container>，则 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="6.056ex" height="1.927ex" role="img" focusable="false" viewBox="0 -694 2677 851.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(485,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1014,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(1312,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="msub" transform="translate(1884,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(499,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container> 重置为 1。这里主要是对边界情况做异常处理，理论情况下，是不会出现<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="10.205ex" height="1.927ex" role="img" focusable="false" viewBox="0 -694 4510.5 851.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(485,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1014,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(1312,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="msub" transform="translate(1884,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(499,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(2954.7,0)"><path data-c="3C" d="M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z"></path></g><g data-mml-node="mn" transform="translate(4010.5,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container> 或者 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="10.205ex" height="1.927ex" role="img" focusable="false" viewBox="0 -694 4510.5 851.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(485,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1014,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(1312,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="msub" transform="translate(1884,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(499,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(2954.7,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="mn" transform="translate(4010.5,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container> 的情况；</li><li>对每 1 维，对应的编码 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="24.366ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 10769.9 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(433,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(918,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="msub" transform="translate(1438,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(499,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(2508.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3564.5,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3909.5,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4509.5,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(4870.5,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(5259.5,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1000,0)"></path></g><g data-mml-node="mo" transform="translate(6981.7,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mi" transform="translate(7704,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(8189,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(8718,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(9016,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="msub" transform="translate(9588,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(499,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(10380.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>。为什么 255？可以思考下；</li></ul><blockquote><p>归一化：对于每个维度，将原始值映射到 [0, 1] 范围内<br>截断：将归一化后的值截断到 [0, 1] 范围内<br>量化：将截断后的值乘以 255 并进行取整，得到最终的编码值<br>“255”：8 位整数，量化范围为 [0, 255]</p></blockquote><p>整个过程，如上图中的中间图所示。这样就完成了 float 型向量 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="19.498ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 8618 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(849.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(1905.6,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="msub" transform="translate(2405.6,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(3414.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(3858.8,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(605,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(4867.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(5312,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(6650.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(7095.3,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g><g data-mml-node="mo" transform="translate(8118,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container> 的编码，将向量的每 1 维，都变成了一个用 int8 表示的整型数据，也就是对应的 Scalar Quantization 的编码。</p><h3 id="解码过程"><a href="#解码过程" class="headerlink" title="解码过程"></a>解码过程</h3><p>Scalar Quantization 解码过程，是解码的逆过程。解码过程步骤如下：</p><ul><li>对每 1 维，<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.816ex;" xmlns="http://www.w3.org/2000/svg" width="32.197ex" height="3.185ex" role="img" focusable="false" viewBox="0 -1047.1 14231 1407.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1176.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2232.5,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3110.5,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="msub" transform="translate(3455.5,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(633,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(4604.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mfrac" transform="translate(5604.9,0)"><g data-mml-node="mrow" transform="translate(220,516.8) scale(0.707)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(822,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1307,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="msub" transform="translate(1827,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(499,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(2620,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(3398,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(778,0)"></path></g><g data-mml-node="mo" transform="translate(4676,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5065,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mo" transform="translate(5565,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5954,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(6832,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="msub" transform="translate(7361,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(8259.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(9037.9,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(9915.9,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="msub" transform="translate(10260.9,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(633,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(11187.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mn" transform="translate(3782.7,-345) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1000,0)"></path></g><rect width="8386.1" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container>，通过该式子，即可完成对第i维的解码。留个问题：为啥 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="5.047ex" height="1.927ex" role="img" focusable="false" viewBox="0 -694 2231 851.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(433,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(918,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="msub" transform="translate(1438,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(499,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container> 需要加上 0.5？</li></ul><blockquote><p><strong>加 0.5 的作用是将这两种误差平均到每个取值区间内</strong><br>例如，对于取值区间 [0, 1]，如果不对编码值加 0.5，那么所有落在该区间内的浮点型数据都会被映射到同一个离散值 0。这会导致量化误差过大。而加 0.5 后，所有落在该区间内的浮点型数据都会被映射到 0 或 1，并将量化误差平均到这两个离散值上。</p></blockquote><h2 id="Scalar-Quantization-实现"><a href="#Scalar-Quantization-实现" class="headerlink" title="Scalar Quantization 实现"></a>Scalar Quantization 实现</h2><p>Scalar Quantization 的训练、编码、解码实现，可以参考小白菜的实现<a href="https://github.com/willard-yuan/cvt/tree/master/scalar_quantization">scalar_quantization</a>。训练过程，就是计算各维最大值、最小值，自己实现的话，具体可以看 <a href="https://github.com/willard-yuan/cvt/blob/master/scalar_quantization/train/src/sq_train.cpp#L68">L68-L97</a> 。使用faiss的话，如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">faiss::IndexScalarQuantizer <span class="title">SQuantizer</span><span class="params">(d, faiss::ScalarQuantizer::QT_8bit, faiss::METRIC_L2)</span></span>;</span><br><span class="line">SQuantizer.<span class="built_in">train</span>(num_db, xb);</span><br><span class="line"><span class="comment">// SQuantizer.add(num_db, xb);    </span></span><br><span class="line">faiss::<span class="built_in">write_index</span>(&amp;SQuantizer, model_path.<span class="built_in">c_str</span>());</span><br></pre></td></tr></table></figure><p>在 <code>sq_train.cpp</code> 里面，对比了自己实现的训练过程结果和 faiss 训练出来的结果，训练出来的参数结果，两者是一致的。</p><p>faiss encode 的实现，如 <a href="https://github.com/facebookresearch/faiss/blob/master/faiss/impl/ScalarQuantizer.cpp#L328">L328</a> 所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">encode_vector</span><span class="params">(<span class="type">const</span> <span class="type">float</span>* x, <span class="type">uint8_t</span>* code)</span> <span class="type">const</span> <span class="keyword">final</span> </span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; d; i++) {</span><br><span class="line">        <span class="type">float</span> xi = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (vdiff != <span class="number">0</span>) {</span><br><span class="line">            xi = (x[i] - vmin) / vdiff;</span><br><span class="line">            <span class="keyword">if</span> (xi &lt; <span class="number">0</span>) {</span><br><span class="line">                xi = <span class="number">0</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (xi &gt; <span class="number">1.0</span>) {</span><br><span class="line">                xi = <span class="number">1.0</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        Codec::<span class="built_in">encode_component</span>(xi, code, i);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>其中 vdiff = max - min。faiss decode 的实现，如 <a hef="https://github.com/facebookresearch/faiss/blob/master/faiss/impl/ScalarQuantizer.cpp#L344">L344</a> 所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">decode_vector</span><span class="params">(<span class="type">const</span> <span class="type">uint8_t</span>* code, <span class="type">float</span>* x)</span> <span class="type">const</span> <span class="keyword">final</span> </span>{</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; d; i++) {</span><br><span class="line">        <span class="type">float</span> xi = Codec::<span class="built_in">decode_component</span>(code, i);</span><br><span class="line">        x[i] = vmin + xi * vdiff;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>针对小白菜 Scalar Quantization，小白菜实现的编解码过程，同时提供了 faiss 实现的接口调用，也提供了自己实现的接口调用，具体可以阅读 <a href="https://github.com/willard-yuan/cvtk/blob/master/scalar_quantization/scalar_quantization/int8_quan.cc">int8_quan.cc</a>。</p><p>另外，关于 Faiss 实现的 decode 接口，由于采用了多线程方式，在实际使用的时候，<strong>当请求解码的数据量不够大的时候，多线程的方式，性能反而下降</strong>，具体可以看这里提到的<a href="https://github.com/facebookresearch/faiss/issues/1530">Issue: Scale quantization decodes does not fast</a>。</p>]]></content>
    
    
    <summary type="html">标量量化（Scalar Quantization, SQ）是一种高效的向量压缩技术，广泛应用于向量数据库以降低存储和读取开销。SQ 通过将高维 float 型向量量化为 int8 型向量，显著减少存储空间（约 1/4）并提升读取性能。其过程包括训练、编码和解码。训练阶段从样本中提取每维最大值和最小值；编码阶段将 float 向量归一化到 [0, 1]，截断后乘以 255 取整为 int8；解码阶段通过逆运算恢复 float 向量，加入 0.5 以均分量化误差，减小精度损失。SQ 在 FAISS 库中有成熟实现，支持高效的训练和编解码，但多线程解码在小数据量场景下可能性能不佳。SQ 适用于实时性要求高的场景，如视频嵌入搜索，确保在存储和性能约束下实现快速、精确的向量检索，是向量数据库优化的重要工具。</summary>
    
    
    
    
    <category term="向量数据库" scheme="https://wu3227834.github.io/tags/%E5%90%91%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>HDF5 文件转 vecs 文件</title>
    <link href="https://wu3227834.github.io/2024/02/06/2024-02-06-hdf5-wen-jian-zhuan-vecs-wen-jian/"/>
    <id>https://wu3227834.github.io/2024/02/06/2024-02-06-hdf5-wen-jian-zhuan-vecs-wen-jian/</id>
    <published>2024-02-06T00:00:00.000Z</published>
    <updated>2025-05-29T10:13:18.874Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HDF5-文件的结构"><a href="#HDF5-文件的结构" class="headerlink" title="HDF5 文件的结构"></a>HDF5 文件的结构</h2><p>一个 HDF5 格式的文件是一个包含两个对象的容器，一个是<strong>数据集</strong>（datasets），另一个是<strong>组</strong>（groups）。数据集的结构非常类似于 Numpy 的 <strong>array</strong>，组的结构非常类似于 python 的字典，它像一个文件夹一样，它可以包含数据集和其它的组。总结起来：<strong>组像字典一样工作，数据集像 NumPy 数组一样工作</strong>。</p><p>拿 HDF5 格式数据集 <strong>gist-960-euclidean.hdf5</strong> 为例（<a href="http://ann-benchmarks.com/gist-960-euclidean.hdf5">下载地址</a>），整个文件有一个根组，就是下图的”/“。</p><p><img src="/img/2024-02-06-HDF5%E6%96%87%E4%BB%B6%E8%BD%ACvecs%E6%96%87%E4%BB%B6/pho1.jpg" alt="HDF5 文件结构示意图"></p><p>根组下有四个键，分别为 <strong>distances</strong>、<strong>neighbors</strong>、<strong>test</strong> 和 <strong>train</strong>，类比于上图中的 A、B 和 C。</p><ul><li><strong>distances</strong> 对应的是 shape 为 (<strong>1000</strong>, <strong>100</strong>) 的数据集（类比于 Numpy 的 <strong>array</strong>），为每个查询向量最近的 100 个向量距该查询向量的距离，数据类型为 <strong>float32</strong></li><li><strong>neighbors</strong> 对应的是 shape 为 (<strong>1000, 100</strong>) 的数据集，为每个查询向量最近的 100 个向量，数据类型为 <strong>int32</strong></li><li><strong>test</strong> 对应的是 shape 为 (<strong>1000000, 960</strong>) 的数据集，这是基数据（原始数据），一共 1000000 个向量，每个向量的维度为 960 维，数据类型为 <strong>float32</strong></li><li><strong>train</strong> 对应的是 shape 为 (<strong>1000, 960</strong>) 的数据集，只是查询数据，一共 1000 个向量，向量的维度为 960 维，数据类型为 <strong>float32</strong></li></ul><h2 id="vecs-文件的结构"><a href="#vecs-文件的结构" class="headerlink" title="vecs 文件的结构"></a>vecs 文件的结构</h2><p><img src="/img/2024-02-06-HDF5%E6%96%87%E4%BB%B6%E8%BD%ACvecs%E6%96%87%E4%BB%B6/pho2.jpg" alt="vecs 文件结构示意图"></p><p>在常用的公开数据集中，<strong>数据集文件、查询文件</strong>往往使用 fvecs 格式存储。而<strong>真值集（即查询的答案）文件</strong>使用 ivecs 格式存储。其实这两种格式十分相似。</p><h3 id="fvecs"><a href="#fvecs" class="headerlink" title="fvecs"></a>fvecs</h3><p>数据集、查询集采用fvecs格式，其实他们是完全相同的东西。在数据集中，存储的是所有向量，而查询集中，存储的同样是向量，只是向量数量会少一些。</p><p>fvecs 采用<strong>二进制</strong>来存储，直接打开便是乱码。</p><p>下面用一张图来表示 fvecs 的大致格式：</p><p><img src="/img/2024-02-06-HDF5%E6%96%87%E4%BB%B6%E8%BD%ACvecs%E6%96%87%E4%BB%B6/pho3.jpg" alt="fvecs 文件格式示意图"></p><p>每一“行”中，<strong>第一个数表示数据的维度 dim，后面跟着的 dim 个数便是向量各维度的值</strong>。(注：fvecs 中的 f 指 <strong>float32</strong>)</p><p>因此，一“行”表示的便是一个向量。</p><h3 id="ivecs"><a href="#ivecs" class="headerlink" title="ivecs"></a>ivecs</h3><p>ivecs 其实和 fvecs 的格式是一样的，只不过它存储的不是向量，而是每一条查询的答案。</p><p>就是说，ivecs 里的每一“行”里，<strong>第一个数据是查询答案的数量 n，后面 n 个数是答案向量的 id</strong>。(注：ivecs 中的 i 指 <strong>int32</strong>)</p><h2 id="HDF5-转-vecs-脚本"><a href="#HDF5-转-vecs-脚本" class="headerlink" title="HDF5 转 vecs 脚本"></a>HDF5 转 vecs 脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Author: pudding</span></span><br><span class="line"><span class="string">Date: 2024-02-02 10:15:39</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> h5py</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sklearn.preprocessing</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_hdf5_file</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;loading：&#x27;</span>+ filename)</span><br><span class="line">    hdf5_f = h5py.File(filename, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;load done !&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> hdf5_f</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">to_fvecs</span>(<span class="params">filename, data</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> data:</span><br><span class="line">            <span class="comment"># 将 y.size（dim） 以 C++ 的 unsigned int 的形式写入二进制文件</span></span><br><span class="line">            d = struct.pack(<span class="string">&#x27;I&#x27;</span>, y.size)</span><br><span class="line">            fp.write(d)</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> y:</span><br><span class="line">                <span class="comment"># 将 x（vector）以 C++ 的 float 的形式写入二进制文件</span></span><br><span class="line">                a = struct.pack(<span class="string">&#x27;f&#x27;</span>, x)</span><br><span class="line">                fp.write(a)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">to_ivecs</span>(<span class="params">filename, data</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> data:</span><br><span class="line">            d = struct.pack(<span class="string">&#x27;I&#x27;</span>, y.size)</span><br><span class="line">            fp.write(d)</span><br><span class="line">            <span class="keyword">for</span> x <span class="keyword">in</span> y:</span><br><span class="line">                a = struct.pack(<span class="string">&#x27;I&#x27;</span>, x)</span><br><span class="line">                fp.write(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">file_path</span>):</span><br><span class="line">    dataset = load_hdf5_file(file_path)</span><br><span class="line"></span><br><span class="line">    dimension = <span class="built_in">int</span>(dataset.attrs[<span class="string">&quot;dimension&quot;</span>]) <span class="keyword">if</span> <span class="string">&quot;dimension&quot;</span> <span class="keyword">in</span> dataset.attrs <span class="keyword">else</span> <span class="built_in">len</span>(dataset[<span class="string">&quot;train&quot;</span>][<span class="number">0</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;======== HDF5 Basic Information ========&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;dataset dimension：&#x27;</span>+ <span class="built_in">str</span>(dimension))</span><br><span class="line">    filename = file_path.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">    dataname = filename.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    X_train = np.array(dataset[<span class="string">&quot;train&quot;</span>])</span><br><span class="line">    X_test = np.array(dataset[<span class="string">&quot;test&quot;</span>])</span><br><span class="line">    distance = dataset.attrs[<span class="string">&quot;distance&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># if distance == &quot;angular&quot;:</span></span><br><span class="line">    <span class="comment">#     X_train = sklearn.preprocessing.normalize(X_train, axis=1, norm=&quot;l2&quot;)</span></span><br><span class="line">    <span class="comment">#     X_test /= np.linalg.norm(X_test)</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Dataname：&quot;</span> + dataname)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;distance：&quot;</span>, distance)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;got a train set of size (%d * %d)&quot;</span> % (X_train.shape[<span class="number">0</span>], dimension))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;got %d queries&quot;</span> % <span class="built_in">len</span>(X_test))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;======== HDF5 to vesc ========&#x27;</span>)</span><br><span class="line">    dataset_dir = os.path.join(<span class="string">&#x27;./vecs&#x27;</span>, dataname)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dataset_dir):</span><br><span class="line">        os.makedirs(dataset_dir)</span><br><span class="line">    </span><br><span class="line">    to_fvecs(os.path.join(dataset_dir, dataname+<span class="string">&#x27;_base.fvecs&#x27;</span>), X_train)</span><br><span class="line">    to_fvecs(os.path.join(dataset_dir, dataname+<span class="string">&#x27;_query.fvecs&#x27;</span>), X_test)</span><br><span class="line"></span><br><span class="line">    to_ivecs(os.path.join(dataset_dir, dataname+<span class="string">&#x27;_groundtruth.ivecs&#x27;</span>), dataset[<span class="string">&#x27;neighbors&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;dataset[&#x27;train&#x27;] to &quot;</span>+ <span class="built_in">str</span>(os.path.join(dataset_dir, dataname+<span class="string">&#x27;_base.fvecs&#x27;</span>)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;dataset[&#x27;test&#x27;] to &quot;</span>+ <span class="built_in">str</span>(os.path.join(dataset_dir, dataname+<span class="string">&#x27;_query.fvecs&#x27;</span>)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;dataset[&#x27;neighbors&#x27;] to &quot;</span>+ <span class="built_in">str</span>(os.path.join(dataset_dir, dataname+<span class="string">&#x27;_groundtruth.ivecs&#x27;</span>)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&quot;Run the script with file path input&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--file_path&quot;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, required=<span class="literal">True</span>, <span class="built_in">help</span>=<span class="string">&quot;Path to the input file&quot;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    run(args.file_path)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;HDF5-文件的结构&quot;&gt;&lt;a href=&quot;#HDF5-文件的结构&quot; class=&quot;headerlink&quot; title=&quot;HDF5 文件的结构&quot;&gt;&lt;/a&gt;HDF5 文件的结构&lt;/h2&gt;&lt;p&gt;一个 HDF5 格式的文件是一个包含两个对象的容器，一个是&lt;strong&gt;数</summary>
      
    
    
    
    
    <category term="向量数据库" scheme="https://wu3227834.github.io/tags/%E5%90%91%E9%87%8F%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>一文让你应对 Linux 进程 &quot;D&quot; 状态</title>
    <link href="https://wu3227834.github.io/2024/01/16/2024-01-16-linux-jin-cheng-d-zhuang-tai/"/>
    <id>https://wu3227834.github.io/2024/01/16/2024-01-16-linux-jin-cheng-d-zhuang-tai/</id>
    <published>2024-01-16T00:00:00.000Z</published>
    <updated>2025-05-29T10:13:18.874Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>红帽企业 linux 4、5、6、7、8、9</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li>什么是 “D” 状态（或 dstate 或 d-state）?</li><li>什么是进程的 “D” 状态</li></ul><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ul>  <li>Linux 遵循传统 UNIX 的标准，将其平均负荷计算为指定时间间隔内可运行或正在运行的进程（R 状态）的平均数量，以及处于不可中断睡眠（D 状态）中的进程数量。</li>  <li>"D" 状态（TASK_UNINTERRUPTIBLE）是发生在内核代码路径中的一种状态，在这种状态下，在处理任务时执行不能被中断。我们希望这应该是一个短暂的过程，且在正常操作中，内核线程应该快速地从 TASK_UNINTERRUPTIBLE 状态中出来。    <ul>      <li><b>"D" 状态进程通常被阻塞等待资源</b>，磁盘 IO 和锁是进程可能阻塞的几种常见资源。</li>      <li>一个例子可能是与硬件通信的 low level 驱动程序，可能从 NIC 固件检索网络数据包数据或访问硬盘驱动器上的数据块--读写 IO。</li>      <li>通常，这种情况发生得非常快，并且线程保持这种状态的时间非常短（因此通常不会观察到，尤其是在用户空间中）。</li>      <li>"D" 状态名称有历史原因，因为最初认为这种状态是进程处于“磁盘等待”状态。但现在，与“磁盘 IO”分离的网络、锁和其他资源可能导致进程处于不可中断的等待状态。有关进程状态的更多背景信息，请参阅 "<a href="https://access.redhat.com/sites/default/files/attachments/processstates_20120831.pdf">了解 Linux 进程状态</a>"。具体来说，我们总结了 "D" 状态过程如下：“不可中断睡眠状态是不会立即处理信号的状态。它只有在等待资源变得可用或者在等待期间发生超时(如果在进程进入睡眠时指定了超时)时才会被唤醒。”</li>    </ul>  </li>  <li>当线程进入 "D" 状态并且未能在合理的时间内退出该状态时，就会出现问题。这个进程现在被“卡住”，任何等待它的进程（可能在它后面的队列中访问相同的硬件）或依赖它的进程也同样被卡住。    <ul>      <li>虽然“合理的时间”是主观的，但如果一个任务在 D 状态下停滞太久，那么 "<a href="https://access.redhat.com/solutions/31453">INFO: task <process>:<pid> blocked for more than ... seconds</a>" 的消息就会输出，通知系统管理员需要调查或可能需要<a href="https://access.redhat.com/solutions/39188">系统调优</a>的潜在情况。</li>    </ul>  </li>  <li>要查看哪个进程/线程保持在 "D" 状态：    <ul>      <li>获取处于 "D" 状态的线程列表：        <code>ps auxH | awk '$8 ~ /^D/&#123;print&#125;'</code>      </li>      <li>显示每个线程<code>sudo cat /proc/&lt;PID&gt;/stack</code> 的堆栈：<br>        <code>for D_PID in $(ps auxH | awk '$8 ~ /^D/&#123;print $2&#125;');do ps -Llp $D_PID;sudo cat /proc/$D_PID/stack;echo;done</code>      </li>    </ul>  </li></ul><h2 id="根本原因"><a href="#根本原因" class="headerlink" title="根本原因"></a>根本原因</h2><ul><li>发现处于 D 状态的进程是相当普遍和正常的</li><li>在大多数情况下，这是由于对 I/O 资源（通常是本地或远程存储、网络文件系统等）的访问中断造成的</li><li>如果一个进程在 D 状态停滞太久，那么内核中的“<a href="https://access.redhat.com/solutions/31453">停滞任务</a>”逻辑将被启用</li></ul><h2 id="诊断步骤"><a href="#诊断步骤" class="headerlink" title="诊断步骤"></a>诊断步骤</h2><ul><li>检查 ps 输出中是否有处于 D 状态的线程，可以使用类似于以下内容的内容：<code>ps auxH | awk '$8 ~ /^D/&#123;print&#125;'</code></li><li>负载可能很高而且还在增加（可能有成百甚至到数千，1 分钟负载始终高于 5 分钟，5 分钟始终高于 15 分钟，暗示报告的负载不断增加）；机器的响应能力与这个高数字不匹配（机器还能响应命令，但是如果所有核心都被占据之后，可能系统就不再响应）</li><li>解决问题的第一步（假设前两个步骤得到了验证）是隔离导致这种情况的资源（最有可能的存储/文件系统），例如查看处于 d 状态（当前工作）的进程的共同使用的文件或者目录等</li><li>一旦确定了所涉及的资源，就应采取措施恢复对它的访问；根据具体情况，可能会重新获得对在线文件系统/存储的访问，或者可能需要重新启动机器才能完全恢复（最有可能的情况）</li></ul><blockquote><p>参考链接</p><ul><li><a href>What is “D” state (or dstate, d-state)?</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzI0OTIzOTMzMA==&mid=2247485072&idx=1&sn=c9bd418f4dcb9ce2cffd9dfb20461640&chksm=e995c4dddee24dcbc6450633da0627cf65ec92ca61e4e487b774882c5a51db0210a79f3f890a&scene=21#wechat_redirect">一文让你应对Linux 进程“D”状态</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;p&gt;红帽企业 linux 4、5、6、7、8、9&lt;/p&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink</summary>
      
    
    
    
    
    <category term="linux" scheme="https://wu3227834.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>线程和进程的区别</title>
    <link href="https://wu3227834.github.io/2023/12/14/2023-12-14-xian-cheng-he-jin-cheng-de-qu-bie/"/>
    <id>https://wu3227834.github.io/2023/12/14/2023-12-14-xian-cheng-he-jin-cheng-de-qu-bie/</id>
    <published>2023-12-14T00:00:00.000Z</published>
    <updated>2025-05-29T10:13:18.874Z</updated>
    
    <content type="html"><![CDATA[<p><strong>进程</strong>（process）和<strong>线程</strong>（thread）彼此相关，非常相似，因为它们是独立的执行顺序。进程和线程的基本区别在于，进程发生在不同的内存空间，而线程在相同的内存空间中执行。</p><p>通读本文，希望你能找出在操作系统上下文中进程与线程的不同之处。让我们从线程和进程的一些基本知识开始。</p><h2 id="什么是进程？"><a href="#什么是进程？" class="headerlink" title="什么是进程？"></a>什么是进程？</h2><p><strong>进程</strong>是一个活动的程序，也就是说，一个正在执行的程序。它不仅仅是程序代码，因为它包括程序计数器、进程堆栈、寄存器、程序代码等。与此相比，程序代码只是文本部分。</p><p>当计算机程序被触发执行时，它并不是直接运行，而是首先确定程序执行所需的步骤，而遵循这些步骤执行的过程称为进程。</p><p>进程可以分为两种类型，即<strong>克隆进程</strong>和<strong>父进程</strong>。克隆进程也称为子进程，是由另一个进程创建的进程，而主进程是负责创建其他进程，以同时执行多个任务的进程，称为父进程。</p><h2 id="什么是线程？"><a href="#什么是线程？" class="headerlink" title="什么是线程？"></a>什么是线程？</h2><p><strong>线程</strong>是可由调度程序独立管理的轻量级进程。它使用并行性提高了应用程序的性能。线程与其对等线程共享数据段、代码段、文件等信息，同时包含自己的寄存器、堆栈、计数器等。</p><p>线程基本上是大型进程的一个子部分。在进程中，进程中的所有线程都是相互关联的。典型的线程包含一些信息，如数据段、代码段等。这些信息将在执行期间共享给它们的对等线程。</p><p>线程最重要的特性是它们与它们所属的进程中的对等线程共享内存、数据、资源等。此外，进程中的所有线程都需要进行同步，以避免意外的结果。</p><h2 id="进程与线程的区别"><a href="#进程与线程的区别" class="headerlink" title="进程与线程的区别"></a>进程与线程的区别</h2><p>下表突出显示了进程和线程之间的主要区别：</p><table><thead><tr><th>比较</th><th>进程</th><th>线程</th></tr></thead><tbody><tr><td>定义</td><td>进程是一个正在执行的程序，也就是活动的程序</td><td>线程是可由调度程序独立管理的轻量级进程</td></tr><tr><td>上下文切换时间</td><td>进程需要更多的时间进行上下文切换，因为它们比较繁重</td><td>线程需要更少的时间进行上下文切换，因为它们比进程轻</td></tr><tr><td>内存共享</td><td>进程是完全独立的，不共享内存</td><td>进程是完全独立的，不共享内存。</td></tr><tr><td>通信耗时</td><td>进程之间的通信比线程之间的通信需要更多的时间</td><td>线程之间的通信比进程之间的通信需要更少的时间</td></tr><tr><td>阻塞处理</td><td>如果一个进程被阻塞，其余进程可以继续执行</td><td>如果用户级线程被阻塞，它的所有对等线程也会被阻塞</td></tr><tr><td>资源消耗</td><td>进程比线程需要更多的资源</td><td>线程通常比进程需要更少的资源</td></tr><tr><td>依赖性</td><td>各个过程是相互独立的</td><td>线程是进程的一部分，因此是依赖的</td></tr><tr><td>数据和代码共享</td><td>进程具有独立的数据和代码段</td><td>线程与其对等线程共享数据段、代码段、文件等</td></tr><tr><td>创建时间</td><td>进程创建需要更多的时间</td><td>线程创建所需的时间更少</td></tr><tr><td>终止时间</td><td>进程需要更多的时间来终止</td><td>进程需要更多的时间来终止</td></tr></tbody></table><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>进程和线程之间最显著的区别在于，进程被定义为由计算机完成的任务，而线程是可由调度程序独立管理的轻量级进程。</p><blockquote><p>参考链接</p><ul><li><a href="https://www.tutorialspoint.com/difference-between-process-and-thread">https://www.tutorialspoint.com/difference-between-process-and-thread</a></li></ul></blockquote>]]></content>
    
    
    <summary type="html">进程和线程是操作系统中实现并发执行的核心概念。进程是一个正在运行的程序，包含程序代码、计数器、堆栈、寄存器等，运行在独立的内存空间中，分为父进程和子进程（由父进程创建）。线程是进程中的轻量级执行单元，共享进程的内存、数据段和代码段，但拥有独立的寄存器和堆栈。进程间通信耗时长，上下文切换开销大，因其完全独立，不共享内存；线程通信快，切换开销小，因其共享进程资源。进程创建和终止时间较长，资源需求高，而线程更轻量，创建和终止更快，资源消耗少。线程需同步以避免数据竞争，阻塞一个线程可能影响同一进程内的其他线程，而进程间阻塞互不影响。理解进程与线程的区别有助于优化多任务处理和性能测试场景。</summary>
    
    
    
    
    <category term="性能测试" scheme="https://wu3227834.github.io/tags/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
</feed>
